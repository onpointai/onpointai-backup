{
  
    
        "post0": {
            "title": "Loss Functions for Neural Networks",
            "content": "JASON BROWNLEE MACHINE LEARNING MASTERY . Tutorial Overview . This tutorial is divided into three parts; they are: . Regression Loss Functions . Mean Squared Error Loss - default - distribution of target is gaussian - square of error means larger errors penalised more than smaller ones (Keras mse or mean_squared_error) . Mean Squared Logarithmic Error Loss . Mean Absolute Error Loss - distribution of target variable is mainly gaussian but may heave outliers (keras - mean_absolute_error) . Binary Classification Loss Functions - targets are either of two labels . Binary Cross-Entropy (keras - binary_cross_entropy) . Hinge Loss - for use with SVM - binay classification where target values are in the set {-1,1} encourages examples to have the correct sign - assigning more errorwhen thee is a differene in sign between actual/predicted class values . Squared Hinge Loss - square of hinge loss - hass effect of smoothing the surfaceof the error function and making it easier to work with numerically . Multi-Class Classification Loss Functions - targets can belong to one of many labels or classes - predict probability of example beloging to each known class . Multi-Class Cross-Entropy Loss - use this first - calculate a score that summarizes the ave diff between actual and predicted probability distributions for all classes - keras -categorical_cross_entropy . Sparse Multiclass Cross-Entropy Loss - large nb of labels- eg words in a vocabulary may have tens or hundreds of thousands of categories, one for each label. No one-hot encoding keras - sparse_categorical_crossentropy . Kullback Leibler Divergence Loss KL divergence - measure of how one probability distribution differs from a baseline distribution KLdiv of 0 suggest distributions are identical calculates how much information is lost if the predicted target distributon is use to approximate the desired target probablity distribuion KLd more commonly used when using models that learn to approximate a more complex fn than simply multi-class ie autoencoding used for learning a dense feature representation under a model that must construct the original input . keras - kullback_liebler_divergence . Regression loss function . #&#39;/Users/dexterdsilva/Documents/Developer/MachineLearning/brownlee_mlm&#39; import os os.path.abspath(&#39;&#39;) . &#39;/Users/dexterdsilva/Documents/Developer/MachineLearning/brownlee_mlm&#39; . from sklearn.datasets import make_regression from sklearn.preprocessing import StandardScaler from keras.models import Sequential from keras.layers import Dense from keras.optimizers import SGD import matplotlib.pyplot as plt . Using TensorFlow backend. . import keras print(keras.__version__) import tensorflow as tf print(tf.__version__) . 2.3.1 2.1.0 . #generate regression dataset #20 X,y=make_regression(n_samples=1000, n_features=20,noise=0.1, random_state=1) . X[0] . array([ 0.58372668, 0.78593639, -0.17187155, 0.66928708, 1.67181016, 0.59831823, 1.49807611, 0.27925069, -0.31705821, -0.41961259, -0.21796143, 0.81186707, -0.79215259, 0.56621046, 0.97473625, -0.8223744 , 1.03007179, -0.67945508, -0.21540618, 1.03118947]) . print(y.shape) f&#39;{y[0]}&#39; print(type(y)) . (1000,) &lt;class &#39;numpy.ndarray&#39;&gt; . X=StandardScaler().fit_transform(X) . X[0] . array([ 0.64516745, 0.76000873, -0.18010938, 0.65740427, 1.65197553, 0.56574009, 1.50368462, 0.30416606, -0.29634854, -0.37041198, -0.22745535, 0.72392625, -0.76421488, 0.55675061, 0.96630152, -0.82406123, 0.95038766, -0.76479647, -0.2088517 , 1.04702956]) . y=StandardScaler().fit_transform(y.reshape(len(y),1))[:,0] . n_train=500 trainX, testX = X[:n_train,:], X[n_train:,:] trainy, testy = y[:n_train], y[n_train:] . model= Sequential() model.add(Dense(25, input_dim=20,activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(1, activation=&#39;linear&#39;)) . opt=SGD(lr=0.01, momentum=0.9) . Mean Squared Error Loss . model.compile(loss=&#39;mse&#39;, optimizer = opt) . h=model.fit(trainX, trainy, validation_data=(testX,testy), epochs=100, verbose=0) . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;loss&#39;]) . fig= plt.figure(figsize=(5,5)) plt.plot(h.history[&#39;loss&#39;],label=&#39;train_loss&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test_loss&#39;) plt.legend() plt.show() . Mean Squared Logarithmic Error Loss . model=Sequential() model.add(Dense(25, input_dim=20, activation =&#39;relu&#39;, kernel_initializer = &#39;he_uniform&#39;)) model.add(Dense(1, activation = &#39;linear&#39;)) opt=SGD(lr=0.1, momentum=0.9) model.compile(loss=&#39;mean_squared_logarithmic_error&#39;, optimizer=opt, metrics=[&#39;mse&#39;]) . print(trainX.shape,&#39; &#39;,trainy.shape,&#39; &#39;, testX.shape,&#39; &#39;, testy.shape) . (500, 20) (500,) (500, 20) (500,) . h = model.fit(trainX, trainy, validation_data=(testX, testy), epochs=200, verbose=0) . # evaluate the model _,train_mse=model.evaluate(trainX, trainy, verbose=0) _,test_mse=model.evaluate(testX, testy, verbose=0) . print(&#39;Train: {:.2f} Test {:.2f}&#39;.format(train_mse, test_mse)) . Train: 0.31 Test 0.37 . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;val_mse&#39;, &#39;loss&#39;, &#39;mse&#39;]) . fig=plt.figure(figsize=(10,10)) plt.subplot(211) plt.title(&#39;Loss&#39;) plt.plot(h.history[&#39;loss&#39;],label=&#39;Training Loss&#39;) plt.plot(h.history[&#39;val_loss&#39;],label = &#39;Test Loss&#39;) plt.legend() plt.subplot(212) plt.title(&#39;Mean Squared Error&#39;) plt.plot(h.history[&#39;mse&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_mse&#39;], label=&#39;test&#39;) plt.legend() plt.show() . Mean Absolute Error Loss . X,y=make_regression(n_samples=1000, n_features=20, noise=0.1, random_state=1) . print(X.shape, y.shape,&#39; &#39;, type(y)) plt.scatter(X[:,1],y) . (1000, 20) (1000,) &lt;class &#39;numpy.ndarray&#39;&gt; . &lt;matplotlib.collections.PathCollection at 0x13e0af090&gt; . len(y) . 1000 . X=StandardScaler().fit_transform(X) y=StandardScaler().fit_transform(y.reshape(len(y),1)) . n_train=500 trainX, testX = X[:n_train,:],X[n_train:,:] trainy, testy = y[:n_train], y[n_train:] . model= Sequential() model.add(Dense(25,input_dim=20, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(1, activation=&#39;linear&#39;)) opt=SGD(lr=0.01, momentum=0.9) model.compile(loss=&#39;mean_absolute_error&#39;, optimizer=opt,metrics=[&#39;mse&#39;]) . h=model.fit(trainX, trainy,validation_data=(testX, testy), epochs=100, verbose=1) . Train on 500 samples, validate on 500 samples Epoch 1/100 500/500 [==============================] - 0s 237us/step - loss: 1.1795 - mse: 2.3812 - val_loss: 0.8786 - val_mse: 1.2499 Epoch 2/100 500/500 [==============================] - 0s 67us/step - loss: 0.5896 - mse: 0.5971 - val_loss: 0.4834 - val_mse: 0.3797 Epoch 3/100 500/500 [==============================] - 0s 75us/step - loss: 0.3868 - mse: 0.2460 - val_loss: 0.3466 - val_mse: 0.1981 Epoch 4/100 500/500 [==============================] - 0s 70us/step - loss: 0.2940 - mse: 0.1484 - val_loss: 0.3221 - val_mse: 0.1673 Epoch 5/100 500/500 [==============================] - 0s 67us/step - loss: 0.2530 - mse: 0.1124 - val_loss: 0.2833 - val_mse: 0.1294 Epoch 6/100 500/500 [==============================] - 0s 74us/step - loss: 0.2235 - mse: 0.0911 - val_loss: 0.2498 - val_mse: 0.1031 Epoch 7/100 500/500 [==============================] - 0s 69us/step - loss: 0.2107 - mse: 0.0761 - val_loss: 0.2332 - val_mse: 0.0898 Epoch 8/100 500/500 [==============================] - 0s 62us/step - loss: 0.1857 - mse: 0.0594 - val_loss: 0.2136 - val_mse: 0.0740 Epoch 9/100 500/500 [==============================] - 0s 68us/step - loss: 0.1701 - mse: 0.0515 - val_loss: 0.2031 - val_mse: 0.0739 Epoch 10/100 500/500 [==============================] - 0s 69us/step - loss: 0.1598 - mse: 0.0450 - val_loss: 0.1839 - val_mse: 0.0542 Epoch 11/100 500/500 [==============================] - 0s 64us/step - loss: 0.1440 - mse: 0.0372 - val_loss: 0.1684 - val_mse: 0.0486 Epoch 12/100 500/500 [==============================] - 0s 70us/step - loss: 0.1305 - mse: 0.0292 - val_loss: 0.1644 - val_mse: 0.0513 Epoch 13/100 500/500 [==============================] - 0s 67us/step - loss: 0.1305 - mse: 0.0299 - val_loss: 0.1608 - val_mse: 0.0437 Epoch 14/100 500/500 [==============================] - 0s 64us/step - loss: 0.1259 - mse: 0.0282 - val_loss: 0.1716 - val_mse: 0.0493 Epoch 15/100 500/500 [==============================] - 0s 68us/step - loss: 0.1462 - mse: 0.0376 - val_loss: 0.1580 - val_mse: 0.0442 Epoch 16/100 500/500 [==============================] - 0s 73us/step - loss: 0.1323 - mse: 0.0291 - val_loss: 0.1440 - val_mse: 0.0357 Epoch 17/100 500/500 [==============================] - 0s 65us/step - loss: 0.1220 - mse: 0.0254 - val_loss: 0.1295 - val_mse: 0.0299 Epoch 18/100 500/500 [==============================] - 0s 71us/step - loss: 0.1055 - mse: 0.0197 - val_loss: 0.1371 - val_mse: 0.0321 Epoch 19/100 500/500 [==============================] - 0s 67us/step - loss: 0.1106 - mse: 0.0221 - val_loss: 0.1330 - val_mse: 0.0294 Epoch 20/100 500/500 [==============================] - 0s 63us/step - loss: 0.1133 - mse: 0.0232 - val_loss: 0.1423 - val_mse: 0.0320 Epoch 21/100 500/500 [==============================] - 0s 68us/step - loss: 0.1106 - mse: 0.0224 - val_loss: 0.1289 - val_mse: 0.0275 Epoch 22/100 500/500 [==============================] - 0s 67us/step - loss: 0.0986 - mse: 0.0173 - val_loss: 0.1258 - val_mse: 0.0275 Epoch 23/100 500/500 [==============================] - 0s 65us/step - loss: 0.0939 - mse: 0.0159 - val_loss: 0.1288 - val_mse: 0.0315 Epoch 24/100 500/500 [==============================] - 0s 67us/step - loss: 0.0944 - mse: 0.0159 - val_loss: 0.1100 - val_mse: 0.0221 Epoch 25/100 500/500 [==============================] - 0s 63us/step - loss: 0.0853 - mse: 0.0135 - val_loss: 0.1164 - val_mse: 0.0259 Epoch 26/100 500/500 [==============================] - 0s 65us/step - loss: 0.0982 - mse: 0.0168 - val_loss: 0.1200 - val_mse: 0.0263 Epoch 27/100 500/500 [==============================] - 0s 70us/step - loss: 0.0923 - mse: 0.0142 - val_loss: 0.1037 - val_mse: 0.0197 Epoch 28/100 500/500 [==============================] - 0s 70us/step - loss: 0.0823 - mse: 0.0132 - val_loss: 0.1038 - val_mse: 0.0186 Epoch 29/100 500/500 [==============================] - 0s 68us/step - loss: 0.0786 - mse: 0.0109 - val_loss: 0.1061 - val_mse: 0.0238 Epoch 30/100 500/500 [==============================] - 0s 74us/step - loss: 0.0755 - mse: 0.0107 - val_loss: 0.1218 - val_mse: 0.0269 Epoch 31/100 500/500 [==============================] - 0s 65us/step - loss: 0.0913 - mse: 0.0139 - val_loss: 0.1130 - val_mse: 0.0259 Epoch 32/100 500/500 [==============================] - 0s 68us/step - loss: 0.0712 - mse: 0.0095 - val_loss: 0.1121 - val_mse: 0.0232 Epoch 33/100 500/500 [==============================] - 0s 67us/step - loss: 0.0817 - mse: 0.0121 - val_loss: 0.1184 - val_mse: 0.0236 Epoch 34/100 500/500 [==============================] - 0s 64us/step - loss: 0.0815 - mse: 0.0116 - val_loss: 0.1039 - val_mse: 0.0182 Epoch 35/100 500/500 [==============================] - 0s 68us/step - loss: 0.0813 - mse: 0.0114 - val_loss: 0.0947 - val_mse: 0.0165 Epoch 36/100 500/500 [==============================] - 0s 70us/step - loss: 0.0745 - mse: 0.0097 - val_loss: 0.0962 - val_mse: 0.0167 Epoch 37/100 500/500 [==============================] - 0s 64us/step - loss: 0.0772 - mse: 0.0108 - val_loss: 0.0996 - val_mse: 0.0161 Epoch 38/100 500/500 [==============================] - 0s 56us/step - loss: 0.0916 - mse: 0.0147 - val_loss: 0.1523 - val_mse: 0.0388 Epoch 39/100 500/500 [==============================] - 0s 79us/step - loss: 0.1013 - mse: 0.0160 - val_loss: 0.1284 - val_mse: 0.0308 Epoch 40/100 500/500 [==============================] - 0s 85us/step - loss: 0.0862 - mse: 0.0132 - val_loss: 0.1087 - val_mse: 0.0209 Epoch 41/100 500/500 [==============================] - 0s 75us/step - loss: 0.0694 - mse: 0.0085 - val_loss: 0.1111 - val_mse: 0.0198 Epoch 42/100 500/500 [==============================] - 0s 69us/step - loss: 0.0800 - mse: 0.0111 - val_loss: 0.0912 - val_mse: 0.0141 Epoch 43/100 500/500 [==============================] - 0s 79us/step - loss: 0.0787 - mse: 0.0106 - val_loss: 0.0974 - val_mse: 0.0155 Epoch 44/100 500/500 [==============================] - 0s 82us/step - loss: 0.0688 - mse: 0.0083 - val_loss: 0.0883 - val_mse: 0.0142 Epoch 45/100 500/500 [==============================] - 0s 94us/step - loss: 0.0603 - mse: 0.0064 - val_loss: 0.0832 - val_mse: 0.0122 Epoch 46/100 500/500 [==============================] - 0s 95us/step - loss: 0.0587 - mse: 0.0057 - val_loss: 0.0874 - val_mse: 0.0130 Epoch 47/100 500/500 [==============================] - 0s 96us/step - loss: 0.0715 - mse: 0.0088 - val_loss: 0.1110 - val_mse: 0.0193 Epoch 48/100 500/500 [==============================] - 0s 98us/step - loss: 0.0809 - mse: 0.0105 - val_loss: 0.0919 - val_mse: 0.0147 Epoch 49/100 500/500 [==============================] - 0s 70us/step - loss: 0.0703 - mse: 0.0082 - val_loss: 0.0788 - val_mse: 0.0107 Epoch 50/100 500/500 [==============================] - 0s 69us/step - loss: 0.0774 - mse: 0.0102 - val_loss: 0.1042 - val_mse: 0.0169 Epoch 51/100 500/500 [==============================] - 0s 73us/step - loss: 0.0658 - mse: 0.0074 - val_loss: 0.0787 - val_mse: 0.0097 Epoch 52/100 500/500 [==============================] - 0s 69us/step - loss: 0.0679 - mse: 0.0076 - val_loss: 0.0898 - val_mse: 0.0121 Epoch 53/100 500/500 [==============================] - 0s 69us/step - loss: 0.0705 - mse: 0.0081 - val_loss: 0.0799 - val_mse: 0.0104 Epoch 54/100 500/500 [==============================] - 0s 70us/step - loss: 0.0740 - mse: 0.0091 - val_loss: 0.0957 - val_mse: 0.0139 Epoch 55/100 500/500 [==============================] - 0s 79us/step - loss: 0.0670 - mse: 0.0070 - val_loss: 0.0856 - val_mse: 0.0128 Epoch 56/100 500/500 [==============================] - 0s 70us/step - loss: 0.0583 - mse: 0.0056 - val_loss: 0.0642 - val_mse: 0.0070 Epoch 57/100 500/500 [==============================] - 0s 69us/step - loss: 0.0522 - mse: 0.0044 - val_loss: 0.0696 - val_mse: 0.0081 Epoch 58/100 500/500 [==============================] - 0s 80us/step - loss: 0.0581 - mse: 0.0054 - val_loss: 0.0666 - val_mse: 0.0075 Epoch 59/100 500/500 [==============================] - 0s 76us/step - loss: 0.0505 - mse: 0.0040 - val_loss: 0.0809 - val_mse: 0.0106 Epoch 60/100 500/500 [==============================] - 0s 80us/step - loss: 0.0660 - mse: 0.0070 - val_loss: 0.1008 - val_mse: 0.0160 Epoch 61/100 500/500 [==============================] - 0s 70us/step - loss: 0.0701 - mse: 0.0080 - val_loss: 0.0761 - val_mse: 0.0093 Epoch 62/100 500/500 [==============================] - 0s 80us/step - loss: 0.0656 - mse: 0.0069 - val_loss: 0.0744 - val_mse: 0.0086 Epoch 63/100 500/500 [==============================] - 0s 79us/step - loss: 0.0683 - mse: 0.0072 - val_loss: 0.0695 - val_mse: 0.0080 Epoch 64/100 500/500 [==============================] - 0s 68us/step - loss: 0.0630 - mse: 0.0068 - val_loss: 0.0695 - val_mse: 0.0077 Epoch 65/100 500/500 [==============================] - 0s 65us/step - loss: 0.0570 - mse: 0.0053 - val_loss: 0.0629 - val_mse: 0.0062 Epoch 66/100 500/500 [==============================] - 0s 63us/step - loss: 0.0553 - mse: 0.0050 - val_loss: 0.0650 - val_mse: 0.0069 Epoch 67/100 500/500 [==============================] - 0s 65us/step - loss: 0.0466 - mse: 0.0034 - val_loss: 0.0619 - val_mse: 0.0062 Epoch 68/100 500/500 [==============================] - 0s 67us/step - loss: 0.0418 - mse: 0.0028 - val_loss: 0.0512 - val_mse: 0.0044 Epoch 69/100 500/500 [==============================] - 0s 66us/step - loss: 0.0408 - mse: 0.0027 - val_loss: 0.0571 - val_mse: 0.0051 Epoch 70/100 500/500 [==============================] - 0s 66us/step - loss: 0.0476 - mse: 0.0038 - val_loss: 0.0495 - val_mse: 0.0039 Epoch 71/100 500/500 [==============================] - 0s 64us/step - loss: 0.0455 - mse: 0.0032 - val_loss: 0.0452 - val_mse: 0.0033 Epoch 72/100 500/500 [==============================] - 0s 63us/step - loss: 0.0449 - mse: 0.0033 - val_loss: 0.0430 - val_mse: 0.0032 Epoch 73/100 500/500 [==============================] - 0s 65us/step - loss: 0.0406 - mse: 0.0027 - val_loss: 0.0525 - val_mse: 0.0044 Epoch 74/100 500/500 [==============================] - 0s 63us/step - loss: 0.0462 - mse: 0.0035 - val_loss: 0.0527 - val_mse: 0.0044 Epoch 75/100 500/500 [==============================] - 0s 70us/step - loss: 0.0384 - mse: 0.0024 - val_loss: 0.0410 - val_mse: 0.0028 Epoch 76/100 500/500 [==============================] - 0s 64us/step - loss: 0.0458 - mse: 0.0035 - val_loss: 0.0763 - val_mse: 0.0082 Epoch 77/100 500/500 [==============================] - 0s 62us/step - loss: 0.0498 - mse: 0.0042 - val_loss: 0.0541 - val_mse: 0.0046 Epoch 78/100 500/500 [==============================] - 0s 62us/step - loss: 0.0599 - mse: 0.0060 - val_loss: 0.0580 - val_mse: 0.0055 Epoch 79/100 500/500 [==============================] - 0s 60us/step - loss: 0.0443 - mse: 0.0032 - val_loss: 0.0350 - val_mse: 0.0020 Epoch 80/100 500/500 [==============================] - 0s 64us/step - loss: 0.0381 - mse: 0.0023 - val_loss: 0.0387 - val_mse: 0.0025 Epoch 81/100 500/500 [==============================] - 0s 69us/step - loss: 0.0313 - mse: 0.0016 - val_loss: 0.0533 - val_mse: 0.0047 Epoch 82/100 500/500 [==============================] - 0s 61us/step - loss: 0.0462 - mse: 0.0034 - val_loss: 0.0420 - val_mse: 0.0030 Epoch 83/100 500/500 [==============================] - 0s 69us/step - loss: 0.0549 - mse: 0.0050 - val_loss: 0.0996 - val_mse: 0.0134 Epoch 84/100 500/500 [==============================] - 0s 62us/step - loss: 0.0700 - mse: 0.0079 - val_loss: 0.0666 - val_mse: 0.0065 Epoch 85/100 500/500 [==============================] - 0s 59us/step - loss: 0.0515 - mse: 0.0043 - val_loss: 0.0493 - val_mse: 0.0040 Epoch 86/100 500/500 [==============================] - 0s 60us/step - loss: 0.0485 - mse: 0.0039 - val_loss: 0.0525 - val_mse: 0.0043 Epoch 87/100 500/500 [==============================] - 0s 63us/step - loss: 0.0405 - mse: 0.0025 - val_loss: 0.0481 - val_mse: 0.0038 Epoch 88/100 500/500 [==============================] - 0s 64us/step - loss: 0.0378 - mse: 0.0022 - val_loss: 0.0653 - val_mse: 0.0063 Epoch 89/100 500/500 [==============================] - 0s 63us/step - loss: 0.0423 - mse: 0.0030 - val_loss: 0.0473 - val_mse: 0.0036 Epoch 90/100 500/500 [==============================] - 0s 64us/step - loss: 0.0504 - mse: 0.0042 - val_loss: 0.0639 - val_mse: 0.0062 Epoch 91/100 500/500 [==============================] - 0s 62us/step - loss: 0.0511 - mse: 0.0043 - val_loss: 0.0491 - val_mse: 0.0037 Epoch 92/100 500/500 [==============================] - 0s 63us/step - loss: 0.0366 - mse: 0.0023 - val_loss: 0.0305 - val_mse: 0.0015 Epoch 93/100 500/500 [==============================] - 0s 67us/step - loss: 0.0322 - mse: 0.0017 - val_loss: 0.0428 - val_mse: 0.0030 Epoch 94/100 500/500 [==============================] - 0s 69us/step - loss: 0.0378 - mse: 0.0024 - val_loss: 0.0352 - val_mse: 0.0019 Epoch 95/100 500/500 [==============================] - 0s 63us/step - loss: 0.0341 - mse: 0.0019 - val_loss: 0.0254 - val_mse: 0.0011 Epoch 96/100 500/500 [==============================] - 0s 63us/step - loss: 0.0377 - mse: 0.0025 - val_loss: 0.0459 - val_mse: 0.0032 Epoch 97/100 500/500 [==============================] - 0s 70us/step - loss: 0.0314 - mse: 0.0017 - val_loss: 0.0456 - val_mse: 0.0031 Epoch 98/100 500/500 [==============================] - 0s 61us/step - loss: 0.0382 - mse: 0.0023 - val_loss: 0.0363 - val_mse: 0.0022 Epoch 99/100 500/500 [==============================] - 0s 69us/step - loss: 0.0339 - mse: 0.0018 - val_loss: 0.0296 - val_mse: 0.0014 Epoch 100/100 500/500 [==============================] - 0s 65us/step - loss: 0.0385 - mse: 0.0026 - val_loss: 0.0476 - val_mse: 0.0036 . _,train_mse=model.evaluate(trainX, trainy, verbose=1) . 500/500 [==============================] - 0s 18us/step . _,test_mse=model.evaluate(testX, testy, verbose=1) . 500/500 [==============================] - 0s 19us/step . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;val_mse&#39;, &#39;loss&#39;, &#39;mse&#39;]) . print(&#39;Train: {:.4f} Test:{:.4f}&#39;.format(train_mse, test_mse)) . Train: 0.0042 Test:0.0036 . fig=plt.figure(figsize=(10,10)) plt.subplot(121) plt.title(&#39;LOSS&#39;) plt.plot(h.history[&#39;loss&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test&#39;) plt.legend() plt.subplot(122) plt.title(&#39;MSE&#39;) plt.plot(h.history[&#39;mse&#39;],label=&#39;train&#39;) plt.plot(h.history[&#39;val_mse&#39;], label=&#39;test&#39;) plt.legend() plt.show() . Binary Classification Loss Functions . from sklearn.datasets import make_circles from sklearn.preprocessing import StandardScaler from keras.models import Sequential from keras.layers import Dense from keras.optimizers import SGD from numpy import where import matplotlib.pyplot as plt %matplotlib inline . X,y = make_circles(n_samples=1000,noise=0.1, random_state=1) for i in range(2): samples_idx= where(y==i) plt.scatter(X[samples_idx,0], X[samples_idx,1], label=str(i)) plt.legend() plt.show() . print(X[:5]) print(y[:5]) . [[ 0.92787748 -0.04521731] [-0.54303182 -0.75444674] [ 0.9246533 -0.71492522] [-0.10217077 -0.89283523] [-1.01719242 0.24737775]] [1 1 0 0 0] . n_train=500 trainX,testX=X[:n_train,:],X[:n_train] trainy,testy = y[:n_train], y[:n_train] . print(trainX.shape ,&#39; &#39;, trainy.shape) . (500, 2) (500,) . Binary Cross Entropy . model=Sequential() model.add(Dense(50, input_dim=2, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(1, activation=&#39;sigmoid&#39;)) opt=SGD(lr=0.01, momentum=0.9) model.compile(loss=&#39;binary_crossentropy&#39;, optimizer=opt, metrics=[&#39;accuracy&#39;]) . h=model.fit(trainX, trainy, validation_data=(testX,testy), epochs=200,verbose=1) . Train on 500 samples, validate on 500 samples Epoch 1/200 500/500 [==============================] - 0s 310us/step - loss: 0.7290 - accuracy: 0.5080 - val_loss: 0.6815 - val_accuracy: 0.5620 Epoch 2/200 500/500 [==============================] - 0s 76us/step - loss: 0.6831 - accuracy: 0.5500 - val_loss: 0.6710 - val_accuracy: 0.6280 Epoch 3/200 500/500 [==============================] - 0s 77us/step - loss: 0.6716 - accuracy: 0.5380 - val_loss: 0.6654 - val_accuracy: 0.5580 Epoch 4/200 500/500 [==============================] - 0s 73us/step - loss: 0.6658 - accuracy: 0.6000 - val_loss: 0.6602 - val_accuracy: 0.5880 Epoch 5/200 500/500 [==============================] - 0s 75us/step - loss: 0.6604 - accuracy: 0.5740 - val_loss: 0.6560 - val_accuracy: 0.5900 Epoch 6/200 500/500 [==============================] - 0s 79us/step - loss: 0.6623 - accuracy: 0.6180 - val_loss: 0.6511 - val_accuracy: 0.6080 Epoch 7/200 500/500 [==============================] - 0s 71us/step - loss: 0.6540 - accuracy: 0.6340 - val_loss: 0.6475 - val_accuracy: 0.6200 Epoch 8/200 500/500 [==============================] - 0s 77us/step - loss: 0.6483 - accuracy: 0.7000 - val_loss: 0.6426 - val_accuracy: 0.6640 Epoch 9/200 500/500 [==============================] - 0s 77us/step - loss: 0.6427 - accuracy: 0.6420 - val_loss: 0.6383 - val_accuracy: 0.6460 Epoch 10/200 500/500 [==============================] - 0s 72us/step - loss: 0.6396 - accuracy: 0.6160 - val_loss: 0.6341 - val_accuracy: 0.6660 Epoch 11/200 500/500 [==============================] - 0s 87us/step - loss: 0.6357 - accuracy: 0.6920 - val_loss: 0.6302 - val_accuracy: 0.6920 Epoch 12/200 500/500 [==============================] - 0s 105us/step - loss: 0.6299 - accuracy: 0.7060 - val_loss: 0.6262 - val_accuracy: 0.7140 Epoch 13/200 500/500 [==============================] - 0s 89us/step - loss: 0.6276 - accuracy: 0.6940 - val_loss: 0.6220 - val_accuracy: 0.6820 Epoch 14/200 500/500 [==============================] - 0s 93us/step - loss: 0.6239 - accuracy: 0.6720 - val_loss: 0.6178 - val_accuracy: 0.7220 Epoch 15/200 500/500 [==============================] - 0s 98us/step - loss: 0.6201 - accuracy: 0.7220 - val_loss: 0.6137 - val_accuracy: 0.7380 Epoch 16/200 500/500 [==============================] - 0s 85us/step - loss: 0.6188 - accuracy: 0.6700 - val_loss: 0.6101 - val_accuracy: 0.7140 Epoch 17/200 500/500 [==============================] - 0s 101us/step - loss: 0.6124 - accuracy: 0.7300 - val_loss: 0.6071 - val_accuracy: 0.7540 Epoch 18/200 500/500 [==============================] - 0s 92us/step - loss: 0.6051 - accuracy: 0.7560 - val_loss: 0.6024 - val_accuracy: 0.7300 Epoch 19/200 500/500 [==============================] - 0s 101us/step - loss: 0.6049 - accuracy: 0.7240 - val_loss: 0.5990 - val_accuracy: 0.7560 Epoch 20/200 500/500 [==============================] - 0s 98us/step - loss: 0.5976 - accuracy: 0.7440 - val_loss: 0.5945 - val_accuracy: 0.7520 Epoch 21/200 500/500 [==============================] - 0s 82us/step - loss: 0.5948 - accuracy: 0.7560 - val_loss: 0.5913 - val_accuracy: 0.7780 Epoch 22/200 500/500 [==============================] - 0s 104us/step - loss: 0.5910 - accuracy: 0.7660 - val_loss: 0.5869 - val_accuracy: 0.7760 Epoch 23/200 500/500 [==============================] - 0s 86us/step - loss: 0.5898 - accuracy: 0.7440 - val_loss: 0.5839 - val_accuracy: 0.7720 Epoch 24/200 500/500 [==============================] - 0s 97us/step - loss: 0.5859 - accuracy: 0.7820 - val_loss: 0.5808 - val_accuracy: 0.7940 Epoch 25/200 500/500 [==============================] - 0s 96us/step - loss: 0.5798 - accuracy: 0.7840 - val_loss: 0.5760 - val_accuracy: 0.7880 Epoch 26/200 500/500 [==============================] - 0s 93us/step - loss: 0.5782 - accuracy: 0.7500 - val_loss: 0.5721 - val_accuracy: 0.7940 Epoch 27/200 500/500 [==============================] - 0s 99us/step - loss: 0.5722 - accuracy: 0.8080 - val_loss: 0.5687 - val_accuracy: 0.8000 Epoch 28/200 500/500 [==============================] - 0s 93us/step - loss: 0.5711 - accuracy: 0.7480 - val_loss: 0.5647 - val_accuracy: 0.7840 Epoch 29/200 500/500 [==============================] - 0s 76us/step - loss: 0.5670 - accuracy: 0.8020 - val_loss: 0.5611 - val_accuracy: 0.8180 Epoch 30/200 500/500 [==============================] - 0s 67us/step - loss: 0.5617 - accuracy: 0.7960 - val_loss: 0.5573 - val_accuracy: 0.8040 Epoch 31/200 500/500 [==============================] - 0s 83us/step - loss: 0.5586 - accuracy: 0.7960 - val_loss: 0.5539 - val_accuracy: 0.8040 Epoch 32/200 500/500 [==============================] - 0s 67us/step - loss: 0.5534 - accuracy: 0.8060 - val_loss: 0.5507 - val_accuracy: 0.8080 Epoch 33/200 500/500 [==============================] - 0s 77us/step - loss: 0.5512 - accuracy: 0.8040 - val_loss: 0.5470 - val_accuracy: 0.8160 Epoch 34/200 500/500 [==============================] - 0s 94us/step - loss: 0.5472 - accuracy: 0.8200 - val_loss: 0.5434 - val_accuracy: 0.8180 Epoch 35/200 500/500 [==============================] - 0s 83us/step - loss: 0.5438 - accuracy: 0.8040 - val_loss: 0.5403 - val_accuracy: 0.8120 Epoch 36/200 500/500 [==============================] - 0s 89us/step - loss: 0.5418 - accuracy: 0.8060 - val_loss: 0.5369 - val_accuracy: 0.8120 Epoch 37/200 500/500 [==============================] - 0s 91us/step - loss: 0.5365 - accuracy: 0.8140 - val_loss: 0.5335 - val_accuracy: 0.8180 Epoch 38/200 500/500 [==============================] - 0s 87us/step - loss: 0.5349 - accuracy: 0.8160 - val_loss: 0.5299 - val_accuracy: 0.8200 Epoch 39/200 500/500 [==============================] - 0s 88us/step - loss: 0.5303 - accuracy: 0.8040 - val_loss: 0.5271 - val_accuracy: 0.8000 Epoch 40/200 500/500 [==============================] - 0s 85us/step - loss: 0.5277 - accuracy: 0.8180 - val_loss: 0.5229 - val_accuracy: 0.8240 Epoch 41/200 500/500 [==============================] - 0s 94us/step - loss: 0.5258 - accuracy: 0.7940 - val_loss: 0.5202 - val_accuracy: 0.8060 Epoch 42/200 500/500 [==============================] - 0s 109us/step - loss: 0.5206 - accuracy: 0.8040 - val_loss: 0.5163 - val_accuracy: 0.8240 Epoch 43/200 500/500 [==============================] - 0s 78us/step - loss: 0.5182 - accuracy: 0.8160 - val_loss: 0.5144 - val_accuracy: 0.8140 Epoch 44/200 500/500 [==============================] - 0s 78us/step - loss: 0.5184 - accuracy: 0.8000 - val_loss: 0.5098 - val_accuracy: 0.8200 Epoch 45/200 500/500 [==============================] - 0s 67us/step - loss: 0.5141 - accuracy: 0.8240 - val_loss: 0.5066 - val_accuracy: 0.8320 Epoch 46/200 500/500 [==============================] - 0s 68us/step - loss: 0.5095 - accuracy: 0.8160 - val_loss: 0.5031 - val_accuracy: 0.8220 Epoch 47/200 500/500 [==============================] - 0s 66us/step - loss: 0.5080 - accuracy: 0.8160 - val_loss: 0.5001 - val_accuracy: 0.8220 Epoch 48/200 500/500 [==============================] - 0s 65us/step - loss: 0.5012 - accuracy: 0.8360 - val_loss: 0.4968 - val_accuracy: 0.8280 Epoch 49/200 500/500 [==============================] - 0s 67us/step - loss: 0.4966 - accuracy: 0.8240 - val_loss: 0.4930 - val_accuracy: 0.8280 Epoch 50/200 500/500 [==============================] - 0s 73us/step - loss: 0.4929 - accuracy: 0.8240 - val_loss: 0.4900 - val_accuracy: 0.8280 Epoch 51/200 500/500 [==============================] - 0s 82us/step - loss: 0.4941 - accuracy: 0.8200 - val_loss: 0.4866 - val_accuracy: 0.8300 Epoch 52/200 500/500 [==============================] - 0s 76us/step - loss: 0.4864 - accuracy: 0.8180 - val_loss: 0.4850 - val_accuracy: 0.8020 Epoch 53/200 500/500 [==============================] - 0s 82us/step - loss: 0.4870 - accuracy: 0.8160 - val_loss: 0.4811 - val_accuracy: 0.8300 Epoch 54/200 500/500 [==============================] - 0s 69us/step - loss: 0.4823 - accuracy: 0.8320 - val_loss: 0.4784 - val_accuracy: 0.8280 Epoch 55/200 500/500 [==============================] - 0s 71us/step - loss: 0.4800 - accuracy: 0.8240 - val_loss: 0.4763 - val_accuracy: 0.8260 Epoch 56/200 500/500 [==============================] - 0s 68us/step - loss: 0.4785 - accuracy: 0.8200 - val_loss: 0.4732 - val_accuracy: 0.8360 Epoch 57/200 500/500 [==============================] - 0s 68us/step - loss: 0.4747 - accuracy: 0.8320 - val_loss: 0.4701 - val_accuracy: 0.8320 Epoch 58/200 500/500 [==============================] - 0s 76us/step - loss: 0.4728 - accuracy: 0.8140 - val_loss: 0.4675 - val_accuracy: 0.8300 Epoch 59/200 500/500 [==============================] - 0s 72us/step - loss: 0.4694 - accuracy: 0.8220 - val_loss: 0.4665 - val_accuracy: 0.8280 Epoch 60/200 500/500 [==============================] - 0s 69us/step - loss: 0.4684 - accuracy: 0.8120 - val_loss: 0.4634 - val_accuracy: 0.8260 Epoch 61/200 500/500 [==============================] - 0s 72us/step - loss: 0.4638 - accuracy: 0.8220 - val_loss: 0.4613 - val_accuracy: 0.8280 Epoch 62/200 500/500 [==============================] - 0s 71us/step - loss: 0.4681 - accuracy: 0.8100 - val_loss: 0.4589 - val_accuracy: 0.8240 Epoch 63/200 500/500 [==============================] - 0s 68us/step - loss: 0.4592 - accuracy: 0.8300 - val_loss: 0.4562 - val_accuracy: 0.8320 Epoch 64/200 500/500 [==============================] - 0s 69us/step - loss: 0.4560 - accuracy: 0.8400 - val_loss: 0.4534 - val_accuracy: 0.8340 Epoch 65/200 500/500 [==============================] - 0s 71us/step - loss: 0.4569 - accuracy: 0.8260 - val_loss: 0.4510 - val_accuracy: 0.8380 Epoch 66/200 500/500 [==============================] - 0s 67us/step - loss: 0.4549 - accuracy: 0.8320 - val_loss: 0.4488 - val_accuracy: 0.8360 Epoch 67/200 500/500 [==============================] - 0s 71us/step - loss: 0.4510 - accuracy: 0.8280 - val_loss: 0.4468 - val_accuracy: 0.8260 Epoch 68/200 500/500 [==============================] - 0s 79us/step - loss: 0.4477 - accuracy: 0.8300 - val_loss: 0.4451 - val_accuracy: 0.8280 Epoch 69/200 500/500 [==============================] - 0s 83us/step - loss: 0.4462 - accuracy: 0.8220 - val_loss: 0.4429 - val_accuracy: 0.8320 Epoch 70/200 500/500 [==============================] - 0s 81us/step - loss: 0.4434 - accuracy: 0.8300 - val_loss: 0.4408 - val_accuracy: 0.8320 Epoch 71/200 500/500 [==============================] - 0s 74us/step - loss: 0.4416 - accuracy: 0.8360 - val_loss: 0.4388 - val_accuracy: 0.8380 Epoch 72/200 500/500 [==============================] - 0s 71us/step - loss: 0.4400 - accuracy: 0.8320 - val_loss: 0.4372 - val_accuracy: 0.8360 Epoch 73/200 500/500 [==============================] - 0s 75us/step - loss: 0.4384 - accuracy: 0.8300 - val_loss: 0.4355 - val_accuracy: 0.8320 Epoch 74/200 500/500 [==============================] - 0s 75us/step - loss: 0.4374 - accuracy: 0.8240 - val_loss: 0.4339 - val_accuracy: 0.8320 Epoch 75/200 500/500 [==============================] - 0s 78us/step - loss: 0.4362 - accuracy: 0.8260 - val_loss: 0.4318 - val_accuracy: 0.8260 Epoch 76/200 500/500 [==============================] - 0s 69us/step - loss: 0.4397 - accuracy: 0.8140 - val_loss: 0.4308 - val_accuracy: 0.8260 Epoch 77/200 500/500 [==============================] - 0s 71us/step - loss: 0.4321 - accuracy: 0.8340 - val_loss: 0.4300 - val_accuracy: 0.8380 Epoch 78/200 500/500 [==============================] - 0s 71us/step - loss: 0.4300 - accuracy: 0.8340 - val_loss: 0.4268 - val_accuracy: 0.8360 Epoch 79/200 500/500 [==============================] - 0s 63us/step - loss: 0.4294 - accuracy: 0.8300 - val_loss: 0.4257 - val_accuracy: 0.8360 Epoch 80/200 500/500 [==============================] - 0s 69us/step - loss: 0.4266 - accuracy: 0.8300 - val_loss: 0.4235 - val_accuracy: 0.8260 Epoch 81/200 500/500 [==============================] - 0s 61us/step - loss: 0.4266 - accuracy: 0.8260 - val_loss: 0.4220 - val_accuracy: 0.8300 Epoch 82/200 500/500 [==============================] - 0s 66us/step - loss: 0.4236 - accuracy: 0.8300 - val_loss: 0.4209 - val_accuracy: 0.8380 Epoch 83/200 500/500 [==============================] - 0s 64us/step - loss: 0.4217 - accuracy: 0.8320 - val_loss: 0.4198 - val_accuracy: 0.8340 Epoch 84/200 500/500 [==============================] - 0s 64us/step - loss: 0.4208 - accuracy: 0.8300 - val_loss: 0.4187 - val_accuracy: 0.8220 Epoch 85/200 500/500 [==============================] - 0s 62us/step - loss: 0.4245 - accuracy: 0.8380 - val_loss: 0.4177 - val_accuracy: 0.8340 Epoch 86/200 500/500 [==============================] - 0s 63us/step - loss: 0.4206 - accuracy: 0.8340 - val_loss: 0.4153 - val_accuracy: 0.8320 Epoch 87/200 500/500 [==============================] - 0s 64us/step - loss: 0.4169 - accuracy: 0.8280 - val_loss: 0.4143 - val_accuracy: 0.8300 Epoch 88/200 500/500 [==============================] - 0s 74us/step - loss: 0.4163 - accuracy: 0.8320 - val_loss: 0.4130 - val_accuracy: 0.8340 Epoch 89/200 500/500 [==============================] - 0s 84us/step - loss: 0.4217 - accuracy: 0.8380 - val_loss: 0.4120 - val_accuracy: 0.8320 Epoch 90/200 500/500 [==============================] - 0s 79us/step - loss: 0.4135 - accuracy: 0.8340 - val_loss: 0.4117 - val_accuracy: 0.8300 Epoch 91/200 500/500 [==============================] - 0s 72us/step - loss: 0.4175 - accuracy: 0.8260 - val_loss: 0.4101 - val_accuracy: 0.8360 Epoch 92/200 500/500 [==============================] - 0s 79us/step - loss: 0.4149 - accuracy: 0.8320 - val_loss: 0.4090 - val_accuracy: 0.8300 Epoch 93/200 500/500 [==============================] - 0s 77us/step - loss: 0.4112 - accuracy: 0.8300 - val_loss: 0.4096 - val_accuracy: 0.8320 Epoch 94/200 500/500 [==============================] - 0s 74us/step - loss: 0.4108 - accuracy: 0.8260 - val_loss: 0.4070 - val_accuracy: 0.8320 Epoch 95/200 500/500 [==============================] - 0s 71us/step - loss: 0.4080 - accuracy: 0.8300 - val_loss: 0.4056 - val_accuracy: 0.8320 Epoch 96/200 500/500 [==============================] - 0s 73us/step - loss: 0.4077 - accuracy: 0.8260 - val_loss: 0.4048 - val_accuracy: 0.8320 Epoch 97/200 500/500 [==============================] - 0s 72us/step - loss: 0.4086 - accuracy: 0.8280 - val_loss: 0.4041 - val_accuracy: 0.8320 Epoch 98/200 500/500 [==============================] - 0s 69us/step - loss: 0.4051 - accuracy: 0.8300 - val_loss: 0.4036 - val_accuracy: 0.8320 Epoch 99/200 500/500 [==============================] - 0s 66us/step - loss: 0.4060 - accuracy: 0.8300 - val_loss: 0.4024 - val_accuracy: 0.8300 Epoch 100/200 500/500 [==============================] - 0s 82us/step - loss: 0.4061 - accuracy: 0.8300 - val_loss: 0.4020 - val_accuracy: 0.8380 Epoch 101/200 500/500 [==============================] - 0s 93us/step - loss: 0.4044 - accuracy: 0.8320 - val_loss: 0.4007 - val_accuracy: 0.8320 Epoch 102/200 500/500 [==============================] - 0s 103us/step - loss: 0.4018 - accuracy: 0.8280 - val_loss: 0.4003 - val_accuracy: 0.8420 Epoch 103/200 500/500 [==============================] - 0s 106us/step - loss: 0.4060 - accuracy: 0.8240 - val_loss: 0.4002 - val_accuracy: 0.8340 Epoch 104/200 500/500 [==============================] - 0s 77us/step - loss: 0.4003 - accuracy: 0.8320 - val_loss: 0.3988 - val_accuracy: 0.8380 Epoch 105/200 500/500 [==============================] - 0s 65us/step - loss: 0.3997 - accuracy: 0.8380 - val_loss: 0.3974 - val_accuracy: 0.8280 Epoch 106/200 500/500 [==============================] - 0s 68us/step - loss: 0.4023 - accuracy: 0.8280 - val_loss: 0.3968 - val_accuracy: 0.8300 Epoch 107/200 500/500 [==============================] - 0s 66us/step - loss: 0.4017 - accuracy: 0.8320 - val_loss: 0.3960 - val_accuracy: 0.8320 Epoch 108/200 500/500 [==============================] - 0s 64us/step - loss: 0.4014 - accuracy: 0.8320 - val_loss: 0.3957 - val_accuracy: 0.8360 Epoch 109/200 500/500 [==============================] - 0s 64us/step - loss: 0.3977 - accuracy: 0.8300 - val_loss: 0.3947 - val_accuracy: 0.8320 Epoch 110/200 500/500 [==============================] - 0s 64us/step - loss: 0.3964 - accuracy: 0.8340 - val_loss: 0.3941 - val_accuracy: 0.8380 Epoch 111/200 500/500 [==============================] - 0s 64us/step - loss: 0.3956 - accuracy: 0.8280 - val_loss: 0.3934 - val_accuracy: 0.8300 Epoch 112/200 500/500 [==============================] - 0s 72us/step - loss: 0.3949 - accuracy: 0.8240 - val_loss: 0.3927 - val_accuracy: 0.8280 Epoch 113/200 500/500 [==============================] - 0s 71us/step - loss: 0.3969 - accuracy: 0.8260 - val_loss: 0.3923 - val_accuracy: 0.8320 Epoch 114/200 500/500 [==============================] - 0s 69us/step - loss: 0.3987 - accuracy: 0.8240 - val_loss: 0.3923 - val_accuracy: 0.8340 Epoch 115/200 500/500 [==============================] - 0s 73us/step - loss: 0.3950 - accuracy: 0.8300 - val_loss: 0.3912 - val_accuracy: 0.8280 Epoch 116/200 500/500 [==============================] - 0s 71us/step - loss: 0.3982 - accuracy: 0.8240 - val_loss: 0.3904 - val_accuracy: 0.8320 Epoch 117/200 500/500 [==============================] - 0s 70us/step - loss: 0.3937 - accuracy: 0.8360 - val_loss: 0.3900 - val_accuracy: 0.8300 Epoch 118/200 500/500 [==============================] - 0s 64us/step - loss: 0.3914 - accuracy: 0.8320 - val_loss: 0.3900 - val_accuracy: 0.8340 Epoch 119/200 500/500 [==============================] - 0s 72us/step - loss: 0.3912 - accuracy: 0.8400 - val_loss: 0.3890 - val_accuracy: 0.8300 Epoch 120/200 500/500 [==============================] - 0s 71us/step - loss: 0.3935 - accuracy: 0.8200 - val_loss: 0.3887 - val_accuracy: 0.8340 Epoch 121/200 500/500 [==============================] - 0s 76us/step - loss: 0.3954 - accuracy: 0.8280 - val_loss: 0.3883 - val_accuracy: 0.8320 Epoch 122/200 500/500 [==============================] - 0s 68us/step - loss: 0.3900 - accuracy: 0.8360 - val_loss: 0.3887 - val_accuracy: 0.8380 Epoch 123/200 500/500 [==============================] - 0s 67us/step - loss: 0.3915 - accuracy: 0.8340 - val_loss: 0.3879 - val_accuracy: 0.8340 Epoch 124/200 500/500 [==============================] - 0s 68us/step - loss: 0.3929 - accuracy: 0.8300 - val_loss: 0.3892 - val_accuracy: 0.8300 Epoch 125/200 500/500 [==============================] - 0s 69us/step - loss: 0.3909 - accuracy: 0.8360 - val_loss: 0.3883 - val_accuracy: 0.8440 Epoch 126/200 500/500 [==============================] - 0s 72us/step - loss: 0.3892 - accuracy: 0.8360 - val_loss: 0.3865 - val_accuracy: 0.8300 Epoch 127/200 500/500 [==============================] - 0s 66us/step - loss: 0.3898 - accuracy: 0.8260 - val_loss: 0.3862 - val_accuracy: 0.8380 Epoch 128/200 500/500 [==============================] - 0s 67us/step - loss: 0.3907 - accuracy: 0.8340 - val_loss: 0.3857 - val_accuracy: 0.8400 Epoch 129/200 500/500 [==============================] - 0s 68us/step - loss: 0.3873 - accuracy: 0.8300 - val_loss: 0.3855 - val_accuracy: 0.8360 Epoch 130/200 500/500 [==============================] - 0s 67us/step - loss: 0.3895 - accuracy: 0.8260 - val_loss: 0.3862 - val_accuracy: 0.8340 Epoch 131/200 500/500 [==============================] - 0s 67us/step - loss: 0.3884 - accuracy: 0.8340 - val_loss: 0.3841 - val_accuracy: 0.8360 Epoch 132/200 500/500 [==============================] - 0s 71us/step - loss: 0.3883 - accuracy: 0.8320 - val_loss: 0.3840 - val_accuracy: 0.8340 Epoch 133/200 500/500 [==============================] - 0s 67us/step - loss: 0.3888 - accuracy: 0.8340 - val_loss: 0.3836 - val_accuracy: 0.8320 Epoch 134/200 500/500 [==============================] - 0s 66us/step - loss: 0.3881 - accuracy: 0.8380 - val_loss: 0.3838 - val_accuracy: 0.8380 Epoch 135/200 500/500 [==============================] - 0s 67us/step - loss: 0.3885 - accuracy: 0.8300 - val_loss: 0.3888 - val_accuracy: 0.8380 Epoch 136/200 500/500 [==============================] - 0s 61us/step - loss: 0.3844 - accuracy: 0.8380 - val_loss: 0.3836 - val_accuracy: 0.8320 Epoch 137/200 500/500 [==============================] - 0s 68us/step - loss: 0.3867 - accuracy: 0.8340 - val_loss: 0.3829 - val_accuracy: 0.8400 Epoch 138/200 500/500 [==============================] - 0s 85us/step - loss: 0.3871 - accuracy: 0.8320 - val_loss: 0.3823 - val_accuracy: 0.8400 Epoch 139/200 500/500 [==============================] - 0s 65us/step - loss: 0.3858 - accuracy: 0.8320 - val_loss: 0.3823 - val_accuracy: 0.8400 Epoch 140/200 500/500 [==============================] - 0s 62us/step - loss: 0.3860 - accuracy: 0.8380 - val_loss: 0.3822 - val_accuracy: 0.8320 Epoch 141/200 500/500 [==============================] - 0s 62us/step - loss: 0.3855 - accuracy: 0.8300 - val_loss: 0.3824 - val_accuracy: 0.8280 Epoch 142/200 500/500 [==============================] - 0s 62us/step - loss: 0.3835 - accuracy: 0.8280 - val_loss: 0.3817 - val_accuracy: 0.8340 Epoch 143/200 500/500 [==============================] - 0s 68us/step - loss: 0.3822 - accuracy: 0.8360 - val_loss: 0.3812 - val_accuracy: 0.8340 Epoch 144/200 500/500 [==============================] - 0s 64us/step - loss: 0.3861 - accuracy: 0.8380 - val_loss: 0.3807 - val_accuracy: 0.8460 Epoch 145/200 500/500 [==============================] - 0s 62us/step - loss: 0.3974 - accuracy: 0.8320 - val_loss: 0.3811 - val_accuracy: 0.8400 Epoch 146/200 500/500 [==============================] - 0s 62us/step - loss: 0.3887 - accuracy: 0.8300 - val_loss: 0.3808 - val_accuracy: 0.8400 Epoch 147/200 500/500 [==============================] - 0s 62us/step - loss: 0.3829 - accuracy: 0.8420 - val_loss: 0.3803 - val_accuracy: 0.8340 Epoch 148/200 500/500 [==============================] - 0s 62us/step - loss: 0.3816 - accuracy: 0.8280 - val_loss: 0.3808 - val_accuracy: 0.8320 Epoch 149/200 500/500 [==============================] - 0s 62us/step - loss: 0.3844 - accuracy: 0.8320 - val_loss: 0.3803 - val_accuracy: 0.8380 Epoch 150/200 500/500 [==============================] - 0s 65us/step - loss: 0.3866 - accuracy: 0.8380 - val_loss: 0.3799 - val_accuracy: 0.8320 Epoch 151/200 500/500 [==============================] - 0s 62us/step - loss: 0.3821 - accuracy: 0.8360 - val_loss: 0.3794 - val_accuracy: 0.8380 Epoch 152/200 500/500 [==============================] - 0s 60us/step - loss: 0.3828 - accuracy: 0.8400 - val_loss: 0.3795 - val_accuracy: 0.8340 Epoch 153/200 500/500 [==============================] - 0s 59us/step - loss: 0.3842 - accuracy: 0.8440 - val_loss: 0.3793 - val_accuracy: 0.8400 Epoch 154/200 500/500 [==============================] - 0s 78us/step - loss: 0.3862 - accuracy: 0.8460 - val_loss: 0.3791 - val_accuracy: 0.8360 Epoch 155/200 500/500 [==============================] - 0s 87us/step - loss: 0.3830 - accuracy: 0.8300 - val_loss: 0.3788 - val_accuracy: 0.8360 Epoch 156/200 500/500 [==============================] - 0s 64us/step - loss: 0.3810 - accuracy: 0.8380 - val_loss: 0.3778 - val_accuracy: 0.8340 Epoch 157/200 500/500 [==============================] - 0s 63us/step - loss: 0.3815 - accuracy: 0.8300 - val_loss: 0.3780 - val_accuracy: 0.8320 Epoch 158/200 500/500 [==============================] - 0s 65us/step - loss: 0.3800 - accuracy: 0.8280 - val_loss: 0.3786 - val_accuracy: 0.8300 Epoch 159/200 500/500 [==============================] - 0s 61us/step - loss: 0.3811 - accuracy: 0.8280 - val_loss: 0.3772 - val_accuracy: 0.8380 Epoch 160/200 500/500 [==============================] - 0s 62us/step - loss: 0.3797 - accuracy: 0.8360 - val_loss: 0.3771 - val_accuracy: 0.8360 Epoch 161/200 500/500 [==============================] - 0s 62us/step - loss: 0.3812 - accuracy: 0.8280 - val_loss: 0.3796 - val_accuracy: 0.8340 Epoch 162/200 500/500 [==============================] - 0s 62us/step - loss: 0.3807 - accuracy: 0.8400 - val_loss: 0.3779 - val_accuracy: 0.8380 Epoch 163/200 500/500 [==============================] - 0s 63us/step - loss: 0.3812 - accuracy: 0.8400 - val_loss: 0.3768 - val_accuracy: 0.8400 Epoch 164/200 500/500 [==============================] - 0s 62us/step - loss: 0.3796 - accuracy: 0.8280 - val_loss: 0.3771 - val_accuracy: 0.8260 Epoch 165/200 500/500 [==============================] - 0s 61us/step - loss: 0.3797 - accuracy: 0.8240 - val_loss: 0.3772 - val_accuracy: 0.8460 Epoch 166/200 500/500 [==============================] - 0s 64us/step - loss: 0.3806 - accuracy: 0.8380 - val_loss: 0.3775 - val_accuracy: 0.8400 Epoch 167/200 500/500 [==============================] - 0s 62us/step - loss: 0.3785 - accuracy: 0.8360 - val_loss: 0.3761 - val_accuracy: 0.8340 Epoch 168/200 500/500 [==============================] - 0s 63us/step - loss: 0.3779 - accuracy: 0.8340 - val_loss: 0.3757 - val_accuracy: 0.8360 Epoch 169/200 500/500 [==============================] - 0s 63us/step - loss: 0.3784 - accuracy: 0.8360 - val_loss: 0.3755 - val_accuracy: 0.8400 Epoch 170/200 500/500 [==============================] - 0s 62us/step - loss: 0.3788 - accuracy: 0.8400 - val_loss: 0.3761 - val_accuracy: 0.8440 Epoch 171/200 500/500 [==============================] - 0s 64us/step - loss: 0.3766 - accuracy: 0.8320 - val_loss: 0.3763 - val_accuracy: 0.8380 Epoch 172/200 500/500 [==============================] - 0s 68us/step - loss: 0.3786 - accuracy: 0.8420 - val_loss: 0.3755 - val_accuracy: 0.8400 Epoch 173/200 500/500 [==============================] - 0s 64us/step - loss: 0.3781 - accuracy: 0.8420 - val_loss: 0.3751 - val_accuracy: 0.8420 Epoch 174/200 500/500 [==============================] - 0s 70us/step - loss: 0.3794 - accuracy: 0.8240 - val_loss: 0.3750 - val_accuracy: 0.8360 Epoch 175/200 500/500 [==============================] - 0s 63us/step - loss: 0.3783 - accuracy: 0.8320 - val_loss: 0.3756 - val_accuracy: 0.8400 Epoch 176/200 500/500 [==============================] - 0s 66us/step - loss: 0.3784 - accuracy: 0.8340 - val_loss: 0.3747 - val_accuracy: 0.8360 Epoch 177/200 500/500 [==============================] - 0s 67us/step - loss: 0.3779 - accuracy: 0.8400 - val_loss: 0.3748 - val_accuracy: 0.8340 Epoch 178/200 500/500 [==============================] - 0s 64us/step - loss: 0.3815 - accuracy: 0.8260 - val_loss: 0.3768 - val_accuracy: 0.8340 Epoch 179/200 500/500 [==============================] - 0s 70us/step - loss: 0.3816 - accuracy: 0.8340 - val_loss: 0.3741 - val_accuracy: 0.8420 Epoch 180/200 500/500 [==============================] - 0s 65us/step - loss: 0.3858 - accuracy: 0.8200 - val_loss: 0.3751 - val_accuracy: 0.8300 Epoch 181/200 500/500 [==============================] - 0s 67us/step - loss: 0.3825 - accuracy: 0.8320 - val_loss: 0.3754 - val_accuracy: 0.8420 Epoch 182/200 500/500 [==============================] - 0s 66us/step - loss: 0.3824 - accuracy: 0.8220 - val_loss: 0.3747 - val_accuracy: 0.8320 Epoch 183/200 500/500 [==============================] - 0s 73us/step - loss: 0.3797 - accuracy: 0.8320 - val_loss: 0.3741 - val_accuracy: 0.8460 Epoch 184/200 500/500 [==============================] - 0s 67us/step - loss: 0.3800 - accuracy: 0.8380 - val_loss: 0.3745 - val_accuracy: 0.8340 Epoch 185/200 500/500 [==============================] - 0s 68us/step - loss: 0.3782 - accuracy: 0.8360 - val_loss: 0.3735 - val_accuracy: 0.8400 Epoch 186/200 500/500 [==============================] - 0s 65us/step - loss: 0.3793 - accuracy: 0.8360 - val_loss: 0.3736 - val_accuracy: 0.8380 Epoch 187/200 500/500 [==============================] - 0s 68us/step - loss: 0.3757 - accuracy: 0.8280 - val_loss: 0.3732 - val_accuracy: 0.8420 Epoch 188/200 500/500 [==============================] - 0s 67us/step - loss: 0.3765 - accuracy: 0.8320 - val_loss: 0.3733 - val_accuracy: 0.8320 Epoch 189/200 500/500 [==============================] - 0s 66us/step - loss: 0.3803 - accuracy: 0.8280 - val_loss: 0.3741 - val_accuracy: 0.8400 Epoch 190/200 500/500 [==============================] - 0s 76us/step - loss: 0.3787 - accuracy: 0.8380 - val_loss: 0.3729 - val_accuracy: 0.8380 Epoch 191/200 500/500 [==============================] - 0s 64us/step - loss: 0.3743 - accuracy: 0.8380 - val_loss: 0.3732 - val_accuracy: 0.8340 Epoch 192/200 500/500 [==============================] - 0s 62us/step - loss: 0.3758 - accuracy: 0.8360 - val_loss: 0.3732 - val_accuracy: 0.8360 Epoch 193/200 500/500 [==============================] - 0s 63us/step - loss: 0.3763 - accuracy: 0.8380 - val_loss: 0.3730 - val_accuracy: 0.8320 Epoch 194/200 500/500 [==============================] - 0s 62us/step - loss: 0.3812 - accuracy: 0.8320 - val_loss: 0.3733 - val_accuracy: 0.8380 Epoch 195/200 500/500 [==============================] - 0s 63us/step - loss: 0.3802 - accuracy: 0.8260 - val_loss: 0.3755 - val_accuracy: 0.8300 Epoch 196/200 500/500 [==============================] - 0s 67us/step - loss: 0.3785 - accuracy: 0.8360 - val_loss: 0.3726 - val_accuracy: 0.8400 Epoch 197/200 500/500 [==============================] - 0s 63us/step - loss: 0.3787 - accuracy: 0.8320 - val_loss: 0.3728 - val_accuracy: 0.8400 Epoch 198/200 500/500 [==============================] - 0s 69us/step - loss: 0.3757 - accuracy: 0.8400 - val_loss: 0.3724 - val_accuracy: 0.8420 Epoch 199/200 500/500 [==============================] - 0s 63us/step - loss: 0.3754 - accuracy: 0.8340 - val_loss: 0.3719 - val_accuracy: 0.8420 Epoch 200/200 500/500 [==============================] - 0s 65us/step - loss: 0.3748 - accuracy: 0.8260 - val_loss: 0.3720 - val_accuracy: 0.8380 . #_,train_acc=model.evaluate(trainX,trainy, verbose=1) . 500/500 [==============================] - 0s 44us/step . #_,test_acc=model.evaluate(testX, testy,verbose=1) . 500/500 [==============================] - 0s 25us/step . #print(&#39;Train: {:.4f} Test:{:.4f}&#39;.format(train_acc, test_acc)) . Train: 0.8360 Test:0.8360 . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;val_accuracy&#39;, &#39;loss&#39;, &#39;accuracy&#39;]) . fig=plt.figure(figsize=(8,4)) plt.subplot(121) plt.title(&quot;LOSS&quot;) plt.plot(h.history[&#39;loss&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test&#39;) plt.legend() plt.subplot(122) plt.title(&quot;ACCURACY&quot;) plt.plot(h.history[&#39;accuracy&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_accuracy&#39;], label=&#39;test&#39;) plt.legend() plt.show() . Hinge Loss . y[where(y==0)]= -1 . X,y = make_circles(n_samples=1000, noise=0.1, random_state=1) y[where(y==0)]= -1 . n_train=500 trainX,testX= X[:n_train,:],X[n_train:,:] trainy,testy=y[:n_train],y[n_train:] . model=Sequential() model.add(Dense(50,input_dim=2,activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(1, activation=&#39;tanh&#39;)) opt=SGD(lr=0.01, momentum=0.9) model.compile(loss=&#39;hinge&#39;, optimizer=opt,metrics=[&#39;accuracy&#39;]) . model.summary() . Model: &#34;sequential_14&#34; _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= dense_24 (Dense) (None, 50) 150 _________________________________________________________________ dense_25 (Dense) (None, 1) 51 ================================================================= Total params: 201 Trainable params: 201 Non-trainable params: 0 _________________________________________________________________ . h=model.fit(trainX,trainy,validation_data=(testX,testy), epochs=200, verbose=1) . Train on 500 samples, validate on 500 samples Epoch 1/200 500/500 [==============================] - 0s 751us/step - loss: 1.0000 - accuracy: 0.2580 - val_loss: 0.9999 - val_accuracy: 0.2260 Epoch 2/200 500/500 [==============================] - 0s 122us/step - loss: 0.9721 - accuracy: 0.2580 - val_loss: 0.9849 - val_accuracy: 0.3440 Epoch 3/200 500/500 [==============================] - 0s 138us/step - loss: 0.9314 - accuracy: 0.3600 - val_loss: 0.9791 - val_accuracy: 0.3160 Epoch 4/200 500/500 [==============================] - 0s 148us/step - loss: 0.9369 - accuracy: 0.3180 - val_loss: 0.9726 - val_accuracy: 0.2940 Epoch 5/200 500/500 [==============================] - 0s 179us/step - loss: 0.9093 - accuracy: 0.3500 - val_loss: 0.9614 - val_accuracy: 0.3220 Epoch 6/200 500/500 [==============================] - 0s 175us/step - loss: 0.8992 - accuracy: 0.3720 - val_loss: 0.9478 - val_accuracy: 0.3460 Epoch 7/200 500/500 [==============================] - 0s 160us/step - loss: 0.8860 - accuracy: 0.3360 - val_loss: 0.9271 - val_accuracy: 0.2480 Epoch 8/200 500/500 [==============================] - 0s 142us/step - loss: 0.8753 - accuracy: 0.3380 - val_loss: 0.9157 - val_accuracy: 0.3080 Epoch 9/200 500/500 [==============================] - 0s 141us/step - loss: 0.8596 - accuracy: 0.3300 - val_loss: 0.8967 - val_accuracy: 0.2540 Epoch 10/200 500/500 [==============================] - 0s 133us/step - loss: 0.8481 - accuracy: 0.2820 - val_loss: 0.8760 - val_accuracy: 0.1940 Epoch 11/200 500/500 [==============================] - 0s 135us/step - loss: 0.8316 - accuracy: 0.3220 - val_loss: 0.8546 - val_accuracy: 0.2640 Epoch 12/200 500/500 [==============================] - 0s 130us/step - loss: 0.8156 - accuracy: 0.2760 - val_loss: 0.8346 - val_accuracy: 0.2260 Epoch 13/200 500/500 [==============================] - 0s 133us/step - loss: 0.8068 - accuracy: 0.2120 - val_loss: 0.8168 - val_accuracy: 0.2420 Epoch 14/200 500/500 [==============================] - 0s 127us/step - loss: 0.7841 - accuracy: 0.3060 - val_loss: 0.7983 - val_accuracy: 0.2580 Epoch 15/200 500/500 [==============================] - 0s 148us/step - loss: 0.7774 - accuracy: 0.2640 - val_loss: 0.7788 - val_accuracy: 0.3020 Epoch 16/200 500/500 [==============================] - 0s 125us/step - loss: 0.7675 - accuracy: 0.2560 - val_loss: 0.7625 - val_accuracy: 0.3200 Epoch 17/200 500/500 [==============================] - 0s 178us/step - loss: 0.7437 - accuracy: 0.3120 - val_loss: 0.7497 - val_accuracy: 0.2860 Epoch 18/200 500/500 [==============================] - 0s 143us/step - loss: 0.7297 - accuracy: 0.3200 - val_loss: 0.7287 - val_accuracy: 0.2900 Epoch 19/200 500/500 [==============================] - 0s 127us/step - loss: 0.7111 - accuracy: 0.3560 - val_loss: 0.7175 - val_accuracy: 0.3400 Epoch 20/200 500/500 [==============================] - 0s 116us/step - loss: 0.7057 - accuracy: 0.3920 - val_loss: 0.6968 - val_accuracy: 0.3260 Epoch 21/200 500/500 [==============================] - 0s 115us/step - loss: 0.6827 - accuracy: 0.3820 - val_loss: 0.6845 - val_accuracy: 0.3840 Epoch 22/200 500/500 [==============================] - 0s 137us/step - loss: 0.6644 - accuracy: 0.4000 - val_loss: 0.6650 - val_accuracy: 0.4300 Epoch 23/200 500/500 [==============================] - 0s 149us/step - loss: 0.6535 - accuracy: 0.4460 - val_loss: 0.6622 - val_accuracy: 0.4220 Epoch 24/200 500/500 [==============================] - 0s 140us/step - loss: 0.6408 - accuracy: 0.4460 - val_loss: 0.6392 - val_accuracy: 0.4660 Epoch 25/200 500/500 [==============================] - 0s 123us/step - loss: 0.6291 - accuracy: 0.4620 - val_loss: 0.6282 - val_accuracy: 0.4900 Epoch 26/200 500/500 [==============================] - 0s 134us/step - loss: 0.6154 - accuracy: 0.4860 - val_loss: 0.6237 - val_accuracy: 0.4860 Epoch 27/200 500/500 [==============================] - 0s 131us/step - loss: 0.6015 - accuracy: 0.5200 - val_loss: 0.6092 - val_accuracy: 0.5020 Epoch 28/200 500/500 [==============================] - 0s 146us/step - loss: 0.6062 - accuracy: 0.4940 - val_loss: 0.5966 - val_accuracy: 0.5120 Epoch 29/200 500/500 [==============================] - 0s 121us/step - loss: 0.5829 - accuracy: 0.5400 - val_loss: 0.5837 - val_accuracy: 0.5320 Epoch 30/200 500/500 [==============================] - 0s 84us/step - loss: 0.5713 - accuracy: 0.5500 - val_loss: 0.5826 - val_accuracy: 0.5400 Epoch 31/200 500/500 [==============================] - 0s 85us/step - loss: 0.5646 - accuracy: 0.5560 - val_loss: 0.5667 - val_accuracy: 0.5560 Epoch 32/200 500/500 [==============================] - 0s 114us/step - loss: 0.5630 - accuracy: 0.5740 - val_loss: 0.5705 - val_accuracy: 0.5600 Epoch 33/200 500/500 [==============================] - 0s 112us/step - loss: 0.5451 - accuracy: 0.5820 - val_loss: 0.5509 - val_accuracy: 0.5740 Epoch 34/200 500/500 [==============================] - 0s 153us/step - loss: 0.5571 - accuracy: 0.5840 - val_loss: 0.5456 - val_accuracy: 0.5860 Epoch 35/200 500/500 [==============================] - 0s 277us/step - loss: 0.5441 - accuracy: 0.5960 - val_loss: 0.5436 - val_accuracy: 0.5880 Epoch 36/200 500/500 [==============================] - 0s 161us/step - loss: 0.5280 - accuracy: 0.6160 - val_loss: 0.5309 - val_accuracy: 0.5980 Epoch 37/200 500/500 [==============================] - 0s 129us/step - loss: 0.5204 - accuracy: 0.6160 - val_loss: 0.5263 - val_accuracy: 0.6100 Epoch 38/200 500/500 [==============================] - 0s 151us/step - loss: 0.5149 - accuracy: 0.6240 - val_loss: 0.5165 - val_accuracy: 0.6100 Epoch 39/200 500/500 [==============================] - 0s 110us/step - loss: 0.5097 - accuracy: 0.6280 - val_loss: 0.5136 - val_accuracy: 0.6140 Epoch 40/200 500/500 [==============================] - 0s 112us/step - loss: 0.5057 - accuracy: 0.6200 - val_loss: 0.5063 - val_accuracy: 0.6320 Epoch 41/200 500/500 [==============================] - 0s 104us/step - loss: 0.4969 - accuracy: 0.6420 - val_loss: 0.5090 - val_accuracy: 0.6180 Epoch 42/200 500/500 [==============================] - 0s 118us/step - loss: 0.4938 - accuracy: 0.6220 - val_loss: 0.4988 - val_accuracy: 0.6280 Epoch 43/200 500/500 [==============================] - 0s 123us/step - loss: 0.4860 - accuracy: 0.6360 - val_loss: 0.4948 - val_accuracy: 0.6320 Epoch 44/200 500/500 [==============================] - 0s 110us/step - loss: 0.4801 - accuracy: 0.6540 - val_loss: 0.4887 - val_accuracy: 0.6360 Epoch 45/200 500/500 [==============================] - 0s 96us/step - loss: 0.4786 - accuracy: 0.6520 - val_loss: 0.4864 - val_accuracy: 0.6380 Epoch 46/200 500/500 [==============================] - 0s 125us/step - loss: 0.4740 - accuracy: 0.6700 - val_loss: 0.4887 - val_accuracy: 0.6300 Epoch 47/200 500/500 [==============================] - 0s 127us/step - loss: 0.4714 - accuracy: 0.6780 - val_loss: 0.4776 - val_accuracy: 0.6480 Epoch 48/200 500/500 [==============================] - 0s 134us/step - loss: 0.4663 - accuracy: 0.6780 - val_loss: 0.4756 - val_accuracy: 0.6520 Epoch 49/200 500/500 [==============================] - 0s 115us/step - loss: 0.4623 - accuracy: 0.6780 - val_loss: 0.4709 - val_accuracy: 0.6620 Epoch 50/200 500/500 [==============================] - 0s 113us/step - loss: 0.4620 - accuracy: 0.6800 - val_loss: 0.4757 - val_accuracy: 0.6580 Epoch 51/200 500/500 [==============================] - 0s 128us/step - loss: 0.4562 - accuracy: 0.6680 - val_loss: 0.4649 - val_accuracy: 0.6700 Epoch 52/200 500/500 [==============================] - 0s 129us/step - loss: 0.4528 - accuracy: 0.6880 - val_loss: 0.4637 - val_accuracy: 0.6620 Epoch 53/200 500/500 [==============================] - 0s 134us/step - loss: 0.4525 - accuracy: 0.6880 - val_loss: 0.4670 - val_accuracy: 0.6460 Epoch 54/200 500/500 [==============================] - 0s 155us/step - loss: 0.4492 - accuracy: 0.6900 - val_loss: 0.4554 - val_accuracy: 0.6780 Epoch 55/200 500/500 [==============================] - 0s 162us/step - loss: 0.4468 - accuracy: 0.6960 - val_loss: 0.4631 - val_accuracy: 0.6640 Epoch 56/200 500/500 [==============================] - 0s 126us/step - loss: 0.4415 - accuracy: 0.6960 - val_loss: 0.4511 - val_accuracy: 0.6860 Epoch 57/200 500/500 [==============================] - 0s 137us/step - loss: 0.4417 - accuracy: 0.6980 - val_loss: 0.4600 - val_accuracy: 0.6580 Epoch 58/200 500/500 [==============================] - 0s 112us/step - loss: 0.4435 - accuracy: 0.6960 - val_loss: 0.4493 - val_accuracy: 0.6840 Epoch 59/200 500/500 [==============================] - 0s 120us/step - loss: 0.4336 - accuracy: 0.7160 - val_loss: 0.4496 - val_accuracy: 0.6660 Epoch 60/200 500/500 [==============================] - 0s 109us/step - loss: 0.4311 - accuracy: 0.7100 - val_loss: 0.4479 - val_accuracy: 0.6740 Epoch 61/200 500/500 [==============================] - 0s 131us/step - loss: 0.4309 - accuracy: 0.7100 - val_loss: 0.4426 - val_accuracy: 0.6840 Epoch 62/200 500/500 [==============================] - 0s 153us/step - loss: 0.4304 - accuracy: 0.7060 - val_loss: 0.4429 - val_accuracy: 0.6840 Epoch 63/200 500/500 [==============================] - 0s 136us/step - loss: 0.4242 - accuracy: 0.7120 - val_loss: 0.4376 - val_accuracy: 0.6780 Epoch 64/200 500/500 [==============================] - 0s 123us/step - loss: 0.4255 - accuracy: 0.7120 - val_loss: 0.4379 - val_accuracy: 0.6900 Epoch 65/200 500/500 [==============================] - 0s 117us/step - loss: 0.4216 - accuracy: 0.7220 - val_loss: 0.4399 - val_accuracy: 0.6860 Epoch 66/200 500/500 [==============================] - 0s 98us/step - loss: 0.4184 - accuracy: 0.7320 - val_loss: 0.4334 - val_accuracy: 0.7000 Epoch 67/200 500/500 [==============================] - 0s 100us/step - loss: 0.4189 - accuracy: 0.7340 - val_loss: 0.4310 - val_accuracy: 0.6880 Epoch 68/200 500/500 [==============================] - 0s 118us/step - loss: 0.4153 - accuracy: 0.7260 - val_loss: 0.4296 - val_accuracy: 0.6860 Epoch 69/200 500/500 [==============================] - 0s 124us/step - loss: 0.4223 - accuracy: 0.7180 - val_loss: 0.4324 - val_accuracy: 0.6900 Epoch 70/200 500/500 [==============================] - 0s 111us/step - loss: 0.4233 - accuracy: 0.7280 - val_loss: 0.4240 - val_accuracy: 0.7020 Epoch 71/200 500/500 [==============================] - 0s 96us/step - loss: 0.4240 - accuracy: 0.7100 - val_loss: 0.4318 - val_accuracy: 0.6880 Epoch 72/200 500/500 [==============================] - 0s 112us/step - loss: 0.4314 - accuracy: 0.7140 - val_loss: 0.4217 - val_accuracy: 0.7020 Epoch 73/200 500/500 [==============================] - 0s 123us/step - loss: 0.4149 - accuracy: 0.7180 - val_loss: 0.4317 - val_accuracy: 0.6920 Epoch 74/200 500/500 [==============================] - 0s 115us/step - loss: 0.4177 - accuracy: 0.7200 - val_loss: 0.4190 - val_accuracy: 0.7180 Epoch 75/200 500/500 [==============================] - 0s 108us/step - loss: 0.4275 - accuracy: 0.7060 - val_loss: 0.4370 - val_accuracy: 0.7100 Epoch 76/200 500/500 [==============================] - 0s 116us/step - loss: 0.4069 - accuracy: 0.7460 - val_loss: 0.4192 - val_accuracy: 0.7100 Epoch 77/200 500/500 [==============================] - 0s 128us/step - loss: 0.4042 - accuracy: 0.7400 - val_loss: 0.4254 - val_accuracy: 0.7020 Epoch 78/200 500/500 [==============================] - 0s 117us/step - loss: 0.4042 - accuracy: 0.7360 - val_loss: 0.4227 - val_accuracy: 0.6940 Epoch 79/200 500/500 [==============================] - 0s 136us/step - loss: 0.4041 - accuracy: 0.7340 - val_loss: 0.4233 - val_accuracy: 0.7000 Epoch 80/200 500/500 [==============================] - 0s 129us/step - loss: 0.4060 - accuracy: 0.7380 - val_loss: 0.4211 - val_accuracy: 0.7060 Epoch 81/200 500/500 [==============================] - 0s 117us/step - loss: 0.4097 - accuracy: 0.7360 - val_loss: 0.4227 - val_accuracy: 0.7040 Epoch 82/200 500/500 [==============================] - 0s 122us/step - loss: 0.4104 - accuracy: 0.7400 - val_loss: 0.4156 - val_accuracy: 0.7120 Epoch 83/200 500/500 [==============================] - 0s 139us/step - loss: 0.3994 - accuracy: 0.7480 - val_loss: 0.4079 - val_accuracy: 0.7100 Epoch 84/200 500/500 [==============================] - 0s 132us/step - loss: 0.3985 - accuracy: 0.7420 - val_loss: 0.4090 - val_accuracy: 0.7100 Epoch 85/200 500/500 [==============================] - 0s 132us/step - loss: 0.3983 - accuracy: 0.7420 - val_loss: 0.4077 - val_accuracy: 0.7160 Epoch 86/200 500/500 [==============================] - 0s 136us/step - loss: 0.3911 - accuracy: 0.7460 - val_loss: 0.4049 - val_accuracy: 0.7140 Epoch 87/200 500/500 [==============================] - 0s 138us/step - loss: 0.3903 - accuracy: 0.7480 - val_loss: 0.4158 - val_accuracy: 0.7140 Epoch 88/200 500/500 [==============================] - 0s 143us/step - loss: 0.3949 - accuracy: 0.7520 - val_loss: 0.4084 - val_accuracy: 0.7040 Epoch 89/200 500/500 [==============================] - 0s 143us/step - loss: 0.3983 - accuracy: 0.7460 - val_loss: 0.4072 - val_accuracy: 0.7100 Epoch 90/200 500/500 [==============================] - 0s 135us/step - loss: 0.3985 - accuracy: 0.7500 - val_loss: 0.4086 - val_accuracy: 0.7080 Epoch 91/200 500/500 [==============================] - 0s 146us/step - loss: 0.3907 - accuracy: 0.7540 - val_loss: 0.4086 - val_accuracy: 0.7220 Epoch 92/200 500/500 [==============================] - 0s 127us/step - loss: 0.3941 - accuracy: 0.7420 - val_loss: 0.4051 - val_accuracy: 0.7120 Epoch 93/200 500/500 [==============================] - 0s 122us/step - loss: 0.3886 - accuracy: 0.7540 - val_loss: 0.4010 - val_accuracy: 0.7180 Epoch 94/200 500/500 [==============================] - 0s 128us/step - loss: 0.3866 - accuracy: 0.7500 - val_loss: 0.4044 - val_accuracy: 0.7140 Epoch 95/200 500/500 [==============================] - 0s 123us/step - loss: 0.3908 - accuracy: 0.7580 - val_loss: 0.4131 - val_accuracy: 0.7220 Epoch 96/200 500/500 [==============================] - 0s 131us/step - loss: 0.3897 - accuracy: 0.7520 - val_loss: 0.4015 - val_accuracy: 0.7200 Epoch 97/200 500/500 [==============================] - 0s 150us/step - loss: 0.3863 - accuracy: 0.7520 - val_loss: 0.3976 - val_accuracy: 0.7220 Epoch 98/200 500/500 [==============================] - 0s 129us/step - loss: 0.3829 - accuracy: 0.7500 - val_loss: 0.4017 - val_accuracy: 0.7200 Epoch 99/200 500/500 [==============================] - 0s 116us/step - loss: 0.3842 - accuracy: 0.7560 - val_loss: 0.3968 - val_accuracy: 0.7280 Epoch 100/200 500/500 [==============================] - 0s 120us/step - loss: 0.3909 - accuracy: 0.7500 - val_loss: 0.3972 - val_accuracy: 0.7160 Epoch 101/200 500/500 [==============================] - 0s 114us/step - loss: 0.3918 - accuracy: 0.7640 - val_loss: 0.3979 - val_accuracy: 0.7240 Epoch 102/200 500/500 [==============================] - 0s 113us/step - loss: 0.3833 - accuracy: 0.7540 - val_loss: 0.3957 - val_accuracy: 0.7220 Epoch 103/200 500/500 [==============================] - 0s 125us/step - loss: 0.3853 - accuracy: 0.7660 - val_loss: 0.3949 - val_accuracy: 0.7260 Epoch 104/200 500/500 [==============================] - 0s 124us/step - loss: 0.3820 - accuracy: 0.7600 - val_loss: 0.4015 - val_accuracy: 0.7420 Epoch 105/200 500/500 [==============================] - 0s 130us/step - loss: 0.3855 - accuracy: 0.7600 - val_loss: 0.4009 - val_accuracy: 0.7240 Epoch 106/200 500/500 [==============================] - 0s 131us/step - loss: 0.3826 - accuracy: 0.7580 - val_loss: 0.3951 - val_accuracy: 0.7300 Epoch 107/200 500/500 [==============================] - 0s 124us/step - loss: 0.3830 - accuracy: 0.7660 - val_loss: 0.4038 - val_accuracy: 0.7160 Epoch 108/200 500/500 [==============================] - 0s 128us/step - loss: 0.3749 - accuracy: 0.7540 - val_loss: 0.3914 - val_accuracy: 0.7240 Epoch 109/200 500/500 [==============================] - 0s 124us/step - loss: 0.3760 - accuracy: 0.7660 - val_loss: 0.3926 - val_accuracy: 0.7300 Epoch 110/200 500/500 [==============================] - 0s 124us/step - loss: 0.3779 - accuracy: 0.7760 - val_loss: 0.3989 - val_accuracy: 0.7300 Epoch 111/200 500/500 [==============================] - 0s 129us/step - loss: 0.3799 - accuracy: 0.7600 - val_loss: 0.3933 - val_accuracy: 0.7340 Epoch 112/200 500/500 [==============================] - 0s 117us/step - loss: 0.3744 - accuracy: 0.7640 - val_loss: 0.3902 - val_accuracy: 0.7300 Epoch 113/200 500/500 [==============================] - 0s 127us/step - loss: 0.3743 - accuracy: 0.7680 - val_loss: 0.3905 - val_accuracy: 0.7280 Epoch 114/200 500/500 [==============================] - 0s 112us/step - loss: 0.3737 - accuracy: 0.7620 - val_loss: 0.3932 - val_accuracy: 0.7240 Epoch 115/200 500/500 [==============================] - 0s 122us/step - loss: 0.3746 - accuracy: 0.7580 - val_loss: 0.3942 - val_accuracy: 0.7300 Epoch 116/200 500/500 [==============================] - 0s 121us/step - loss: 0.3722 - accuracy: 0.7680 - val_loss: 0.3914 - val_accuracy: 0.7280 Epoch 117/200 500/500 [==============================] - 0s 109us/step - loss: 0.3700 - accuracy: 0.7700 - val_loss: 0.3921 - val_accuracy: 0.7340 Epoch 118/200 500/500 [==============================] - 0s 100us/step - loss: 0.3772 - accuracy: 0.7780 - val_loss: 0.3889 - val_accuracy: 0.7400 Epoch 119/200 500/500 [==============================] - 0s 101us/step - loss: 0.3782 - accuracy: 0.7740 - val_loss: 0.3975 - val_accuracy: 0.7360 Epoch 120/200 500/500 [==============================] - 0s 111us/step - loss: 0.3681 - accuracy: 0.7680 - val_loss: 0.3865 - val_accuracy: 0.7320 Epoch 121/200 500/500 [==============================] - 0s 100us/step - loss: 0.3694 - accuracy: 0.7720 - val_loss: 0.3852 - val_accuracy: 0.7300 Epoch 122/200 500/500 [==============================] - 0s 98us/step - loss: 0.3738 - accuracy: 0.7740 - val_loss: 0.3884 - val_accuracy: 0.7340 Epoch 123/200 500/500 [==============================] - 0s 95us/step - loss: 0.3758 - accuracy: 0.7680 - val_loss: 0.3871 - val_accuracy: 0.7320 Epoch 124/200 500/500 [==============================] - 0s 104us/step - loss: 0.3660 - accuracy: 0.7720 - val_loss: 0.3883 - val_accuracy: 0.7320 Epoch 125/200 500/500 [==============================] - 0s 108us/step - loss: 0.3678 - accuracy: 0.7780 - val_loss: 0.3835 - val_accuracy: 0.7340 Epoch 126/200 500/500 [==============================] - 0s 110us/step - loss: 0.3691 - accuracy: 0.7680 - val_loss: 0.3923 - val_accuracy: 0.7280 Epoch 127/200 500/500 [==============================] - 0s 105us/step - loss: 0.3712 - accuracy: 0.7720 - val_loss: 0.3834 - val_accuracy: 0.7380 Epoch 128/200 500/500 [==============================] - 0s 104us/step - loss: 0.3624 - accuracy: 0.7700 - val_loss: 0.3920 - val_accuracy: 0.7440 Epoch 129/200 500/500 [==============================] - 0s 100us/step - loss: 0.3687 - accuracy: 0.7720 - val_loss: 0.3881 - val_accuracy: 0.7340 Epoch 130/200 500/500 [==============================] - 0s 101us/step - loss: 0.3672 - accuracy: 0.7780 - val_loss: 0.3862 - val_accuracy: 0.7320 Epoch 131/200 500/500 [==============================] - 0s 100us/step - loss: 0.3650 - accuracy: 0.7780 - val_loss: 0.3798 - val_accuracy: 0.7340 Epoch 132/200 500/500 [==============================] - 0s 99us/step - loss: 0.3653 - accuracy: 0.7780 - val_loss: 0.3870 - val_accuracy: 0.7380 Epoch 133/200 500/500 [==============================] - 0s 89us/step - loss: 0.3647 - accuracy: 0.7700 - val_loss: 0.3820 - val_accuracy: 0.7380 Epoch 134/200 500/500 [==============================] - 0s 113us/step - loss: 0.3628 - accuracy: 0.7760 - val_loss: 0.3824 - val_accuracy: 0.7420 Epoch 135/200 500/500 [==============================] - 0s 96us/step - loss: 0.3663 - accuracy: 0.7780 - val_loss: 0.3987 - val_accuracy: 0.7380 Epoch 136/200 500/500 [==============================] - 0s 104us/step - loss: 0.3658 - accuracy: 0.7760 - val_loss: 0.3778 - val_accuracy: 0.7420 Epoch 137/200 500/500 [==============================] - 0s 96us/step - loss: 0.3652 - accuracy: 0.7760 - val_loss: 0.3774 - val_accuracy: 0.7360 Epoch 138/200 500/500 [==============================] - 0s 95us/step - loss: 0.3656 - accuracy: 0.7820 - val_loss: 0.3761 - val_accuracy: 0.7380 Epoch 139/200 500/500 [==============================] - 0s 88us/step - loss: 0.3591 - accuracy: 0.7740 - val_loss: 0.3857 - val_accuracy: 0.7360 Epoch 140/200 500/500 [==============================] - 0s 101us/step - loss: 0.3694 - accuracy: 0.7700 - val_loss: 0.3761 - val_accuracy: 0.7420 Epoch 141/200 500/500 [==============================] - 0s 96us/step - loss: 0.3655 - accuracy: 0.7760 - val_loss: 0.3869 - val_accuracy: 0.7440 Epoch 142/200 500/500 [==============================] - 0s 108us/step - loss: 0.3721 - accuracy: 0.7740 - val_loss: 0.3849 - val_accuracy: 0.7400 Epoch 143/200 500/500 [==============================] - 0s 95us/step - loss: 0.3563 - accuracy: 0.7820 - val_loss: 0.3839 - val_accuracy: 0.7440 Epoch 144/200 500/500 [==============================] - 0s 104us/step - loss: 0.3635 - accuracy: 0.7720 - val_loss: 0.3766 - val_accuracy: 0.7440 Epoch 145/200 500/500 [==============================] - 0s 101us/step - loss: 0.3604 - accuracy: 0.7780 - val_loss: 0.3924 - val_accuracy: 0.7380 Epoch 146/200 500/500 [==============================] - 0s 104us/step - loss: 0.3747 - accuracy: 0.7820 - val_loss: 0.3737 - val_accuracy: 0.7640 Epoch 147/200 500/500 [==============================] - 0s 100us/step - loss: 0.3702 - accuracy: 0.7720 - val_loss: 0.3783 - val_accuracy: 0.7380 Epoch 148/200 500/500 [==============================] - 0s 99us/step - loss: 0.3589 - accuracy: 0.7780 - val_loss: 0.3801 - val_accuracy: 0.7380 Epoch 149/200 500/500 [==============================] - 0s 99us/step - loss: 0.3645 - accuracy: 0.7660 - val_loss: 0.3783 - val_accuracy: 0.7440 Epoch 150/200 500/500 [==============================] - 0s 100us/step - loss: 0.3626 - accuracy: 0.7800 - val_loss: 0.3750 - val_accuracy: 0.7540 Epoch 151/200 500/500 [==============================] - 0s 102us/step - loss: 0.3580 - accuracy: 0.7760 - val_loss: 0.3828 - val_accuracy: 0.7440 Epoch 152/200 500/500 [==============================] - 0s 100us/step - loss: 0.3575 - accuracy: 0.7780 - val_loss: 0.3728 - val_accuracy: 0.7400 Epoch 153/200 500/500 [==============================] - 0s 101us/step - loss: 0.3585 - accuracy: 0.7760 - val_loss: 0.3766 - val_accuracy: 0.7440 Epoch 154/200 500/500 [==============================] - 0s 104us/step - loss: 0.3595 - accuracy: 0.7900 - val_loss: 0.3812 - val_accuracy: 0.7460 Epoch 155/200 500/500 [==============================] - 0s 101us/step - loss: 0.3663 - accuracy: 0.7780 - val_loss: 0.3815 - val_accuracy: 0.7440 Epoch 156/200 500/500 [==============================] - 0s 101us/step - loss: 0.3660 - accuracy: 0.7680 - val_loss: 0.3812 - val_accuracy: 0.7480 Epoch 157/200 500/500 [==============================] - 0s 99us/step - loss: 0.3578 - accuracy: 0.7860 - val_loss: 0.3723 - val_accuracy: 0.7420 Epoch 158/200 500/500 [==============================] - 0s 98us/step - loss: 0.3534 - accuracy: 0.7820 - val_loss: 0.3742 - val_accuracy: 0.7540 Epoch 159/200 500/500 [==============================] - 0s 96us/step - loss: 0.3596 - accuracy: 0.7860 - val_loss: 0.3814 - val_accuracy: 0.7380 Epoch 160/200 500/500 [==============================] - 0s 108us/step - loss: 0.3670 - accuracy: 0.7680 - val_loss: 0.3714 - val_accuracy: 0.7540 Epoch 161/200 500/500 [==============================] - 0s 105us/step - loss: 0.3579 - accuracy: 0.7940 - val_loss: 0.3831 - val_accuracy: 0.7560 Epoch 162/200 500/500 [==============================] - 0s 92us/step - loss: 0.3595 - accuracy: 0.7880 - val_loss: 0.3711 - val_accuracy: 0.7580 Epoch 163/200 500/500 [==============================] - 0s 98us/step - loss: 0.3540 - accuracy: 0.7820 - val_loss: 0.3849 - val_accuracy: 0.7340 Epoch 164/200 500/500 [==============================] - 0s 96us/step - loss: 0.3564 - accuracy: 0.7880 - val_loss: 0.3750 - val_accuracy: 0.7460 Epoch 165/200 500/500 [==============================] - 0s 93us/step - loss: 0.3554 - accuracy: 0.7820 - val_loss: 0.3694 - val_accuracy: 0.7500 Epoch 166/200 500/500 [==============================] - 0s 96us/step - loss: 0.3587 - accuracy: 0.7800 - val_loss: 0.3774 - val_accuracy: 0.7420 Epoch 167/200 500/500 [==============================] - 0s 96us/step - loss: 0.3621 - accuracy: 0.7860 - val_loss: 0.3726 - val_accuracy: 0.7480 Epoch 168/200 500/500 [==============================] - 0s 100us/step - loss: 0.3599 - accuracy: 0.7880 - val_loss: 0.3702 - val_accuracy: 0.7440 Epoch 169/200 500/500 [==============================] - 0s 103us/step - loss: 0.3545 - accuracy: 0.7860 - val_loss: 0.3814 - val_accuracy: 0.7500 Epoch 170/200 500/500 [==============================] - 0s 99us/step - loss: 0.3559 - accuracy: 0.7920 - val_loss: 0.3714 - val_accuracy: 0.7620 Epoch 171/200 500/500 [==============================] - 0s 88us/step - loss: 0.3539 - accuracy: 0.7900 - val_loss: 0.3766 - val_accuracy: 0.7420 Epoch 172/200 500/500 [==============================] - 0s 100us/step - loss: 0.3514 - accuracy: 0.7920 - val_loss: 0.3710 - val_accuracy: 0.7500 Epoch 173/200 500/500 [==============================] - 0s 89us/step - loss: 0.3571 - accuracy: 0.7800 - val_loss: 0.3751 - val_accuracy: 0.7460 Epoch 174/200 500/500 [==============================] - 0s 100us/step - loss: 0.3488 - accuracy: 0.7940 - val_loss: 0.3802 - val_accuracy: 0.7540 Epoch 175/200 500/500 [==============================] - 0s 96us/step - loss: 0.3547 - accuracy: 0.7840 - val_loss: 0.3719 - val_accuracy: 0.7500 Epoch 176/200 500/500 [==============================] - 0s 100us/step - loss: 0.3535 - accuracy: 0.7860 - val_loss: 0.3916 - val_accuracy: 0.7480 Epoch 177/200 500/500 [==============================] - 0s 89us/step - loss: 0.3544 - accuracy: 0.7800 - val_loss: 0.3694 - val_accuracy: 0.7500 Epoch 178/200 500/500 [==============================] - 0s 98us/step - loss: 0.3587 - accuracy: 0.7840 - val_loss: 0.3681 - val_accuracy: 0.7440 Epoch 179/200 500/500 [==============================] - 0s 94us/step - loss: 0.3537 - accuracy: 0.7880 - val_loss: 0.3725 - val_accuracy: 0.7460 Epoch 180/200 500/500 [==============================] - 0s 100us/step - loss: 0.3544 - accuracy: 0.7880 - val_loss: 0.3722 - val_accuracy: 0.7560 Epoch 181/200 500/500 [==============================] - 0s 92us/step - loss: 0.3550 - accuracy: 0.7800 - val_loss: 0.3781 - val_accuracy: 0.7420 Epoch 182/200 500/500 [==============================] - 0s 103us/step - loss: 0.3579 - accuracy: 0.7800 - val_loss: 0.3605 - val_accuracy: 0.7580 Epoch 183/200 500/500 [==============================] - 0s 87us/step - loss: 0.3516 - accuracy: 0.7900 - val_loss: 0.3679 - val_accuracy: 0.7580 Epoch 184/200 500/500 [==============================] - 0s 92us/step - loss: 0.3460 - accuracy: 0.7900 - val_loss: 0.3733 - val_accuracy: 0.7440 Epoch 185/200 500/500 [==============================] - 0s 102us/step - loss: 0.3506 - accuracy: 0.7960 - val_loss: 0.3716 - val_accuracy: 0.7520 Epoch 186/200 500/500 [==============================] - 0s 103us/step - loss: 0.3514 - accuracy: 0.7980 - val_loss: 0.3655 - val_accuracy: 0.7520 Epoch 187/200 500/500 [==============================] - 0s 95us/step - loss: 0.3595 - accuracy: 0.7760 - val_loss: 0.3743 - val_accuracy: 0.7580 Epoch 188/200 500/500 [==============================] - 0s 92us/step - loss: 0.3591 - accuracy: 0.7820 - val_loss: 0.3644 - val_accuracy: 0.7600 Epoch 189/200 500/500 [==============================] - 0s 97us/step - loss: 0.3620 - accuracy: 0.7920 - val_loss: 0.3685 - val_accuracy: 0.7560 Epoch 190/200 500/500 [==============================] - 0s 102us/step - loss: 0.3610 - accuracy: 0.7820 - val_loss: 0.3672 - val_accuracy: 0.7540 Epoch 191/200 500/500 [==============================] - 0s 91us/step - loss: 0.3468 - accuracy: 0.7940 - val_loss: 0.3686 - val_accuracy: 0.7520 Epoch 192/200 500/500 [==============================] - 0s 97us/step - loss: 0.3472 - accuracy: 0.7920 - val_loss: 0.3689 - val_accuracy: 0.7520 Epoch 193/200 500/500 [==============================] - 0s 98us/step - loss: 0.3469 - accuracy: 0.7940 - val_loss: 0.3684 - val_accuracy: 0.7500 Epoch 194/200 500/500 [==============================] - 0s 97us/step - loss: 0.3520 - accuracy: 0.7940 - val_loss: 0.3641 - val_accuracy: 0.7560 Epoch 195/200 500/500 [==============================] - 0s 110us/step - loss: 0.3598 - accuracy: 0.7800 - val_loss: 0.3690 - val_accuracy: 0.7640 Epoch 196/200 500/500 [==============================] - 0s 104us/step - loss: 0.3486 - accuracy: 0.7920 - val_loss: 0.3670 - val_accuracy: 0.7520 Epoch 197/200 500/500 [==============================] - 0s 95us/step - loss: 0.3460 - accuracy: 0.8020 - val_loss: 0.3630 - val_accuracy: 0.7620 Epoch 198/200 500/500 [==============================] - 0s 98us/step - loss: 0.3427 - accuracy: 0.8000 - val_loss: 0.3690 - val_accuracy: 0.7580 Epoch 199/200 500/500 [==============================] - 0s 96us/step - loss: 0.3440 - accuracy: 0.7880 - val_loss: 0.3738 - val_accuracy: 0.7460 Epoch 200/200 500/500 [==============================] - 0s 103us/step - loss: 0.3457 - accuracy: 0.7940 - val_loss: 0.3664 - val_accuracy: 0.7580 . model.metrics_names . [&#39;loss&#39;, &#39;accuracy&#39;] . _,train_acc=model.evaluate(trainX,trainy, verbose=1) . 500/500 [==============================] - 0s 21us/step . _,test_acc=model.evaluate(testX,testy, verbose= 1) . 500/500 [==============================] - 0s 19us/step . print(&#39;Train: {:.4f} Test: {:.4f}&#39;.format(train_acc, test_acc)) . Train: 0.8380 Test: 0.8380 . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;val_accuracy&#39;, &#39;loss&#39;, &#39;accuracy&#39;]) . fig =plt.figure(figsize=(10,5)) plt.subplot(1,2,1) plt.title(&#39;ACCURACY&#39;) plt.plot(h.history[&#39;accuracy&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_accuracy&#39;], label = &#39;test&#39;) plt.legend() plt.subplot(1,2,2) plt.title(&quot;LOSS&quot;) plt.plot(h.history[&#39;loss&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test&#39;) plt.legend() plt.show() . Squared Hinge Loss . X,y = make_circles(n_samples=1000, noise=0.1, random_state=1) y[where(y==0)]= -1 . n_train=500 trainX,testX = X[:n_train,:],X[n_train:,:] trainy,testy=y[:n_train],y[n_train:] . # collapse-hide model = Sequential() model.add(Dense(50, input_dim=2, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(1, activation=&#39;tanh&#39;)) opt=SGD(lr=0.01, momentum=0.9) model.compile(loss=&#39;squared_hinge&#39;, optimizer=opt, metrics=[&#39;accuracy&#39;]) h = model.fit(trainX,trainy,validation_data=(testX,testy), epochs=200, verbose=1) . . Train on 500 samples, validate on 500 samples Epoch 1/200 500/500 [==============================] - 0s 306us/step - loss: 1.6503 - accuracy: 0.4000 - val_loss: 1.3406 - val_accuracy: 0.1820 Epoch 2/200 500/500 [==============================] - 0s 85us/step - loss: 1.2285 - accuracy: 0.1740 - val_loss: 0.9795 - val_accuracy: 0.0000e+00 Epoch 3/200 500/500 [==============================] - 0s 86us/step - loss: 0.9856 - accuracy: 0.0680 - val_loss: 1.0021 - val_accuracy: 0.0160 Epoch 4/200 500/500 [==============================] - 0s 75us/step - loss: 0.9405 - accuracy: 0.0620 - val_loss: 0.8704 - val_accuracy: 0.0040 Epoch 5/200 500/500 [==============================] - 0s 84us/step - loss: 0.8543 - accuracy: 0.0600 - val_loss: 0.8034 - val_accuracy: 0.0600 Epoch 6/200 500/500 [==============================] - 0s 70us/step - loss: 0.8204 - accuracy: 0.1140 - val_loss: 0.7967 - val_accuracy: 0.1080 Epoch 7/200 500/500 [==============================] - 0s 77us/step - loss: 0.7738 - accuracy: 0.1320 - val_loss: 0.8279 - val_accuracy: 0.1860 Epoch 8/200 500/500 [==============================] - 0s 73us/step - loss: 0.7368 - accuracy: 0.1900 - val_loss: 0.8430 - val_accuracy: 0.2540 Epoch 9/200 500/500 [==============================] - 0s 71us/step - loss: 0.7306 - accuracy: 0.1720 - val_loss: 0.7401 - val_accuracy: 0.2840 Epoch 10/200 500/500 [==============================] - 0s 73us/step - loss: 0.6632 - accuracy: 0.1980 - val_loss: 0.6342 - val_accuracy: 0.2140 Epoch 11/200 500/500 [==============================] - 0s 66us/step - loss: 0.6480 - accuracy: 0.2280 - val_loss: 0.6346 - val_accuracy: 0.2440 Epoch 12/200 500/500 [==============================] - 0s 72us/step - loss: 0.6643 - accuracy: 0.3160 - val_loss: 0.6652 - val_accuracy: 0.2980 Epoch 13/200 500/500 [==============================] - 0s 73us/step - loss: 0.6158 - accuracy: 0.3040 - val_loss: 0.6220 - val_accuracy: 0.3220 Epoch 14/200 500/500 [==============================] - 0s 68us/step - loss: 0.6007 - accuracy: 0.3440 - val_loss: 0.6329 - val_accuracy: 0.3200 Epoch 15/200 500/500 [==============================] - 0s 73us/step - loss: 0.6282 - accuracy: 0.3860 - val_loss: 0.5545 - val_accuracy: 0.3460 Epoch 16/200 500/500 [==============================] - 0s 69us/step - loss: 0.5961 - accuracy: 0.3580 - val_loss: 0.6031 - val_accuracy: 0.3860 Epoch 17/200 500/500 [==============================] - 0s 70us/step - loss: 0.5931 - accuracy: 0.4040 - val_loss: 0.5915 - val_accuracy: 0.4040 Epoch 18/200 500/500 [==============================] - 0s 68us/step - loss: 0.6150 - accuracy: 0.4060 - val_loss: 0.5656 - val_accuracy: 0.3860 Epoch 19/200 500/500 [==============================] - 0s 70us/step - loss: 0.5841 - accuracy: 0.4440 - val_loss: 0.5182 - val_accuracy: 0.4240 Epoch 20/200 500/500 [==============================] - 0s 72us/step - loss: 0.5484 - accuracy: 0.4520 - val_loss: 0.5188 - val_accuracy: 0.4340 Epoch 21/200 500/500 [==============================] - 0s 69us/step - loss: 0.5386 - accuracy: 0.4540 - val_loss: 0.5234 - val_accuracy: 0.4360 Epoch 22/200 500/500 [==============================] - 0s 73us/step - loss: 0.5429 - accuracy: 0.4720 - val_loss: 0.5096 - val_accuracy: 0.4400 Epoch 23/200 500/500 [==============================] - 0s 75us/step - loss: 0.5361 - accuracy: 0.5020 - val_loss: 0.5282 - val_accuracy: 0.4720 Epoch 24/200 500/500 [==============================] - 0s 73us/step - loss: 0.5609 - accuracy: 0.4940 - val_loss: 0.6333 - val_accuracy: 0.4820 Epoch 25/200 500/500 [==============================] - 0s 77us/step - loss: 0.5605 - accuracy: 0.4840 - val_loss: 0.4979 - val_accuracy: 0.4960 Epoch 26/200 500/500 [==============================] - 0s 73us/step - loss: 0.5389 - accuracy: 0.5020 - val_loss: 0.4874 - val_accuracy: 0.4980 Epoch 27/200 500/500 [==============================] - 0s 70us/step - loss: 0.5251 - accuracy: 0.5100 - val_loss: 0.4941 - val_accuracy: 0.4760 Epoch 28/200 500/500 [==============================] - 0s 78us/step - loss: 0.5125 - accuracy: 0.5340 - val_loss: 0.5073 - val_accuracy: 0.5000 Epoch 29/200 500/500 [==============================] - 0s 73us/step - loss: 0.5235 - accuracy: 0.5240 - val_loss: 0.4893 - val_accuracy: 0.4840 Epoch 30/200 500/500 [==============================] - 0s 69us/step - loss: 0.5108 - accuracy: 0.5360 - val_loss: 0.4716 - val_accuracy: 0.5080 Epoch 31/200 500/500 [==============================] - 0s 72us/step - loss: 0.5060 - accuracy: 0.5340 - val_loss: 0.5045 - val_accuracy: 0.5160 Epoch 32/200 500/500 [==============================] - 0s 67us/step - loss: 0.5123 - accuracy: 0.5480 - val_loss: 0.4906 - val_accuracy: 0.5080 Epoch 33/200 500/500 [==============================] - 0s 71us/step - loss: 0.5214 - accuracy: 0.5460 - val_loss: 0.5494 - val_accuracy: 0.5340 Epoch 34/200 500/500 [==============================] - 0s 75us/step - loss: 0.5036 - accuracy: 0.5500 - val_loss: 0.4817 - val_accuracy: 0.5260 Epoch 35/200 500/500 [==============================] - 0s 69us/step - loss: 0.5186 - accuracy: 0.5440 - val_loss: 0.4980 - val_accuracy: 0.5300 Epoch 36/200 500/500 [==============================] - 0s 68us/step - loss: 0.5088 - accuracy: 0.5460 - val_loss: 0.4902 - val_accuracy: 0.5580 Epoch 37/200 500/500 [==============================] - 0s 66us/step - loss: 0.5212 - accuracy: 0.5460 - val_loss: 0.4866 - val_accuracy: 0.5480 Epoch 38/200 500/500 [==============================] - 0s 106us/step - loss: 0.5014 - accuracy: 0.5740 - val_loss: 0.4748 - val_accuracy: 0.5400 Epoch 39/200 500/500 [==============================] - 0s 81us/step - loss: 0.5094 - accuracy: 0.5720 - val_loss: 0.4708 - val_accuracy: 0.5500 Epoch 40/200 500/500 [==============================] - 0s 87us/step - loss: 0.4901 - accuracy: 0.5840 - val_loss: 0.4666 - val_accuracy: 0.5460 Epoch 41/200 500/500 [==============================] - 0s 78us/step - loss: 0.5060 - accuracy: 0.5820 - val_loss: 0.4910 - val_accuracy: 0.5820 Epoch 42/200 500/500 [==============================] - 0s 76us/step - loss: 0.5007 - accuracy: 0.5680 - val_loss: 0.4899 - val_accuracy: 0.5840 Epoch 43/200 500/500 [==============================] - 0s 78us/step - loss: 0.5296 - accuracy: 0.5800 - val_loss: 0.4734 - val_accuracy: 0.5600 Epoch 44/200 500/500 [==============================] - 0s 77us/step - loss: 0.4950 - accuracy: 0.5860 - val_loss: 0.4658 - val_accuracy: 0.5500 Epoch 45/200 500/500 [==============================] - 0s 79us/step - loss: 0.4858 - accuracy: 0.5960 - val_loss: 0.4649 - val_accuracy: 0.5480 Epoch 46/200 500/500 [==============================] - 0s 76us/step - loss: 0.4947 - accuracy: 0.5820 - val_loss: 0.4738 - val_accuracy: 0.5740 Epoch 47/200 500/500 [==============================] - 0s 82us/step - loss: 0.5069 - accuracy: 0.5880 - val_loss: 0.4831 - val_accuracy: 0.5940 Epoch 48/200 500/500 [==============================] - 0s 78us/step - loss: 0.4942 - accuracy: 0.6020 - val_loss: 0.4615 - val_accuracy: 0.5820 Epoch 49/200 500/500 [==============================] - 0s 73us/step - loss: 0.4981 - accuracy: 0.6000 - val_loss: 0.4869 - val_accuracy: 0.6020 Epoch 50/200 500/500 [==============================] - 0s 74us/step - loss: 0.5008 - accuracy: 0.5880 - val_loss: 0.4711 - val_accuracy: 0.5840 Epoch 51/200 500/500 [==============================] - 0s 73us/step - loss: 0.4867 - accuracy: 0.5960 - val_loss: 0.4556 - val_accuracy: 0.5680 Epoch 52/200 500/500 [==============================] - 0s 79us/step - loss: 0.4789 - accuracy: 0.6040 - val_loss: 0.4748 - val_accuracy: 0.5980 Epoch 53/200 500/500 [==============================] - 0s 73us/step - loss: 0.4823 - accuracy: 0.6240 - val_loss: 0.4606 - val_accuracy: 0.5860 Epoch 54/200 500/500 [==============================] - 0s 72us/step - loss: 0.4898 - accuracy: 0.6040 - val_loss: 0.4768 - val_accuracy: 0.5820 Epoch 55/200 500/500 [==============================] - 0s 73us/step - loss: 0.4997 - accuracy: 0.6240 - val_loss: 0.4583 - val_accuracy: 0.5940 Epoch 56/200 500/500 [==============================] - 0s 83us/step - loss: 0.4895 - accuracy: 0.6120 - val_loss: 0.4624 - val_accuracy: 0.6060 Epoch 57/200 500/500 [==============================] - 0s 82us/step - loss: 0.4898 - accuracy: 0.6120 - val_loss: 0.4548 - val_accuracy: 0.6080 Epoch 58/200 500/500 [==============================] - 0s 75us/step - loss: 0.5219 - accuracy: 0.6220 - val_loss: 0.4624 - val_accuracy: 0.5860 Epoch 59/200 500/500 [==============================] - 0s 79us/step - loss: 0.4916 - accuracy: 0.6080 - val_loss: 0.4892 - val_accuracy: 0.5800 Epoch 60/200 500/500 [==============================] - 0s 65us/step - loss: 0.5028 - accuracy: 0.6220 - val_loss: 0.4852 - val_accuracy: 0.6100 Epoch 61/200 500/500 [==============================] - 0s 71us/step - loss: 0.4945 - accuracy: 0.6040 - val_loss: 0.4812 - val_accuracy: 0.5780 Epoch 62/200 500/500 [==============================] - 0s 69us/step - loss: 0.4864 - accuracy: 0.6300 - val_loss: 0.4724 - val_accuracy: 0.5880 Epoch 63/200 500/500 [==============================] - 0s 69us/step - loss: 0.4872 - accuracy: 0.6360 - val_loss: 0.4538 - val_accuracy: 0.6160 Epoch 64/200 500/500 [==============================] - 0s 69us/step - loss: 0.4933 - accuracy: 0.6280 - val_loss: 0.4786 - val_accuracy: 0.6260 Epoch 65/200 500/500 [==============================] - 0s 72us/step - loss: 0.5020 - accuracy: 0.6120 - val_loss: 0.4738 - val_accuracy: 0.6000 Epoch 66/200 500/500 [==============================] - 0s 67us/step - loss: 0.4801 - accuracy: 0.6400 - val_loss: 0.4487 - val_accuracy: 0.6100 Epoch 67/200 500/500 [==============================] - 0s 70us/step - loss: 0.4791 - accuracy: 0.6420 - val_loss: 0.4595 - val_accuracy: 0.5920 Epoch 68/200 500/500 [==============================] - 0s 67us/step - loss: 0.4865 - accuracy: 0.6280 - val_loss: 0.4666 - val_accuracy: 0.5860 Epoch 69/200 500/500 [==============================] - 0s 66us/step - loss: 0.4921 - accuracy: 0.6340 - val_loss: 0.4509 - val_accuracy: 0.6060 Epoch 70/200 500/500 [==============================] - 0s 63us/step - loss: 0.4788 - accuracy: 0.6360 - val_loss: 0.4588 - val_accuracy: 0.5960 Epoch 71/200 500/500 [==============================] - 0s 68us/step - loss: 0.4980 - accuracy: 0.6200 - val_loss: 0.4559 - val_accuracy: 0.6020 Epoch 72/200 500/500 [==============================] - 0s 64us/step - loss: 0.4945 - accuracy: 0.6380 - val_loss: 0.4571 - val_accuracy: 0.5980 Epoch 73/200 500/500 [==============================] - 0s 65us/step - loss: 0.4893 - accuracy: 0.6240 - val_loss: 0.4483 - val_accuracy: 0.5920 Epoch 74/200 500/500 [==============================] - 0s 68us/step - loss: 0.4870 - accuracy: 0.6280 - val_loss: 0.4560 - val_accuracy: 0.6000 Epoch 75/200 500/500 [==============================] - 0s 70us/step - loss: 0.4862 - accuracy: 0.6420 - val_loss: 0.5098 - val_accuracy: 0.6000 Epoch 76/200 500/500 [==============================] - 0s 66us/step - loss: 0.5033 - accuracy: 0.6420 - val_loss: 0.4640 - val_accuracy: 0.6220 Epoch 77/200 500/500 [==============================] - 0s 66us/step - loss: 0.4792 - accuracy: 0.6440 - val_loss: 0.4474 - val_accuracy: 0.6080 Epoch 78/200 500/500 [==============================] - 0s 71us/step - loss: 0.4656 - accuracy: 0.6580 - val_loss: 0.4647 - val_accuracy: 0.6340 Epoch 79/200 500/500 [==============================] - 0s 75us/step - loss: 0.4933 - accuracy: 0.6440 - val_loss: 0.4442 - val_accuracy: 0.6220 Epoch 80/200 500/500 [==============================] - 0s 83us/step - loss: 0.4905 - accuracy: 0.6300 - val_loss: 0.4923 - val_accuracy: 0.6300 Epoch 81/200 500/500 [==============================] - 0s 67us/step - loss: 0.4939 - accuracy: 0.6460 - val_loss: 0.4483 - val_accuracy: 0.6220 Epoch 82/200 500/500 [==============================] - 0s 75us/step - loss: 0.4788 - accuracy: 0.6500 - val_loss: 0.4805 - val_accuracy: 0.5980 Epoch 83/200 500/500 [==============================] - 0s 65us/step - loss: 0.4874 - accuracy: 0.6460 - val_loss: 0.4642 - val_accuracy: 0.6480 Epoch 84/200 500/500 [==============================] - 0s 64us/step - loss: 0.4903 - accuracy: 0.6260 - val_loss: 0.4597 - val_accuracy: 0.6180 Epoch 85/200 500/500 [==============================] - 0s 68us/step - loss: 0.4795 - accuracy: 0.6540 - val_loss: 0.4681 - val_accuracy: 0.6040 Epoch 86/200 500/500 [==============================] - 0s 77us/step - loss: 0.4949 - accuracy: 0.6180 - val_loss: 0.4777 - val_accuracy: 0.6100 Epoch 87/200 500/500 [==============================] - 0s 87us/step - loss: 0.5046 - accuracy: 0.6360 - val_loss: 0.4633 - val_accuracy: 0.6380 Epoch 88/200 500/500 [==============================] - 0s 87us/step - loss: 0.5086 - accuracy: 0.6500 - val_loss: 0.4977 - val_accuracy: 0.6200 Epoch 89/200 500/500 [==============================] - 0s 68us/step - loss: 0.5175 - accuracy: 0.6400 - val_loss: 0.4611 - val_accuracy: 0.6160 Epoch 90/200 500/500 [==============================] - 0s 64us/step - loss: 0.5157 - accuracy: 0.6580 - val_loss: 0.4821 - val_accuracy: 0.6160 Epoch 91/200 500/500 [==============================] - 0s 61us/step - loss: 0.4771 - accuracy: 0.6420 - val_loss: 0.4773 - val_accuracy: 0.6520 Epoch 92/200 500/500 [==============================] - 0s 66us/step - loss: 0.4855 - accuracy: 0.6440 - val_loss: 0.4570 - val_accuracy: 0.6280 Epoch 93/200 500/500 [==============================] - 0s 65us/step - loss: 0.4871 - accuracy: 0.6460 - val_loss: 0.4609 - val_accuracy: 0.6080 Epoch 94/200 500/500 [==============================] - 0s 67us/step - loss: 0.4785 - accuracy: 0.6520 - val_loss: 0.4493 - val_accuracy: 0.6380 Epoch 95/200 500/500 [==============================] - 0s 65us/step - loss: 0.4798 - accuracy: 0.6600 - val_loss: 0.4584 - val_accuracy: 0.6320 Epoch 96/200 500/500 [==============================] - 0s 65us/step - loss: 0.4807 - accuracy: 0.6500 - val_loss: 0.4436 - val_accuracy: 0.6380 Epoch 97/200 500/500 [==============================] - 0s 68us/step - loss: 0.4750 - accuracy: 0.6580 - val_loss: 0.4625 - val_accuracy: 0.6360 Epoch 98/200 500/500 [==============================] - 0s 71us/step - loss: 0.4790 - accuracy: 0.6600 - val_loss: 0.4826 - val_accuracy: 0.6160 Epoch 99/200 500/500 [==============================] - 0s 73us/step - loss: 0.4827 - accuracy: 0.6560 - val_loss: 0.4800 - val_accuracy: 0.6460 Epoch 100/200 500/500 [==============================] - 0s 67us/step - loss: 0.4822 - accuracy: 0.6500 - val_loss: 0.4585 - val_accuracy: 0.6480 Epoch 101/200 500/500 [==============================] - 0s 71us/step - loss: 0.4714 - accuracy: 0.6600 - val_loss: 0.4841 - val_accuracy: 0.6200 Epoch 102/200 500/500 [==============================] - 0s 64us/step - loss: 0.4947 - accuracy: 0.6480 - val_loss: 0.4631 - val_accuracy: 0.6360 Epoch 103/200 500/500 [==============================] - 0s 66us/step - loss: 0.4876 - accuracy: 0.6360 - val_loss: 0.4760 - val_accuracy: 0.6560 Epoch 104/200 500/500 [==============================] - 0s 68us/step - loss: 0.4893 - accuracy: 0.6500 - val_loss: 0.4443 - val_accuracy: 0.6320 Epoch 105/200 500/500 [==============================] - 0s 69us/step - loss: 0.4704 - accuracy: 0.6660 - val_loss: 0.4624 - val_accuracy: 0.6400 Epoch 106/200 500/500 [==============================] - 0s 74us/step - loss: 0.4735 - accuracy: 0.6640 - val_loss: 0.4540 - val_accuracy: 0.6360 Epoch 107/200 500/500 [==============================] - 0s 70us/step - loss: 0.4958 - accuracy: 0.6520 - val_loss: 0.4630 - val_accuracy: 0.6300 Epoch 108/200 500/500 [==============================] - 0s 75us/step - loss: 0.4801 - accuracy: 0.6740 - val_loss: 0.4537 - val_accuracy: 0.6300 Epoch 109/200 500/500 [==============================] - 0s 82us/step - loss: 0.4731 - accuracy: 0.6720 - val_loss: 0.4412 - val_accuracy: 0.6340 Epoch 110/200 500/500 [==============================] - 0s 103us/step - loss: 0.4791 - accuracy: 0.6640 - val_loss: 0.4404 - val_accuracy: 0.6420 Epoch 111/200 500/500 [==============================] - 0s 98us/step - loss: 0.4719 - accuracy: 0.6600 - val_loss: 0.4478 - val_accuracy: 0.6240 Epoch 112/200 500/500 [==============================] - 0s 67us/step - loss: 0.4866 - accuracy: 0.6580 - val_loss: 0.4764 - val_accuracy: 0.6520 Epoch 113/200 500/500 [==============================] - 0s 65us/step - loss: 0.4853 - accuracy: 0.6660 - val_loss: 0.4675 - val_accuracy: 0.6520 Epoch 114/200 500/500 [==============================] - 0s 67us/step - loss: 0.4748 - accuracy: 0.6600 - val_loss: 0.4565 - val_accuracy: 0.6600 Epoch 115/200 500/500 [==============================] - 0s 68us/step - loss: 0.4815 - accuracy: 0.6560 - val_loss: 0.4531 - val_accuracy: 0.6340 Epoch 116/200 500/500 [==============================] - 0s 67us/step - loss: 0.4718 - accuracy: 0.6760 - val_loss: 0.4556 - val_accuracy: 0.6580 Epoch 117/200 500/500 [==============================] - 0s 67us/step - loss: 0.5120 - accuracy: 0.6520 - val_loss: 0.4595 - val_accuracy: 0.6200 Epoch 118/200 500/500 [==============================] - 0s 66us/step - loss: 0.4879 - accuracy: 0.6460 - val_loss: 0.4557 - val_accuracy: 0.6280 Epoch 119/200 500/500 [==============================] - 0s 69us/step - loss: 0.4709 - accuracy: 0.6640 - val_loss: 0.4408 - val_accuracy: 0.6500 Epoch 120/200 500/500 [==============================] - 0s 66us/step - loss: 0.4767 - accuracy: 0.6660 - val_loss: 0.4501 - val_accuracy: 0.6480 Epoch 121/200 500/500 [==============================] - 0s 71us/step - loss: 0.4757 - accuracy: 0.6680 - val_loss: 0.4512 - val_accuracy: 0.6460 Epoch 122/200 500/500 [==============================] - 0s 74us/step - loss: 0.4782 - accuracy: 0.6620 - val_loss: 0.4434 - val_accuracy: 0.6420 Epoch 123/200 500/500 [==============================] - 0s 67us/step - loss: 0.4805 - accuracy: 0.6640 - val_loss: 0.4590 - val_accuracy: 0.6300 Epoch 124/200 500/500 [==============================] - 0s 68us/step - loss: 0.4933 - accuracy: 0.6580 - val_loss: 0.4807 - val_accuracy: 0.6240 Epoch 125/200 500/500 [==============================] - 0s 67us/step - loss: 0.4663 - accuracy: 0.6640 - val_loss: 0.4564 - val_accuracy: 0.6700 Epoch 126/200 500/500 [==============================] - 0s 66us/step - loss: 0.4770 - accuracy: 0.6560 - val_loss: 0.4695 - val_accuracy: 0.6240 Epoch 127/200 500/500 [==============================] - 0s 76us/step - loss: 0.4849 - accuracy: 0.6620 - val_loss: 0.4621 - val_accuracy: 0.6640 Epoch 128/200 500/500 [==============================] - 0s 74us/step - loss: 0.4635 - accuracy: 0.6640 - val_loss: 0.4401 - val_accuracy: 0.6500 Epoch 129/200 500/500 [==============================] - 0s 71us/step - loss: 0.4758 - accuracy: 0.6680 - val_loss: 0.4428 - val_accuracy: 0.6460 Epoch 130/200 500/500 [==============================] - 0s 70us/step - loss: 0.4749 - accuracy: 0.6660 - val_loss: 0.4713 - val_accuracy: 0.6480 Epoch 131/200 500/500 [==============================] - 0s 72us/step - loss: 0.4782 - accuracy: 0.6660 - val_loss: 0.4407 - val_accuracy: 0.6560 Epoch 132/200 500/500 [==============================] - 0s 74us/step - loss: 0.4679 - accuracy: 0.6680 - val_loss: 0.4524 - val_accuracy: 0.6340 Epoch 133/200 500/500 [==============================] - 0s 73us/step - loss: 0.4731 - accuracy: 0.6600 - val_loss: 0.4459 - val_accuracy: 0.6520 Epoch 134/200 500/500 [==============================] - 0s 68us/step - loss: 0.4659 - accuracy: 0.6680 - val_loss: 0.4498 - val_accuracy: 0.6520 Epoch 135/200 500/500 [==============================] - 0s 64us/step - loss: 0.4852 - accuracy: 0.6660 - val_loss: 0.4532 - val_accuracy: 0.6440 Epoch 136/200 500/500 [==============================] - 0s 66us/step - loss: 0.4705 - accuracy: 0.6740 - val_loss: 0.4471 - val_accuracy: 0.6420 Epoch 137/200 500/500 [==============================] - 0s 68us/step - loss: 0.4827 - accuracy: 0.6720 - val_loss: 0.4552 - val_accuracy: 0.6460 Epoch 138/200 500/500 [==============================] - 0s 67us/step - loss: 0.4975 - accuracy: 0.6640 - val_loss: 0.4565 - val_accuracy: 0.6400 Epoch 139/200 500/500 [==============================] - 0s 75us/step - loss: 0.4811 - accuracy: 0.6700 - val_loss: 0.4499 - val_accuracy: 0.6440 Epoch 140/200 500/500 [==============================] - 0s 65us/step - loss: 0.4685 - accuracy: 0.6740 - val_loss: 0.4511 - val_accuracy: 0.6400 Epoch 141/200 500/500 [==============================] - 0s 65us/step - loss: 0.4864 - accuracy: 0.6580 - val_loss: 0.5509 - val_accuracy: 0.6500 Epoch 142/200 500/500 [==============================] - 0s 67us/step - loss: 0.5339 - accuracy: 0.6540 - val_loss: 0.4427 - val_accuracy: 0.6420 Epoch 143/200 500/500 [==============================] - 0s 74us/step - loss: 0.4860 - accuracy: 0.6720 - val_loss: 0.4675 - val_accuracy: 0.6380 Epoch 144/200 500/500 [==============================] - 0s 69us/step - loss: 0.4854 - accuracy: 0.6720 - val_loss: 0.4524 - val_accuracy: 0.6620 Epoch 145/200 500/500 [==============================] - 0s 71us/step - loss: 0.5051 - accuracy: 0.6620 - val_loss: 0.4565 - val_accuracy: 0.6820 Epoch 146/200 500/500 [==============================] - 0s 65us/step - loss: 0.4689 - accuracy: 0.6760 - val_loss: 0.4396 - val_accuracy: 0.6520 Epoch 147/200 500/500 [==============================] - 0s 62us/step - loss: 0.4656 - accuracy: 0.6680 - val_loss: 0.4518 - val_accuracy: 0.6560 Epoch 148/200 500/500 [==============================] - 0s 62us/step - loss: 0.4738 - accuracy: 0.6720 - val_loss: 0.4459 - val_accuracy: 0.6440 Epoch 149/200 500/500 [==============================] - 0s 62us/step - loss: 0.4829 - accuracy: 0.6620 - val_loss: 0.4645 - val_accuracy: 0.6360 Epoch 150/200 500/500 [==============================] - 0s 62us/step - loss: 0.4831 - accuracy: 0.6820 - val_loss: 0.4482 - val_accuracy: 0.6420 Epoch 151/200 500/500 [==============================] - 0s 63us/step - loss: 0.4795 - accuracy: 0.6800 - val_loss: 0.4814 - val_accuracy: 0.6400 Epoch 152/200 500/500 [==============================] - 0s 62us/step - loss: 0.4728 - accuracy: 0.6820 - val_loss: 0.4407 - val_accuracy: 0.6580 Epoch 153/200 500/500 [==============================] - 0s 63us/step - loss: 0.4776 - accuracy: 0.6700 - val_loss: 0.4615 - val_accuracy: 0.6520 Epoch 154/200 500/500 [==============================] - 0s 64us/step - loss: 0.4728 - accuracy: 0.6680 - val_loss: 0.4740 - val_accuracy: 0.6600 Epoch 155/200 500/500 [==============================] - 0s 63us/step - loss: 0.4880 - accuracy: 0.6620 - val_loss: 0.4885 - val_accuracy: 0.6280 Epoch 156/200 500/500 [==============================] - 0s 62us/step - loss: 0.4684 - accuracy: 0.6720 - val_loss: 0.4574 - val_accuracy: 0.6660 Epoch 157/200 500/500 [==============================] - 0s 66us/step - loss: 0.4728 - accuracy: 0.6880 - val_loss: 0.4923 - val_accuracy: 0.6280 Epoch 158/200 500/500 [==============================] - 0s 68us/step - loss: 0.4863 - accuracy: 0.6720 - val_loss: 0.4428 - val_accuracy: 0.6540 Epoch 159/200 500/500 [==============================] - 0s 67us/step - loss: 0.4804 - accuracy: 0.6660 - val_loss: 0.4537 - val_accuracy: 0.6720 Epoch 160/200 500/500 [==============================] - 0s 64us/step - loss: 0.4804 - accuracy: 0.6620 - val_loss: 0.4549 - val_accuracy: 0.6360 Epoch 161/200 500/500 [==============================] - 0s 65us/step - loss: 0.4991 - accuracy: 0.6760 - val_loss: 0.4480 - val_accuracy: 0.6580 Epoch 162/200 500/500 [==============================] - 0s 68us/step - loss: 0.5038 - accuracy: 0.6500 - val_loss: 0.4419 - val_accuracy: 0.6580 Epoch 163/200 500/500 [==============================] - 0s 64us/step - loss: 0.4784 - accuracy: 0.6760 - val_loss: 0.4731 - val_accuracy: 0.6680 Epoch 164/200 500/500 [==============================] - 0s 64us/step - loss: 0.4886 - accuracy: 0.6640 - val_loss: 0.4522 - val_accuracy: 0.6340 Epoch 165/200 500/500 [==============================] - 0s 64us/step - loss: 0.4804 - accuracy: 0.6720 - val_loss: 0.4542 - val_accuracy: 0.6500 Epoch 166/200 500/500 [==============================] - 0s 69us/step - loss: 0.4670 - accuracy: 0.6800 - val_loss: 0.4450 - val_accuracy: 0.6440 Epoch 167/200 500/500 [==============================] - 0s 64us/step - loss: 0.4664 - accuracy: 0.6800 - val_loss: 0.4468 - val_accuracy: 0.6500 Epoch 168/200 500/500 [==============================] - 0s 61us/step - loss: 0.4697 - accuracy: 0.6720 - val_loss: 0.4479 - val_accuracy: 0.6420 Epoch 169/200 500/500 [==============================] - 0s 63us/step - loss: 0.4849 - accuracy: 0.6740 - val_loss: 0.4581 - val_accuracy: 0.6600 Epoch 170/200 500/500 [==============================] - 0s 64us/step - loss: 0.4825 - accuracy: 0.6780 - val_loss: 0.4461 - val_accuracy: 0.6580 Epoch 171/200 500/500 [==============================] - 0s 67us/step - loss: 0.4843 - accuracy: 0.6740 - val_loss: 0.4756 - val_accuracy: 0.6620 Epoch 172/200 500/500 [==============================] - 0s 64us/step - loss: 0.4845 - accuracy: 0.6880 - val_loss: 0.4939 - val_accuracy: 0.6380 Epoch 173/200 500/500 [==============================] - 0s 70us/step - loss: 0.4801 - accuracy: 0.6720 - val_loss: 0.4517 - val_accuracy: 0.6640 Epoch 174/200 500/500 [==============================] - 0s 66us/step - loss: 0.4781 - accuracy: 0.6740 - val_loss: 0.4454 - val_accuracy: 0.6680 Epoch 175/200 500/500 [==============================] - 0s 70us/step - loss: 0.4871 - accuracy: 0.6760 - val_loss: 0.4635 - val_accuracy: 0.6280 Epoch 176/200 500/500 [==============================] - 0s 65us/step - loss: 0.4598 - accuracy: 0.6740 - val_loss: 0.4520 - val_accuracy: 0.6640 Epoch 177/200 500/500 [==============================] - 0s 63us/step - loss: 0.4636 - accuracy: 0.6700 - val_loss: 0.4448 - val_accuracy: 0.6480 Epoch 178/200 500/500 [==============================] - 0s 68us/step - loss: 0.4655 - accuracy: 0.6720 - val_loss: 0.4514 - val_accuracy: 0.6540 Epoch 179/200 500/500 [==============================] - 0s 62us/step - loss: 0.4811 - accuracy: 0.6760 - val_loss: 0.4450 - val_accuracy: 0.6760 Epoch 180/200 500/500 [==============================] - 0s 69us/step - loss: 0.4876 - accuracy: 0.6800 - val_loss: 0.4802 - val_accuracy: 0.6660 Epoch 181/200 500/500 [==============================] - 0s 63us/step - loss: 0.5152 - accuracy: 0.6740 - val_loss: 0.4450 - val_accuracy: 0.6540 Epoch 182/200 500/500 [==============================] - 0s 69us/step - loss: 0.4711 - accuracy: 0.6800 - val_loss: 0.4885 - val_accuracy: 0.6520 Epoch 183/200 500/500 [==============================] - 0s 63us/step - loss: 0.4858 - accuracy: 0.6620 - val_loss: 0.4437 - val_accuracy: 0.6480 Epoch 184/200 500/500 [==============================] - 0s 63us/step - loss: 0.4744 - accuracy: 0.6840 - val_loss: 0.4473 - val_accuracy: 0.6460 Epoch 185/200 500/500 [==============================] - 0s 76us/step - loss: 0.4784 - accuracy: 0.6720 - val_loss: 0.4695 - val_accuracy: 0.6740 Epoch 186/200 500/500 [==============================] - 0s 68us/step - loss: 0.4718 - accuracy: 0.6860 - val_loss: 0.4530 - val_accuracy: 0.6480 Epoch 187/200 500/500 [==============================] - 0s 64us/step - loss: 0.4687 - accuracy: 0.6700 - val_loss: 0.4583 - val_accuracy: 0.6360 Epoch 188/200 500/500 [==============================] - 0s 69us/step - loss: 0.4943 - accuracy: 0.6600 - val_loss: 0.4922 - val_accuracy: 0.6500 Epoch 189/200 500/500 [==============================] - 0s 62us/step - loss: 0.5108 - accuracy: 0.6580 - val_loss: 0.4582 - val_accuracy: 0.6420 Epoch 190/200 500/500 [==============================] - 0s 72us/step - loss: 0.4721 - accuracy: 0.6880 - val_loss: 0.4439 - val_accuracy: 0.6580 Epoch 191/200 500/500 [==============================] - 0s 70us/step - loss: 0.4760 - accuracy: 0.6780 - val_loss: 0.4444 - val_accuracy: 0.6660 Epoch 192/200 500/500 [==============================] - 0s 64us/step - loss: 0.4661 - accuracy: 0.6740 - val_loss: 0.4477 - val_accuracy: 0.6480 Epoch 193/200 500/500 [==============================] - 0s 69us/step - loss: 0.4686 - accuracy: 0.6740 - val_loss: 0.4437 - val_accuracy: 0.6680 Epoch 194/200 500/500 [==============================] - 0s 63us/step - loss: 0.4679 - accuracy: 0.6840 - val_loss: 0.4572 - val_accuracy: 0.6520 Epoch 195/200 500/500 [==============================] - 0s 62us/step - loss: 0.4802 - accuracy: 0.6760 - val_loss: 0.4604 - val_accuracy: 0.6440 Epoch 196/200 500/500 [==============================] - 0s 62us/step - loss: 0.4744 - accuracy: 0.6760 - val_loss: 0.4433 - val_accuracy: 0.6560 Epoch 197/200 500/500 [==============================] - 0s 63us/step - loss: 0.4669 - accuracy: 0.6740 - val_loss: 0.4521 - val_accuracy: 0.6600 Epoch 198/200 500/500 [==============================] - 0s 61us/step - loss: 0.4688 - accuracy: 0.6760 - val_loss: 0.4536 - val_accuracy: 0.6480 Epoch 199/200 500/500 [==============================] - 0s 63us/step - loss: 0.4720 - accuracy: 0.6880 - val_loss: 0.4574 - val_accuracy: 0.6400 Epoch 200/200 500/500 [==============================] - 0s 67us/step - loss: 0.4790 - accuracy: 0.6640 - val_loss: 0.4480 - val_accuracy: 0.6720 . print(model.metrics_names) res_train = model.evaluate(trainX,trainy) res_test = model.evaluate(testX, testy) . [&#39;loss&#39;, &#39;accuracy&#39;] 500/500 [==============================] - 0s 18us/step 500/500 [==============================] - 0s 18us/step . print(&#39;Traina cc:{:.4f} Test acc:{:.4f}&#39;.format(res_train[1], res_test[1])) . Traina cc:0.6820 Test acc:0.6660 . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;val_accuracy&#39;, &#39;loss&#39;, &#39;accuracy&#39;]) . fig=plt.figure(figsize=(8,2)) plt.subplot(121) plt.title(&quot;LOSS&quot;) plt.plot(h.history[&#39;loss&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test&#39;) plt.legend() plt.subplot(122) plt.title(&quot;ACCURACY&quot;) plt.plot(h.history[&#39;accuracy&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_accuracy&#39;], label=&#39;test&#39;) plt.legend() plt.show() . Multi-class classification . Multi-class cross-entropy # sparse categorical cross-entropy . from sklearn.datasets import make_blobs X,y = make_blobs(n_samples=1000, centers=3, n_features=2, cluster_std=2, random_state=2) . print(X[:5], &#39; &#39;, y[:5]) . [[ 0.48719811 -0.43160548] [ -1.48958879 -3.47915742] [ -2.06250444 -7.73300419] [ -0.51369303 -10.31546366] [ 0.56240126 -2.18246169]] [2 2 2 0 1] . for i in range(3): samples_idx = where(y==i) plt.scatter(X[samples_idx,0], X[samples_idx,1], label=str(i)) plt.legend() plt.show() . from keras.utils import to_categorical X,y = make_blobs(n_samples=1000, centers=3, n_features=2, cluster_std=2, random_state=2) y = to_categorical(y) #NO ONEHOT ENCODING FOR SPARSE n_train=500 trainX,testX = X[:n_train,:],X[n_train:,:] trainy,testy=y[:n_train],y[n_train:] . print(trainy.shape) print(y[:5]) . (500, 3) [[0. 0. 1.] [0. 0. 1.] [0. 0. 1.] [1. 0. 0.] [0. 1. 0.]] . model = Sequential() model.add(Dense(50, input_dim=2, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(3, activation=&#39;softmax&#39;)) opt=SGD(lr=0.01, momentum=0.9) #model.compile(loss=&#39;categorical_crossentropy&#39;, optimizer=opt, metrics=[&#39;accuracy&#39;]) model.compile(loss=&#39;categorical_crossentropy&#39;, optimizer=opt, metrics=[&#39;accuracy&#39;], ) h = model.fit(trainX,trainy,validation_data=(testX,testy), epochs=200, verbose=1) . Train on 500 samples, validate on 500 samples Epoch 1/200 500/500 [==============================] - 0s 686us/step - loss: 2.4690 - accuracy: 0.4380 - val_loss: 1.4963 - val_accuracy: 0.6140 Epoch 2/200 500/500 [==============================] - 0s 81us/step - loss: 1.9970 - accuracy: 0.5540 - val_loss: 3.7954 - val_accuracy: 0.6220 Epoch 3/200 500/500 [==============================] - 0s 105us/step - loss: 2.7608 - accuracy: 0.5740 - val_loss: 1.4630 - val_accuracy: 0.7000 Epoch 4/200 500/500 [==============================] - 0s 97us/step - loss: 1.5278 - accuracy: 0.6120 - val_loss: 0.5915 - val_accuracy: 0.7780 Epoch 5/200 500/500 [==============================] - 0s 114us/step - loss: 0.8942 - accuracy: 0.6600 - val_loss: 0.5917 - val_accuracy: 0.7800 Epoch 6/200 500/500 [==============================] - 0s 95us/step - loss: 0.6792 - accuracy: 0.6880 - val_loss: 0.5758 - val_accuracy: 0.7620 Epoch 7/200 500/500 [==============================] - 0s 105us/step - loss: 0.5949 - accuracy: 0.7360 - val_loss: 0.5213 - val_accuracy: 0.7900 Epoch 8/200 500/500 [==============================] - 0s 94us/step - loss: 0.5825 - accuracy: 0.7460 - val_loss: 0.5523 - val_accuracy: 0.7820 Epoch 9/200 500/500 [==============================] - 0s 101us/step - loss: 0.5505 - accuracy: 0.7480 - val_loss: 0.5288 - val_accuracy: 0.7680 Epoch 10/200 500/500 [==============================] - 0s 97us/step - loss: 0.5223 - accuracy: 0.7760 - val_loss: 0.4705 - val_accuracy: 0.7940 Epoch 11/200 500/500 [==============================] - 0s 91us/step - loss: 0.5564 - accuracy: 0.7640 - val_loss: 0.4782 - val_accuracy: 0.8120 Epoch 12/200 500/500 [==============================] - 0s 92us/step - loss: 0.5231 - accuracy: 0.7700 - val_loss: 0.4632 - val_accuracy: 0.8220 Epoch 13/200 500/500 [==============================] - 0s 99us/step - loss: 0.5008 - accuracy: 0.7680 - val_loss: 0.4693 - val_accuracy: 0.8160 Epoch 14/200 500/500 [==============================] - 0s 97us/step - loss: 0.4731 - accuracy: 0.8040 - val_loss: 0.5049 - val_accuracy: 0.7960 Epoch 15/200 500/500 [==============================] - 0s 93us/step - loss: 0.5305 - accuracy: 0.7540 - val_loss: 0.5421 - val_accuracy: 0.7720 Epoch 16/200 500/500 [==============================] - 0s 102us/step - loss: 0.5730 - accuracy: 0.7420 - val_loss: 0.4648 - val_accuracy: 0.8160 Epoch 17/200 500/500 [==============================] - 0s 101us/step - loss: 0.4609 - accuracy: 0.8060 - val_loss: 0.4206 - val_accuracy: 0.8280 Epoch 18/200 500/500 [==============================] - 0s 92us/step - loss: 0.4665 - accuracy: 0.7800 - val_loss: 0.5483 - val_accuracy: 0.7780 Epoch 19/200 500/500 [==============================] - 0s 88us/step - loss: 0.4599 - accuracy: 0.7880 - val_loss: 0.4178 - val_accuracy: 0.8280 Epoch 20/200 500/500 [==============================] - 0s 98us/step - loss: 0.4265 - accuracy: 0.8120 - val_loss: 0.4580 - val_accuracy: 0.8140 Epoch 21/200 500/500 [==============================] - 0s 98us/step - loss: 0.4498 - accuracy: 0.8020 - val_loss: 0.4201 - val_accuracy: 0.8220 Epoch 22/200 500/500 [==============================] - 0s 103us/step - loss: 0.4390 - accuracy: 0.8140 - val_loss: 0.4160 - val_accuracy: 0.8340 Epoch 23/200 500/500 [==============================] - 0s 100us/step - loss: 0.4685 - accuracy: 0.7920 - val_loss: 0.4636 - val_accuracy: 0.8000 Epoch 24/200 500/500 [==============================] - 0s 121us/step - loss: 0.4534 - accuracy: 0.7980 - val_loss: 0.4112 - val_accuracy: 0.8360 Epoch 25/200 500/500 [==============================] - 0s 119us/step - loss: 0.4584 - accuracy: 0.7940 - val_loss: 0.4324 - val_accuracy: 0.8260 Epoch 26/200 500/500 [==============================] - 0s 119us/step - loss: 0.4713 - accuracy: 0.8000 - val_loss: 0.4311 - val_accuracy: 0.8200 Epoch 27/200 500/500 [==============================] - 0s 117us/step - loss: 0.4643 - accuracy: 0.8080 - val_loss: 0.4453 - val_accuracy: 0.8140 Epoch 28/200 500/500 [==============================] - 0s 129us/step - loss: 0.4440 - accuracy: 0.8120 - val_loss: 0.4293 - val_accuracy: 0.8280 Epoch 29/200 500/500 [==============================] - 0s 113us/step - loss: 0.4307 - accuracy: 0.8100 - val_loss: 0.4502 - val_accuracy: 0.8120 Epoch 30/200 500/500 [==============================] - 0s 94us/step - loss: 0.4360 - accuracy: 0.8020 - val_loss: 0.4676 - val_accuracy: 0.8060 Epoch 31/200 500/500 [==============================] - 0s 95us/step - loss: 0.4589 - accuracy: 0.8120 - val_loss: 0.4147 - val_accuracy: 0.8260 Epoch 32/200 500/500 [==============================] - 0s 95us/step - loss: 0.4262 - accuracy: 0.8040 - val_loss: 0.4152 - val_accuracy: 0.8220 Epoch 33/200 500/500 [==============================] - 0s 98us/step - loss: 0.4247 - accuracy: 0.8160 - val_loss: 0.4108 - val_accuracy: 0.8200 Epoch 34/200 500/500 [==============================] - 0s 100us/step - loss: 0.4263 - accuracy: 0.8160 - val_loss: 0.4295 - val_accuracy: 0.8280 Epoch 35/200 500/500 [==============================] - 0s 126us/step - loss: 0.4462 - accuracy: 0.8060 - val_loss: 0.4520 - val_accuracy: 0.8140 Epoch 36/200 500/500 [==============================] - 0s 117us/step - loss: 0.4333 - accuracy: 0.8060 - val_loss: 0.4065 - val_accuracy: 0.8300 Epoch 37/200 500/500 [==============================] - 0s 113us/step - loss: 0.4641 - accuracy: 0.8020 - val_loss: 0.4481 - val_accuracy: 0.8140 Epoch 38/200 500/500 [==============================] - 0s 102us/step - loss: 0.4763 - accuracy: 0.7940 - val_loss: 0.4467 - val_accuracy: 0.8200 Epoch 39/200 500/500 [==============================] - 0s 125us/step - loss: 0.4222 - accuracy: 0.8260 - val_loss: 0.4038 - val_accuracy: 0.8260 Epoch 40/200 500/500 [==============================] - 0s 106us/step - loss: 0.4187 - accuracy: 0.8280 - val_loss: 0.4436 - val_accuracy: 0.8100 Epoch 41/200 500/500 [==============================] - 0s 102us/step - loss: 0.4392 - accuracy: 0.8100 - val_loss: 0.4216 - val_accuracy: 0.8240 Epoch 42/200 500/500 [==============================] - 0s 94us/step - loss: 0.4081 - accuracy: 0.8160 - val_loss: 0.4029 - val_accuracy: 0.8320 Epoch 43/200 500/500 [==============================] - 0s 92us/step - loss: 0.4198 - accuracy: 0.8100 - val_loss: 0.4173 - val_accuracy: 0.8180 Epoch 44/200 500/500 [==============================] - 0s 92us/step - loss: 0.4184 - accuracy: 0.8180 - val_loss: 0.4109 - val_accuracy: 0.8200 Epoch 45/200 500/500 [==============================] - 0s 93us/step - loss: 0.4040 - accuracy: 0.8260 - val_loss: 0.4059 - val_accuracy: 0.8320 Epoch 46/200 500/500 [==============================] - 0s 93us/step - loss: 0.4080 - accuracy: 0.8220 - val_loss: 0.4218 - val_accuracy: 0.8140 Epoch 47/200 500/500 [==============================] - 0s 91us/step - loss: 0.4078 - accuracy: 0.8280 - val_loss: 0.4163 - val_accuracy: 0.8280 Epoch 48/200 500/500 [==============================] - 0s 92us/step - loss: 0.4023 - accuracy: 0.8120 - val_loss: 0.4067 - val_accuracy: 0.8220 Epoch 49/200 500/500 [==============================] - 0s 94us/step - loss: 0.4084 - accuracy: 0.8340 - val_loss: 0.4340 - val_accuracy: 0.8280 Epoch 50/200 500/500 [==============================] - 0s 89us/step - loss: 0.4547 - accuracy: 0.8100 - val_loss: 0.4174 - val_accuracy: 0.8240 Epoch 51/200 500/500 [==============================] - 0s 94us/step - loss: 0.4450 - accuracy: 0.8040 - val_loss: 0.4950 - val_accuracy: 0.7780 Epoch 52/200 500/500 [==============================] - 0s 95us/step - loss: 0.4247 - accuracy: 0.7980 - val_loss: 0.4292 - val_accuracy: 0.8120 Epoch 53/200 500/500 [==============================] - 0s 92us/step - loss: 0.4314 - accuracy: 0.8180 - val_loss: 0.4172 - val_accuracy: 0.8220 Epoch 54/200 500/500 [==============================] - 0s 84us/step - loss: 0.4073 - accuracy: 0.8340 - val_loss: 0.4176 - val_accuracy: 0.8140 Epoch 55/200 500/500 [==============================] - 0s 91us/step - loss: 0.4103 - accuracy: 0.8220 - val_loss: 0.4167 - val_accuracy: 0.8260 Epoch 56/200 500/500 [==============================] - 0s 89us/step - loss: 0.4054 - accuracy: 0.8300 - val_loss: 0.4656 - val_accuracy: 0.8100 Epoch 57/200 500/500 [==============================] - 0s 85us/step - loss: 0.4128 - accuracy: 0.8240 - val_loss: 0.4295 - val_accuracy: 0.8200 Epoch 58/200 500/500 [==============================] - 0s 88us/step - loss: 0.4080 - accuracy: 0.8280 - val_loss: 0.4056 - val_accuracy: 0.8200 Epoch 59/200 500/500 [==============================] - 0s 91us/step - loss: 0.4126 - accuracy: 0.8120 - val_loss: 0.4413 - val_accuracy: 0.8120 Epoch 60/200 500/500 [==============================] - 0s 88us/step - loss: 0.4094 - accuracy: 0.8100 - val_loss: 0.4101 - val_accuracy: 0.8220 Epoch 61/200 500/500 [==============================] - 0s 92us/step - loss: 0.4214 - accuracy: 0.8220 - val_loss: 0.4608 - val_accuracy: 0.8140 Epoch 62/200 500/500 [==============================] - 0s 95us/step - loss: 0.4473 - accuracy: 0.8000 - val_loss: 0.4581 - val_accuracy: 0.8040 Epoch 63/200 500/500 [==============================] - 0s 93us/step - loss: 0.4030 - accuracy: 0.8380 - val_loss: 0.4351 - val_accuracy: 0.8180 Epoch 64/200 500/500 [==============================] - 0s 92us/step - loss: 0.4384 - accuracy: 0.8080 - val_loss: 0.4561 - val_accuracy: 0.8160 Epoch 65/200 500/500 [==============================] - 0s 101us/step - loss: 0.4191 - accuracy: 0.8240 - val_loss: 0.4135 - val_accuracy: 0.8240 Epoch 66/200 500/500 [==============================] - 0s 99us/step - loss: 0.4097 - accuracy: 0.8300 - val_loss: 0.4201 - val_accuracy: 0.8220 Epoch 67/200 500/500 [==============================] - 0s 90us/step - loss: 0.3918 - accuracy: 0.8180 - val_loss: 0.4704 - val_accuracy: 0.8060 Epoch 68/200 500/500 [==============================] - 0s 94us/step - loss: 0.4140 - accuracy: 0.8200 - val_loss: 0.4175 - val_accuracy: 0.8200 Epoch 69/200 500/500 [==============================] - 0s 91us/step - loss: 0.4052 - accuracy: 0.8240 - val_loss: 0.4325 - val_accuracy: 0.8220 Epoch 70/200 500/500 [==============================] - 0s 91us/step - loss: 0.4150 - accuracy: 0.8180 - val_loss: 0.4390 - val_accuracy: 0.8280 Epoch 71/200 500/500 [==============================] - 0s 84us/step - loss: 0.4364 - accuracy: 0.8260 - val_loss: 0.4174 - val_accuracy: 0.8220 Epoch 72/200 500/500 [==============================] - 0s 85us/step - loss: 0.4199 - accuracy: 0.8280 - val_loss: 0.4141 - val_accuracy: 0.8280 Epoch 73/200 500/500 [==============================] - 0s 85us/step - loss: 0.3958 - accuracy: 0.8320 - val_loss: 0.4483 - val_accuracy: 0.8160 Epoch 74/200 500/500 [==============================] - 0s 85us/step - loss: 0.4221 - accuracy: 0.8200 - val_loss: 0.4174 - val_accuracy: 0.8260 Epoch 75/200 500/500 [==============================] - 0s 84us/step - loss: 0.4470 - accuracy: 0.8080 - val_loss: 0.4300 - val_accuracy: 0.8200 Epoch 76/200 500/500 [==============================] - 0s 85us/step - loss: 0.4129 - accuracy: 0.8080 - val_loss: 0.4078 - val_accuracy: 0.8320 Epoch 77/200 500/500 [==============================] - 0s 86us/step - loss: 0.4141 - accuracy: 0.8180 - val_loss: 0.4086 - val_accuracy: 0.8260 Epoch 78/200 500/500 [==============================] - 0s 90us/step - loss: 0.4102 - accuracy: 0.8220 - val_loss: 0.4104 - val_accuracy: 0.8340 Epoch 79/200 500/500 [==============================] - 0s 84us/step - loss: 0.4002 - accuracy: 0.8180 - val_loss: 0.4213 - val_accuracy: 0.8260 Epoch 80/200 500/500 [==============================] - 0s 87us/step - loss: 0.4146 - accuracy: 0.8140 - val_loss: 0.4071 - val_accuracy: 0.8240 Epoch 81/200 500/500 [==============================] - 0s 93us/step - loss: 0.4201 - accuracy: 0.8080 - val_loss: 0.4110 - val_accuracy: 0.8180 Epoch 82/200 500/500 [==============================] - 0s 114us/step - loss: 0.3955 - accuracy: 0.8260 - val_loss: 0.4283 - val_accuracy: 0.8200 Epoch 83/200 500/500 [==============================] - 0s 137us/step - loss: 0.4109 - accuracy: 0.8220 - val_loss: 0.4073 - val_accuracy: 0.8220 Epoch 84/200 500/500 [==============================] - 0s 132us/step - loss: 0.4009 - accuracy: 0.8360 - val_loss: 0.4191 - val_accuracy: 0.8280 Epoch 85/200 500/500 [==============================] - 0s 132us/step - loss: 0.4039 - accuracy: 0.8160 - val_loss: 0.4098 - val_accuracy: 0.8220 Epoch 86/200 500/500 [==============================] - 0s 127us/step - loss: 0.4015 - accuracy: 0.8180 - val_loss: 0.4540 - val_accuracy: 0.8080 Epoch 87/200 500/500 [==============================] - 0s 128us/step - loss: 0.4183 - accuracy: 0.8180 - val_loss: 0.4660 - val_accuracy: 0.8100 Epoch 88/200 500/500 [==============================] - 0s 130us/step - loss: 0.4451 - accuracy: 0.8040 - val_loss: 0.4237 - val_accuracy: 0.8240 Epoch 89/200 500/500 [==============================] - 0s 89us/step - loss: 0.4111 - accuracy: 0.8280 - val_loss: 0.4120 - val_accuracy: 0.8200 Epoch 90/200 500/500 [==============================] - 0s 93us/step - loss: 0.4004 - accuracy: 0.8200 - val_loss: 0.4095 - val_accuracy: 0.8260 Epoch 91/200 500/500 [==============================] - 0s 88us/step - loss: 0.4166 - accuracy: 0.8140 - val_loss: 0.4488 - val_accuracy: 0.8120 Epoch 92/200 500/500 [==============================] - 0s 83us/step - loss: 0.4407 - accuracy: 0.8140 - val_loss: 0.4311 - val_accuracy: 0.8280 Epoch 93/200 500/500 [==============================] - 0s 86us/step - loss: 0.4482 - accuracy: 0.8000 - val_loss: 0.4377 - val_accuracy: 0.8240 Epoch 94/200 500/500 [==============================] - 0s 92us/step - loss: 0.4185 - accuracy: 0.8260 - val_loss: 0.4221 - val_accuracy: 0.8200 Epoch 95/200 500/500 [==============================] - 0s 97us/step - loss: 0.4036 - accuracy: 0.8120 - val_loss: 0.4108 - val_accuracy: 0.8320 Epoch 96/200 500/500 [==============================] - 0s 84us/step - loss: 0.4102 - accuracy: 0.8240 - val_loss: 0.4568 - val_accuracy: 0.8080 Epoch 97/200 500/500 [==============================] - 0s 88us/step - loss: 0.4063 - accuracy: 0.8160 - val_loss: 0.4637 - val_accuracy: 0.8040 Epoch 98/200 500/500 [==============================] - 0s 82us/step - loss: 0.4186 - accuracy: 0.8120 - val_loss: 0.4268 - val_accuracy: 0.8180 Epoch 99/200 500/500 [==============================] - 0s 88us/step - loss: 0.4099 - accuracy: 0.8340 - val_loss: 0.4469 - val_accuracy: 0.8180 Epoch 100/200 500/500 [==============================] - 0s 93us/step - loss: 0.4104 - accuracy: 0.8080 - val_loss: 0.4145 - val_accuracy: 0.8180 Epoch 101/200 500/500 [==============================] - 0s 95us/step - loss: 0.4015 - accuracy: 0.8220 - val_loss: 0.4390 - val_accuracy: 0.8120 Epoch 102/200 500/500 [==============================] - 0s 84us/step - loss: 0.3921 - accuracy: 0.8300 - val_loss: 0.4190 - val_accuracy: 0.8240 Epoch 103/200 500/500 [==============================] - 0s 96us/step - loss: 0.3975 - accuracy: 0.8300 - val_loss: 0.4168 - val_accuracy: 0.8260 Epoch 104/200 500/500 [==============================] - 0s 79us/step - loss: 0.4004 - accuracy: 0.8320 - val_loss: 0.4326 - val_accuracy: 0.8240 Epoch 105/200 500/500 [==============================] - 0s 85us/step - loss: 0.4058 - accuracy: 0.8220 - val_loss: 0.4200 - val_accuracy: 0.8200 Epoch 106/200 500/500 [==============================] - 0s 109us/step - loss: 0.4141 - accuracy: 0.8080 - val_loss: 0.4202 - val_accuracy: 0.8140 Epoch 107/200 500/500 [==============================] - 0s 85us/step - loss: 0.4165 - accuracy: 0.8240 - val_loss: 0.4300 - val_accuracy: 0.8180 Epoch 108/200 500/500 [==============================] - 0s 92us/step - loss: 0.4175 - accuracy: 0.8160 - val_loss: 0.4134 - val_accuracy: 0.8160 Epoch 109/200 500/500 [==============================] - 0s 89us/step - loss: 0.4122 - accuracy: 0.8280 - val_loss: 0.4233 - val_accuracy: 0.8220 Epoch 110/200 500/500 [==============================] - 0s 91us/step - loss: 0.4126 - accuracy: 0.8200 - val_loss: 0.4147 - val_accuracy: 0.8140 Epoch 111/200 500/500 [==============================] - 0s 90us/step - loss: 0.4150 - accuracy: 0.8220 - val_loss: 0.4283 - val_accuracy: 0.8160 Epoch 112/200 500/500 [==============================] - 0s 88us/step - loss: 0.4169 - accuracy: 0.8200 - val_loss: 0.4232 - val_accuracy: 0.8180 Epoch 113/200 500/500 [==============================] - 0s 83us/step - loss: 0.4183 - accuracy: 0.8220 - val_loss: 0.4301 - val_accuracy: 0.8160 Epoch 114/200 500/500 [==============================] - 0s 78us/step - loss: 0.4080 - accuracy: 0.8220 - val_loss: 0.4135 - val_accuracy: 0.8220 Epoch 115/200 500/500 [==============================] - 0s 77us/step - loss: 0.4116 - accuracy: 0.8240 - val_loss: 0.4243 - val_accuracy: 0.8260 Epoch 116/200 500/500 [==============================] - 0s 90us/step - loss: 0.3997 - accuracy: 0.8180 - val_loss: 0.4221 - val_accuracy: 0.8160 Epoch 117/200 500/500 [==============================] - 0s 107us/step - loss: 0.3956 - accuracy: 0.8240 - val_loss: 0.4319 - val_accuracy: 0.8120 Epoch 118/200 500/500 [==============================] - 0s 91us/step - loss: 0.3942 - accuracy: 0.8300 - val_loss: 0.4143 - val_accuracy: 0.8200 Epoch 119/200 500/500 [==============================] - 0s 85us/step - loss: 0.4033 - accuracy: 0.8140 - val_loss: 0.4181 - val_accuracy: 0.8320 Epoch 120/200 500/500 [==============================] - 0s 88us/step - loss: 0.4109 - accuracy: 0.8300 - val_loss: 0.4129 - val_accuracy: 0.8280 Epoch 121/200 500/500 [==============================] - 0s 85us/step - loss: 0.3902 - accuracy: 0.8320 - val_loss: 0.4243 - val_accuracy: 0.8140 Epoch 122/200 500/500 [==============================] - 0s 80us/step - loss: 0.3951 - accuracy: 0.8260 - val_loss: 0.4146 - val_accuracy: 0.8160 Epoch 123/200 500/500 [==============================] - 0s 79us/step - loss: 0.3922 - accuracy: 0.8320 - val_loss: 0.4240 - val_accuracy: 0.8220 Epoch 124/200 500/500 [==============================] - 0s 87us/step - loss: 0.3991 - accuracy: 0.8160 - val_loss: 0.4141 - val_accuracy: 0.8260 Epoch 125/200 500/500 [==============================] - 0s 89us/step - loss: 0.3903 - accuracy: 0.8200 - val_loss: 0.4218 - val_accuracy: 0.8160 Epoch 126/200 500/500 [==============================] - 0s 91us/step - loss: 0.3894 - accuracy: 0.8340 - val_loss: 0.4260 - val_accuracy: 0.8220 Epoch 127/200 500/500 [==============================] - 0s 84us/step - loss: 0.4025 - accuracy: 0.8220 - val_loss: 0.4208 - val_accuracy: 0.8180 Epoch 128/200 500/500 [==============================] - 0s 85us/step - loss: 0.3986 - accuracy: 0.8200 - val_loss: 0.4205 - val_accuracy: 0.8260 Epoch 129/200 500/500 [==============================] - 0s 81us/step - loss: 0.4082 - accuracy: 0.8100 - val_loss: 0.4275 - val_accuracy: 0.8220 Epoch 130/200 500/500 [==============================] - 0s 91us/step - loss: 0.3891 - accuracy: 0.8400 - val_loss: 0.4248 - val_accuracy: 0.8200 Epoch 131/200 500/500 [==============================] - 0s 92us/step - loss: 0.3947 - accuracy: 0.8220 - val_loss: 0.4205 - val_accuracy: 0.8220 Epoch 132/200 500/500 [==============================] - 0s 84us/step - loss: 0.3880 - accuracy: 0.8380 - val_loss: 0.4308 - val_accuracy: 0.8180 Epoch 133/200 500/500 [==============================] - 0s 81us/step - loss: 0.3981 - accuracy: 0.8260 - val_loss: 0.4261 - val_accuracy: 0.8200 Epoch 134/200 500/500 [==============================] - 0s 78us/step - loss: 0.3942 - accuracy: 0.8180 - val_loss: 0.4285 - val_accuracy: 0.8180 Epoch 135/200 500/500 [==============================] - 0s 80us/step - loss: 0.4091 - accuracy: 0.8340 - val_loss: 0.4305 - val_accuracy: 0.8200 Epoch 136/200 500/500 [==============================] - 0s 77us/step - loss: 0.3923 - accuracy: 0.8240 - val_loss: 0.4209 - val_accuracy: 0.8160 Epoch 137/200 500/500 [==============================] - 0s 88us/step - loss: 0.3959 - accuracy: 0.8180 - val_loss: 0.4270 - val_accuracy: 0.8240 Epoch 138/200 500/500 [==============================] - 0s 86us/step - loss: 0.3933 - accuracy: 0.8320 - val_loss: 0.4208 - val_accuracy: 0.8220 Epoch 139/200 500/500 [==============================] - 0s 87us/step - loss: 0.4086 - accuracy: 0.8220 - val_loss: 0.4593 - val_accuracy: 0.8100 Epoch 140/200 500/500 [==============================] - 0s 80us/step - loss: 0.4140 - accuracy: 0.8180 - val_loss: 0.4230 - val_accuracy: 0.8200 Epoch 141/200 500/500 [==============================] - 0s 85us/step - loss: 0.3886 - accuracy: 0.8320 - val_loss: 0.4226 - val_accuracy: 0.8260 Epoch 142/200 500/500 [==============================] - 0s 85us/step - loss: 0.4047 - accuracy: 0.8300 - val_loss: 0.4904 - val_accuracy: 0.7840 Epoch 143/200 500/500 [==============================] - 0s 78us/step - loss: 0.4160 - accuracy: 0.8160 - val_loss: 0.4374 - val_accuracy: 0.8100 Epoch 144/200 500/500 [==============================] - 0s 88us/step - loss: 0.3885 - accuracy: 0.8280 - val_loss: 0.4177 - val_accuracy: 0.8280 Epoch 145/200 500/500 [==============================] - 0s 88us/step - loss: 0.4066 - accuracy: 0.8280 - val_loss: 0.4325 - val_accuracy: 0.8200 Epoch 146/200 500/500 [==============================] - 0s 86us/step - loss: 0.4021 - accuracy: 0.8160 - val_loss: 0.4118 - val_accuracy: 0.8240 Epoch 147/200 500/500 [==============================] - 0s 79us/step - loss: 0.3960 - accuracy: 0.8180 - val_loss: 0.4146 - val_accuracy: 0.8160 Epoch 148/200 500/500 [==============================] - 0s 91us/step - loss: 0.3943 - accuracy: 0.8240 - val_loss: 0.4370 - val_accuracy: 0.8100 Epoch 149/200 500/500 [==============================] - 0s 89us/step - loss: 0.3946 - accuracy: 0.8220 - val_loss: 0.4481 - val_accuracy: 0.8080 Epoch 150/200 500/500 [==============================] - 0s 79us/step - loss: 0.3871 - accuracy: 0.8260 - val_loss: 0.4324 - val_accuracy: 0.8180 Epoch 151/200 500/500 [==============================] - 0s 86us/step - loss: 0.3895 - accuracy: 0.8360 - val_loss: 0.4150 - val_accuracy: 0.8240 Epoch 152/200 500/500 [==============================] - 0s 85us/step - loss: 0.4045 - accuracy: 0.8200 - val_loss: 0.4251 - val_accuracy: 0.8300 Epoch 153/200 500/500 [==============================] - 0s 81us/step - loss: 0.3939 - accuracy: 0.8240 - val_loss: 0.4234 - val_accuracy: 0.8160 Epoch 154/200 500/500 [==============================] - 0s 85us/step - loss: 0.4001 - accuracy: 0.8140 - val_loss: 0.4298 - val_accuracy: 0.8140 Epoch 155/200 500/500 [==============================] - 0s 88us/step - loss: 0.3910 - accuracy: 0.8280 - val_loss: 0.4209 - val_accuracy: 0.8180 Epoch 156/200 500/500 [==============================] - 0s 82us/step - loss: 0.3911 - accuracy: 0.8180 - val_loss: 0.4158 - val_accuracy: 0.8260 Epoch 157/200 500/500 [==============================] - 0s 84us/step - loss: 0.3909 - accuracy: 0.8240 - val_loss: 0.4249 - val_accuracy: 0.8160 Epoch 158/200 500/500 [==============================] - 0s 85us/step - loss: 0.3978 - accuracy: 0.8260 - val_loss: 0.4376 - val_accuracy: 0.8140 Epoch 159/200 500/500 [==============================] - 0s 81us/step - loss: 0.4049 - accuracy: 0.8260 - val_loss: 0.4275 - val_accuracy: 0.8200 Epoch 160/200 500/500 [==============================] - 0s 85us/step - loss: 0.3861 - accuracy: 0.8260 - val_loss: 0.4530 - val_accuracy: 0.8100 Epoch 161/200 500/500 [==============================] - 0s 86us/step - loss: 0.3866 - accuracy: 0.8360 - val_loss: 0.4252 - val_accuracy: 0.8220 Epoch 162/200 500/500 [==============================] - 0s 84us/step - loss: 0.4008 - accuracy: 0.8220 - val_loss: 0.4262 - val_accuracy: 0.8200 Epoch 163/200 500/500 [==============================] - 0s 80us/step - loss: 0.3950 - accuracy: 0.8320 - val_loss: 0.4215 - val_accuracy: 0.8220 Epoch 164/200 500/500 [==============================] - 0s 84us/step - loss: 0.3967 - accuracy: 0.8160 - val_loss: 0.4193 - val_accuracy: 0.8140 Epoch 165/200 500/500 [==============================] - 0s 78us/step - loss: 0.3896 - accuracy: 0.8360 - val_loss: 0.4292 - val_accuracy: 0.8320 Epoch 166/200 500/500 [==============================] - 0s 85us/step - loss: 0.3954 - accuracy: 0.8180 - val_loss: 0.4231 - val_accuracy: 0.8260 Epoch 167/200 500/500 [==============================] - 0s 90us/step - loss: 0.3882 - accuracy: 0.8300 - val_loss: 0.4402 - val_accuracy: 0.8160 Epoch 168/200 500/500 [==============================] - 0s 85us/step - loss: 0.3969 - accuracy: 0.8300 - val_loss: 0.4297 - val_accuracy: 0.8240 Epoch 169/200 500/500 [==============================] - 0s 80us/step - loss: 0.3915 - accuracy: 0.8260 - val_loss: 0.4297 - val_accuracy: 0.8160 Epoch 170/200 500/500 [==============================] - 0s 91us/step - loss: 0.3863 - accuracy: 0.8240 - val_loss: 0.4207 - val_accuracy: 0.8260 Epoch 171/200 500/500 [==============================] - 0s 94us/step - loss: 0.3862 - accuracy: 0.8300 - val_loss: 0.4496 - val_accuracy: 0.8060 Epoch 172/200 500/500 [==============================] - 0s 86us/step - loss: 0.3984 - accuracy: 0.8300 - val_loss: 0.4250 - val_accuracy: 0.8120 Epoch 173/200 500/500 [==============================] - 0s 79us/step - loss: 0.4270 - accuracy: 0.8100 - val_loss: 0.4592 - val_accuracy: 0.8100 Epoch 174/200 500/500 [==============================] - 0s 77us/step - loss: 0.4164 - accuracy: 0.8260 - val_loss: 0.4254 - val_accuracy: 0.8180 Epoch 175/200 500/500 [==============================] - 0s 91us/step - loss: 0.4066 - accuracy: 0.8220 - val_loss: 0.4643 - val_accuracy: 0.7980 Epoch 176/200 500/500 [==============================] - 0s 81us/step - loss: 0.4043 - accuracy: 0.8180 - val_loss: 0.4455 - val_accuracy: 0.8160 Epoch 177/200 500/500 [==============================] - 0s 81us/step - loss: 0.3914 - accuracy: 0.8300 - val_loss: 0.4153 - val_accuracy: 0.8240 Epoch 178/200 500/500 [==============================] - 0s 85us/step - loss: 0.3888 - accuracy: 0.8280 - val_loss: 0.4241 - val_accuracy: 0.8240 Epoch 179/200 500/500 [==============================] - 0s 79us/step - loss: 0.3908 - accuracy: 0.8240 - val_loss: 0.4277 - val_accuracy: 0.8240 Epoch 180/200 500/500 [==============================] - 0s 89us/step - loss: 0.3913 - accuracy: 0.8400 - val_loss: 0.4262 - val_accuracy: 0.8200 Epoch 181/200 500/500 [==============================] - 0s 107us/step - loss: 0.3827 - accuracy: 0.8360 - val_loss: 0.4290 - val_accuracy: 0.8260 Epoch 182/200 500/500 [==============================] - 0s 122us/step - loss: 0.3926 - accuracy: 0.8420 - val_loss: 0.4438 - val_accuracy: 0.8240 Epoch 183/200 500/500 [==============================] - 0s 127us/step - loss: 0.3854 - accuracy: 0.8260 - val_loss: 0.4263 - val_accuracy: 0.8200 Epoch 184/200 500/500 [==============================] - 0s 129us/step - loss: 0.4121 - accuracy: 0.8240 - val_loss: 0.4258 - val_accuracy: 0.8200 Epoch 185/200 500/500 [==============================] - 0s 130us/step - loss: 0.3851 - accuracy: 0.8260 - val_loss: 0.4240 - val_accuracy: 0.8320 Epoch 186/200 500/500 [==============================] - 0s 107us/step - loss: 0.3977 - accuracy: 0.8400 - val_loss: 0.4286 - val_accuracy: 0.8160 Epoch 187/200 500/500 [==============================] - 0s 92us/step - loss: 0.3884 - accuracy: 0.8140 - val_loss: 0.4687 - val_accuracy: 0.7940 Epoch 188/200 500/500 [==============================] - 0s 82us/step - loss: 0.4149 - accuracy: 0.8120 - val_loss: 0.4344 - val_accuracy: 0.8220 Epoch 189/200 500/500 [==============================] - 0s 83us/step - loss: 0.3932 - accuracy: 0.8340 - val_loss: 0.4211 - val_accuracy: 0.8280 Epoch 190/200 500/500 [==============================] - 0s 81us/step - loss: 0.3963 - accuracy: 0.8360 - val_loss: 0.4428 - val_accuracy: 0.8240 Epoch 191/200 500/500 [==============================] - 0s 116us/step - loss: 0.3968 - accuracy: 0.8200 - val_loss: 0.4353 - val_accuracy: 0.8080 Epoch 192/200 500/500 [==============================] - 0s 137us/step - loss: 0.3929 - accuracy: 0.8260 - val_loss: 0.4235 - val_accuracy: 0.8160 Epoch 193/200 500/500 [==============================] - 0s 101us/step - loss: 0.3819 - accuracy: 0.8380 - val_loss: 0.4221 - val_accuracy: 0.8220 Epoch 194/200 500/500 [==============================] - 0s 118us/step - loss: 0.3879 - accuracy: 0.8280 - val_loss: 0.4203 - val_accuracy: 0.8160 Epoch 195/200 500/500 [==============================] - 0s 105us/step - loss: 0.3903 - accuracy: 0.8240 - val_loss: 0.4249 - val_accuracy: 0.8180 Epoch 196/200 500/500 [==============================] - 0s 93us/step - loss: 0.3887 - accuracy: 0.8220 - val_loss: 0.4250 - val_accuracy: 0.8160 Epoch 197/200 500/500 [==============================] - 0s 125us/step - loss: 0.3833 - accuracy: 0.8260 - val_loss: 0.4328 - val_accuracy: 0.8100 Epoch 198/200 500/500 [==============================] - 0s 126us/step - loss: 0.3907 - accuracy: 0.8260 - val_loss: 0.4211 - val_accuracy: 0.8200 Epoch 199/200 500/500 [==============================] - 0s 124us/step - loss: 0.3902 - accuracy: 0.8120 - val_loss: 0.4347 - val_accuracy: 0.8180 Epoch 200/200 500/500 [==============================] - 0s 128us/step - loss: 0.3864 - accuracy: 0.8340 - val_loss: 0.4390 - val_accuracy: 0.8260 . model.metrics_names . [&#39;loss&#39;, &#39;accuracy&#39;] . #res_train = model.evaluate(trainX,trainy) #res_test = model.evaluate(testX, testy) #print(&#39;Train acc:{:.4f} Test acc:{:.4f}&#39;.format(res_train[1], res_test[1])) . 500/500 [==============================] - 0s 42us/step 500/500 [==============================] - 0s 33us/step Train acc:0.8320 Test acc:0.8260 . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;val_accuracy&#39;, &#39;loss&#39;, &#39;accuracy&#39;]) . #collapse-hide fig=plt.figure(figsize=(8,2)) plt.subplot(121) plt.title(&quot;LOSS&quot;) plt.plot(h.history[&#39;loss&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test&#39;) plt.legend() plt.subplot(122) plt.title(&quot;ACCURACY&quot;) plt.plot(h.history[&#39;accuracy&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_accuracy&#39;], label=&#39;test&#39;) plt.legend() plt.show() . . Sparse multi-class cross-entropy . from keras.utils import to_categorical X,y = make_blobs(n_samples=1000, centers=3, n_features=2, cluster_std=2, random_state=2) #y = to_categorical(y) NO ONEHOT ENCODING FOR SPARSE n_train=500 trainX,testX = X[:n_train,:],X[n_train:,:] trainy,testy=y[:n_train],y[n_train:] print(trainy.shape) print(y[:5]) . (500,) [2 2 2 0 1] . model = Sequential() model.add(Dense(50, input_dim=2, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(3, activation=&#39;softmax&#39;)) opt=SGD(lr=0.01, momentum=0.9) #model.compile(loss=&#39;categorical_crossentropy&#39;, optimizer=opt, metrics=[&#39;accuracy&#39;]) model.compile(loss=&#39;sparse_categorical_crossentropy&#39;, optimizer=opt, metrics=[&#39;accuracy&#39;], ) h = model.fit(trainX,trainy,validation_data=(testX,testy), epochs=200, verbose=1) #res_train = model.evaluate(trainX,trainy) #res_test = model.evaluate(testX, testy) #print(&#39;Train acc:{:.4f} Test acc:{:.4f}&#39;.format(res_train[1], res_test[1])) . (500,) [2 2 2 0 1] Train on 500 samples, validate on 500 samples Epoch 1/200 500/500 [==============================] - 0s 705us/step - loss: 2.2811 - accuracy: 0.4880 - val_loss: 1.7288 - val_accuracy: 0.5140 Epoch 2/200 500/500 [==============================] - 0s 79us/step - loss: 1.3664 - accuracy: 0.5560 - val_loss: 1.0118 - val_accuracy: 0.6620 Epoch 3/200 500/500 [==============================] - 0s 105us/step - loss: 1.0256 - accuracy: 0.6300 - val_loss: 0.7930 - val_accuracy: 0.7000 Epoch 4/200 500/500 [==============================] - 0s 98us/step - loss: 0.7563 - accuracy: 0.6840 - val_loss: 0.6401 - val_accuracy: 0.7020 Epoch 5/200 500/500 [==============================] - 0s 109us/step - loss: 0.6075 - accuracy: 0.7400 - val_loss: 0.5677 - val_accuracy: 0.7600 Epoch 6/200 500/500 [==============================] - 0s 109us/step - loss: 0.7119 - accuracy: 0.6580 - val_loss: 0.5961 - val_accuracy: 0.7840 Epoch 7/200 500/500 [==============================] - 0s 109us/step - loss: 0.5912 - accuracy: 0.7600 - val_loss: 0.5029 - val_accuracy: 0.7740 Epoch 8/200 500/500 [==============================] - 0s 105us/step - loss: 0.5683 - accuracy: 0.7500 - val_loss: 0.5202 - val_accuracy: 0.8120 Epoch 9/200 500/500 [==============================] - 0s 110us/step - loss: 0.5332 - accuracy: 0.7780 - val_loss: 0.4758 - val_accuracy: 0.8140 Epoch 10/200 500/500 [==============================] - 0s 96us/step - loss: 0.5048 - accuracy: 0.7840 - val_loss: 0.4808 - val_accuracy: 0.7880 Epoch 11/200 500/500 [==============================] - 0s 109us/step - loss: 0.5072 - accuracy: 0.7960 - val_loss: 0.4648 - val_accuracy: 0.8360 Epoch 12/200 500/500 [==============================] - 0s 103us/step - loss: 0.4865 - accuracy: 0.7960 - val_loss: 0.4410 - val_accuracy: 0.8320 Epoch 13/200 500/500 [==============================] - 0s 110us/step - loss: 0.5019 - accuracy: 0.7900 - val_loss: 0.4619 - val_accuracy: 0.8340 Epoch 14/200 500/500 [==============================] - 0s 101us/step - loss: 0.5257 - accuracy: 0.7660 - val_loss: 0.4960 - val_accuracy: 0.8080 Epoch 15/200 500/500 [==============================] - 0s 102us/step - loss: 0.5558 - accuracy: 0.7580 - val_loss: 0.9737 - val_accuracy: 0.5920 Epoch 16/200 500/500 [==============================] - 0s 92us/step - loss: 0.5665 - accuracy: 0.7480 - val_loss: 0.4243 - val_accuracy: 0.8320 Epoch 17/200 500/500 [==============================] - 0s 96us/step - loss: 0.4871 - accuracy: 0.7980 - val_loss: 0.4499 - val_accuracy: 0.8200 Epoch 18/200 500/500 [==============================] - 0s 100us/step - loss: 0.5819 - accuracy: 0.7300 - val_loss: 0.4354 - val_accuracy: 0.8340 Epoch 19/200 500/500 [==============================] - 0s 99us/step - loss: 0.5330 - accuracy: 0.7820 - val_loss: 0.4992 - val_accuracy: 0.7660 Epoch 20/200 500/500 [==============================] - 0s 104us/step - loss: 0.4851 - accuracy: 0.7980 - val_loss: 0.5530 - val_accuracy: 0.7980 Epoch 21/200 500/500 [==============================] - 0s 102us/step - loss: 0.5373 - accuracy: 0.7760 - val_loss: 0.4501 - val_accuracy: 0.8200 Epoch 22/200 500/500 [==============================] - 0s 94us/step - loss: 0.4412 - accuracy: 0.8080 - val_loss: 0.4386 - val_accuracy: 0.8220 Epoch 23/200 500/500 [==============================] - 0s 103us/step - loss: 0.4506 - accuracy: 0.8180 - val_loss: 0.4193 - val_accuracy: 0.8300 Epoch 24/200 500/500 [==============================] - 0s 107us/step - loss: 0.4306 - accuracy: 0.8140 - val_loss: 0.4344 - val_accuracy: 0.8160 Epoch 25/200 500/500 [==============================] - 0s 102us/step - loss: 0.4420 - accuracy: 0.8080 - val_loss: 0.4159 - val_accuracy: 0.8220 Epoch 26/200 500/500 [==============================] - 0s 108us/step - loss: 0.4407 - accuracy: 0.8300 - val_loss: 0.4087 - val_accuracy: 0.8340 Epoch 27/200 500/500 [==============================] - 0s 97us/step - loss: 0.4144 - accuracy: 0.8280 - val_loss: 0.4167 - val_accuracy: 0.8260 Epoch 28/200 500/500 [==============================] - 0s 105us/step - loss: 0.4229 - accuracy: 0.8140 - val_loss: 0.4378 - val_accuracy: 0.8100 Epoch 29/200 500/500 [==============================] - 0s 102us/step - loss: 0.4236 - accuracy: 0.8100 - val_loss: 0.4588 - val_accuracy: 0.8220 Epoch 30/200 500/500 [==============================] - 0s 101us/step - loss: 0.4317 - accuracy: 0.8080 - val_loss: 0.4455 - val_accuracy: 0.8140 Epoch 31/200 500/500 [==============================] - 0s 101us/step - loss: 0.4371 - accuracy: 0.8100 - val_loss: 0.4094 - val_accuracy: 0.8360 Epoch 32/200 500/500 [==============================] - 0s 99us/step - loss: 0.4400 - accuracy: 0.8180 - val_loss: 0.4105 - val_accuracy: 0.8280 Epoch 33/200 500/500 [==============================] - 0s 93us/step - loss: 0.4286 - accuracy: 0.8160 - val_loss: 0.4130 - val_accuracy: 0.8320 Epoch 34/200 500/500 [==============================] - 0s 97us/step - loss: 0.4231 - accuracy: 0.8140 - val_loss: 0.4589 - val_accuracy: 0.8080 Epoch 35/200 500/500 [==============================] - 0s 98us/step - loss: 0.4435 - accuracy: 0.8220 - val_loss: 0.4085 - val_accuracy: 0.8320 Epoch 36/200 500/500 [==============================] - 0s 102us/step - loss: 0.4417 - accuracy: 0.8240 - val_loss: 0.4338 - val_accuracy: 0.8140 Epoch 37/200 500/500 [==============================] - 0s 105us/step - loss: 0.4261 - accuracy: 0.8180 - val_loss: 0.5756 - val_accuracy: 0.7540 Epoch 38/200 500/500 [==============================] - 0s 105us/step - loss: 0.4467 - accuracy: 0.8100 - val_loss: 0.4114 - val_accuracy: 0.8260 Epoch 39/200 500/500 [==============================] - 0s 96us/step - loss: 0.4425 - accuracy: 0.8120 - val_loss: 0.4314 - val_accuracy: 0.8240 Epoch 40/200 500/500 [==============================] - 0s 96us/step - loss: 0.4268 - accuracy: 0.8160 - val_loss: 0.4083 - val_accuracy: 0.8280 Epoch 41/200 500/500 [==============================] - 0s 95us/step - loss: 0.4064 - accuracy: 0.8260 - val_loss: 0.4111 - val_accuracy: 0.8240 Epoch 42/200 500/500 [==============================] - 0s 95us/step - loss: 0.4059 - accuracy: 0.8180 - val_loss: 0.4212 - val_accuracy: 0.8180 Epoch 43/200 500/500 [==============================] - 0s 86us/step - loss: 0.4057 - accuracy: 0.8320 - val_loss: 0.4119 - val_accuracy: 0.8340 Epoch 44/200 500/500 [==============================] - 0s 90us/step - loss: 0.4287 - accuracy: 0.8280 - val_loss: 0.4196 - val_accuracy: 0.8300 Epoch 45/200 500/500 [==============================] - 0s 95us/step - loss: 0.4154 - accuracy: 0.8140 - val_loss: 0.4154 - val_accuracy: 0.8240 Epoch 46/200 500/500 [==============================] - 0s 96us/step - loss: 0.4203 - accuracy: 0.8220 - val_loss: 0.4134 - val_accuracy: 0.8300 Epoch 47/200 500/500 [==============================] - 0s 97us/step - loss: 0.4393 - accuracy: 0.8200 - val_loss: 0.5880 - val_accuracy: 0.7360 Epoch 48/200 500/500 [==============================] - 0s 96us/step - loss: 0.4321 - accuracy: 0.8120 - val_loss: 0.5589 - val_accuracy: 0.7700 Epoch 49/200 500/500 [==============================] - 0s 95us/step - loss: 0.4513 - accuracy: 0.8040 - val_loss: 0.4041 - val_accuracy: 0.8300 Epoch 50/200 500/500 [==============================] - 0s 87us/step - loss: 0.4057 - accuracy: 0.8360 - val_loss: 0.4206 - val_accuracy: 0.8280 Epoch 51/200 500/500 [==============================] - 0s 91us/step - loss: 0.4087 - accuracy: 0.8240 - val_loss: 0.4252 - val_accuracy: 0.8280 Epoch 52/200 500/500 [==============================] - 0s 99us/step - loss: 0.4276 - accuracy: 0.8280 - val_loss: 0.4161 - val_accuracy: 0.8220 Epoch 53/200 500/500 [==============================] - 0s 111us/step - loss: 0.4647 - accuracy: 0.7880 - val_loss: 0.4254 - val_accuracy: 0.8200 Epoch 54/200 500/500 [==============================] - 0s 100us/step - loss: 0.4334 - accuracy: 0.8200 - val_loss: 0.4145 - val_accuracy: 0.8160 Epoch 55/200 500/500 [==============================] - 0s 90us/step - loss: 0.4154 - accuracy: 0.8220 - val_loss: 0.4153 - val_accuracy: 0.8200 Epoch 56/200 500/500 [==============================] - 0s 102us/step - loss: 0.4017 - accuracy: 0.8300 - val_loss: 0.4156 - val_accuracy: 0.8200 Epoch 57/200 500/500 [==============================] - 0s 92us/step - loss: 0.3954 - accuracy: 0.8320 - val_loss: 0.4156 - val_accuracy: 0.8280 Epoch 58/200 500/500 [==============================] - 0s 88us/step - loss: 0.3968 - accuracy: 0.8240 - val_loss: 0.4117 - val_accuracy: 0.8200 Epoch 59/200 500/500 [==============================] - 0s 93us/step - loss: 0.4014 - accuracy: 0.8280 - val_loss: 0.4219 - val_accuracy: 0.8200 Epoch 60/200 500/500 [==============================] - 0s 85us/step - loss: 0.4250 - accuracy: 0.8200 - val_loss: 0.4292 - val_accuracy: 0.8200 Epoch 61/200 500/500 [==============================] - 0s 82us/step - loss: 0.4144 - accuracy: 0.8200 - val_loss: 0.4218 - val_accuracy: 0.8320 Epoch 62/200 500/500 [==============================] - 0s 83us/step - loss: 0.4157 - accuracy: 0.8220 - val_loss: 0.4191 - val_accuracy: 0.8240 Epoch 63/200 500/500 [==============================] - 0s 94us/step - loss: 0.4244 - accuracy: 0.8140 - val_loss: 0.4214 - val_accuracy: 0.8240 Epoch 64/200 500/500 [==============================] - 0s 83us/step - loss: 0.4052 - accuracy: 0.8280 - val_loss: 0.4410 - val_accuracy: 0.8120 Epoch 65/200 500/500 [==============================] - 0s 86us/step - loss: 0.4069 - accuracy: 0.8240 - val_loss: 0.4610 - val_accuracy: 0.8100 Epoch 66/200 500/500 [==============================] - 0s 86us/step - loss: 0.4135 - accuracy: 0.8280 - val_loss: 0.4247 - val_accuracy: 0.8240 Epoch 67/200 500/500 [==============================] - 0s 88us/step - loss: 0.4380 - accuracy: 0.8060 - val_loss: 0.4313 - val_accuracy: 0.8300 Epoch 68/200 500/500 [==============================] - 0s 83us/step - loss: 0.4728 - accuracy: 0.7980 - val_loss: 0.4268 - val_accuracy: 0.8280 Epoch 69/200 500/500 [==============================] - 0s 79us/step - loss: 0.4176 - accuracy: 0.8080 - val_loss: 0.4315 - val_accuracy: 0.8220 Epoch 70/200 500/500 [==============================] - 0s 89us/step - loss: 0.4266 - accuracy: 0.8140 - val_loss: 0.4208 - val_accuracy: 0.8320 Epoch 71/200 500/500 [==============================] - 0s 87us/step - loss: 0.4152 - accuracy: 0.8260 - val_loss: 0.4273 - val_accuracy: 0.8140 Epoch 72/200 500/500 [==============================] - 0s 102us/step - loss: 0.3976 - accuracy: 0.8160 - val_loss: 0.4314 - val_accuracy: 0.8180 Epoch 73/200 500/500 [==============================] - 0s 118us/step - loss: 0.3957 - accuracy: 0.8220 - val_loss: 0.4686 - val_accuracy: 0.7980 Epoch 74/200 500/500 [==============================] - 0s 91us/step - loss: 0.4173 - accuracy: 0.8200 - val_loss: 0.4095 - val_accuracy: 0.8220 Epoch 75/200 500/500 [==============================] - 0s 97us/step - loss: 0.4063 - accuracy: 0.8160 - val_loss: 0.4187 - val_accuracy: 0.8200 Epoch 76/200 500/500 [==============================] - 0s 131us/step - loss: 0.4003 - accuracy: 0.8140 - val_loss: 0.4334 - val_accuracy: 0.8160 Epoch 77/200 500/500 [==============================] - 0s 131us/step - loss: 0.3993 - accuracy: 0.8200 - val_loss: 0.4291 - val_accuracy: 0.8220 Epoch 78/200 500/500 [==============================] - 0s 133us/step - loss: 0.4030 - accuracy: 0.8140 - val_loss: 0.4149 - val_accuracy: 0.8220 Epoch 79/200 500/500 [==============================] - 0s 118us/step - loss: 0.3978 - accuracy: 0.8260 - val_loss: 0.4184 - val_accuracy: 0.8180 Epoch 80/200 500/500 [==============================] - 0s 87us/step - loss: 0.4408 - accuracy: 0.8080 - val_loss: 0.4159 - val_accuracy: 0.8300 Epoch 81/200 500/500 [==============================] - 0s 85us/step - loss: 0.4182 - accuracy: 0.8180 - val_loss: 0.4201 - val_accuracy: 0.8200 Epoch 82/200 500/500 [==============================] - 0s 80us/step - loss: 0.3888 - accuracy: 0.8340 - val_loss: 0.4121 - val_accuracy: 0.8300 Epoch 83/200 500/500 [==============================] - 0s 82us/step - loss: 0.3947 - accuracy: 0.8360 - val_loss: 0.4362 - val_accuracy: 0.8180 Epoch 84/200 500/500 [==============================] - 0s 85us/step - loss: 0.3977 - accuracy: 0.8180 - val_loss: 0.4358 - val_accuracy: 0.8260 Epoch 85/200 500/500 [==============================] - 0s 79us/step - loss: 0.3903 - accuracy: 0.8360 - val_loss: 0.4208 - val_accuracy: 0.8180 Epoch 86/200 500/500 [==============================] - 0s 80us/step - loss: 0.3880 - accuracy: 0.8300 - val_loss: 0.4176 - val_accuracy: 0.8260 Epoch 87/200 500/500 [==============================] - 0s 85us/step - loss: 0.3910 - accuracy: 0.8280 - val_loss: 0.4240 - val_accuracy: 0.8160 Epoch 88/200 500/500 [==============================] - 0s 87us/step - loss: 0.4099 - accuracy: 0.8240 - val_loss: 0.4165 - val_accuracy: 0.8260 Epoch 89/200 500/500 [==============================] - 0s 87us/step - loss: 0.4102 - accuracy: 0.8200 - val_loss: 0.4360 - val_accuracy: 0.8240 Epoch 90/200 500/500 [==============================] - 0s 84us/step - loss: 0.3964 - accuracy: 0.8220 - val_loss: 0.4269 - val_accuracy: 0.8180 Epoch 91/200 500/500 [==============================] - 0s 83us/step - loss: 0.3855 - accuracy: 0.8300 - val_loss: 0.4317 - val_accuracy: 0.8200 Epoch 92/200 500/500 [==============================] - 0s 87us/step - loss: 0.3894 - accuracy: 0.8280 - val_loss: 0.4152 - val_accuracy: 0.8200 Epoch 93/200 500/500 [==============================] - 0s 87us/step - loss: 0.3978 - accuracy: 0.8220 - val_loss: 0.4157 - val_accuracy: 0.8320 Epoch 94/200 500/500 [==============================] - 0s 84us/step - loss: 0.4091 - accuracy: 0.8120 - val_loss: 0.4301 - val_accuracy: 0.8300 Epoch 95/200 500/500 [==============================] - 0s 90us/step - loss: 0.4056 - accuracy: 0.8260 - val_loss: 0.4160 - val_accuracy: 0.8240 Epoch 96/200 500/500 [==============================] - 0s 88us/step - loss: 0.4013 - accuracy: 0.8200 - val_loss: 0.4252 - val_accuracy: 0.8140 Epoch 97/200 500/500 [==============================] - 0s 84us/step - loss: 0.4241 - accuracy: 0.8140 - val_loss: 0.4597 - val_accuracy: 0.7980 Epoch 98/200 500/500 [==============================] - 0s 85us/step - loss: 0.4209 - accuracy: 0.8160 - val_loss: 0.4219 - val_accuracy: 0.8180 Epoch 99/200 500/500 [==============================] - 0s 83us/step - loss: 0.4007 - accuracy: 0.8240 - val_loss: 0.4556 - val_accuracy: 0.8060 Epoch 100/200 500/500 [==============================] - 0s 80us/step - loss: 0.3948 - accuracy: 0.8300 - val_loss: 0.4297 - val_accuracy: 0.8160 Epoch 101/200 500/500 [==============================] - 0s 83us/step - loss: 0.3899 - accuracy: 0.8280 - val_loss: 0.4776 - val_accuracy: 0.7940 Epoch 102/200 500/500 [==============================] - 0s 83us/step - loss: 0.3942 - accuracy: 0.8180 - val_loss: 0.4161 - val_accuracy: 0.8160 Epoch 103/200 500/500 [==============================] - 0s 86us/step - loss: 0.3946 - accuracy: 0.8180 - val_loss: 0.4194 - val_accuracy: 0.8180 Epoch 104/200 500/500 [==============================] - 0s 84us/step - loss: 0.3877 - accuracy: 0.8280 - val_loss: 0.4263 - val_accuracy: 0.8160 Epoch 105/200 500/500 [==============================] - 0s 84us/step - loss: 0.3984 - accuracy: 0.8180 - val_loss: 0.4241 - val_accuracy: 0.8200 Epoch 106/200 500/500 [==============================] - 0s 84us/step - loss: 0.4386 - accuracy: 0.7940 - val_loss: 0.4273 - val_accuracy: 0.8200 Epoch 107/200 500/500 [==============================] - 0s 84us/step - loss: 0.4263 - accuracy: 0.8160 - val_loss: 0.4212 - val_accuracy: 0.8200 Epoch 108/200 500/500 [==============================] - 0s 83us/step - loss: 0.4285 - accuracy: 0.8040 - val_loss: 0.4371 - val_accuracy: 0.8160 Epoch 109/200 500/500 [==============================] - 0s 86us/step - loss: 0.4228 - accuracy: 0.8280 - val_loss: 0.4454 - val_accuracy: 0.8220 Epoch 110/200 500/500 [==============================] - 0s 84us/step - loss: 0.4247 - accuracy: 0.8240 - val_loss: 0.4234 - val_accuracy: 0.8180 Epoch 111/200 500/500 [==============================] - 0s 85us/step - loss: 0.3921 - accuracy: 0.8360 - val_loss: 0.4241 - val_accuracy: 0.8140 Epoch 112/200 500/500 [==============================] - 0s 82us/step - loss: 0.3952 - accuracy: 0.8260 - val_loss: 0.4202 - val_accuracy: 0.8280 Epoch 113/200 500/500 [==============================] - 0s 85us/step - loss: 0.3960 - accuracy: 0.8200 - val_loss: 0.4311 - val_accuracy: 0.8280 Epoch 114/200 500/500 [==============================] - 0s 85us/step - loss: 0.4020 - accuracy: 0.8180 - val_loss: 0.4246 - val_accuracy: 0.8180 Epoch 115/200 500/500 [==============================] - 0s 85us/step - loss: 0.3964 - accuracy: 0.8240 - val_loss: 0.4424 - val_accuracy: 0.8080 Epoch 116/200 500/500 [==============================] - 0s 84us/step - loss: 0.3972 - accuracy: 0.8260 - val_loss: 0.4287 - val_accuracy: 0.8220 Epoch 117/200 500/500 [==============================] - 0s 89us/step - loss: 0.4035 - accuracy: 0.8080 - val_loss: 0.4255 - val_accuracy: 0.8240 Epoch 118/200 500/500 [==============================] - 0s 82us/step - loss: 0.3892 - accuracy: 0.8400 - val_loss: 0.4287 - val_accuracy: 0.8220 Epoch 119/200 500/500 [==============================] - 0s 86us/step - loss: 0.3921 - accuracy: 0.8280 - val_loss: 0.4261 - val_accuracy: 0.8260 Epoch 120/200 500/500 [==============================] - 0s 88us/step - loss: 0.3954 - accuracy: 0.8240 - val_loss: 0.4359 - val_accuracy: 0.8120 Epoch 121/200 500/500 [==============================] - 0s 86us/step - loss: 0.3917 - accuracy: 0.8320 - val_loss: 0.4401 - val_accuracy: 0.8140 Epoch 122/200 500/500 [==============================] - 0s 81us/step - loss: 0.3874 - accuracy: 0.8260 - val_loss: 0.4225 - val_accuracy: 0.8260 Epoch 123/200 500/500 [==============================] - 0s 86us/step - loss: 0.3945 - accuracy: 0.8420 - val_loss: 0.4526 - val_accuracy: 0.8180 Epoch 124/200 500/500 [==============================] - 0s 85us/step - loss: 0.3945 - accuracy: 0.8300 - val_loss: 0.4387 - val_accuracy: 0.8220 Epoch 125/200 500/500 [==============================] - 0s 83us/step - loss: 0.3922 - accuracy: 0.8260 - val_loss: 0.4231 - val_accuracy: 0.8140 Epoch 126/200 500/500 [==============================] - 0s 82us/step - loss: 0.3926 - accuracy: 0.8240 - val_loss: 0.4295 - val_accuracy: 0.8260 Epoch 127/200 500/500 [==============================] - 0s 83us/step - loss: 0.3904 - accuracy: 0.8300 - val_loss: 0.4290 - val_accuracy: 0.8220 Epoch 128/200 500/500 [==============================] - 0s 83us/step - loss: 0.3878 - accuracy: 0.8220 - val_loss: 0.4319 - val_accuracy: 0.8160 Epoch 129/200 500/500 [==============================] - 0s 85us/step - loss: 0.3852 - accuracy: 0.8280 - val_loss: 0.4384 - val_accuracy: 0.8220 Epoch 130/200 500/500 [==============================] - 0s 83us/step - loss: 0.3943 - accuracy: 0.8220 - val_loss: 0.4211 - val_accuracy: 0.8160 Epoch 131/200 500/500 [==============================] - 0s 80us/step - loss: 0.3827 - accuracy: 0.8380 - val_loss: 0.4218 - val_accuracy: 0.8200 Epoch 132/200 500/500 [==============================] - 0s 87us/step - loss: 0.3888 - accuracy: 0.8180 - val_loss: 0.4205 - val_accuracy: 0.8200 Epoch 133/200 500/500 [==============================] - 0s 92us/step - loss: 0.3870 - accuracy: 0.8220 - val_loss: 0.4233 - val_accuracy: 0.8160 Epoch 134/200 500/500 [==============================] - 0s 91us/step - loss: 0.3909 - accuracy: 0.8280 - val_loss: 0.4557 - val_accuracy: 0.8060 Epoch 135/200 500/500 [==============================] - 0s 97us/step - loss: 0.4136 - accuracy: 0.8060 - val_loss: 0.4200 - val_accuracy: 0.8240 Epoch 136/200 500/500 [==============================] - 0s 103us/step - loss: 0.3959 - accuracy: 0.8200 - val_loss: 0.4238 - val_accuracy: 0.8160 Epoch 137/200 500/500 [==============================] - 0s 80us/step - loss: 0.4104 - accuracy: 0.8320 - val_loss: 0.4385 - val_accuracy: 0.8180 Epoch 138/200 500/500 [==============================] - 0s 85us/step - loss: 0.4081 - accuracy: 0.8180 - val_loss: 0.4472 - val_accuracy: 0.8080 Epoch 139/200 500/500 [==============================] - 0s 90us/step - loss: 0.3881 - accuracy: 0.8220 - val_loss: 0.4422 - val_accuracy: 0.8140 Epoch 140/200 500/500 [==============================] - 0s 89us/step - loss: 0.3917 - accuracy: 0.8340 - val_loss: 0.4631 - val_accuracy: 0.7980 Epoch 141/200 500/500 [==============================] - 0s 87us/step - loss: 0.3939 - accuracy: 0.8200 - val_loss: 0.4153 - val_accuracy: 0.8200 Epoch 142/200 500/500 [==============================] - 0s 91us/step - loss: 0.3880 - accuracy: 0.8320 - val_loss: 0.4257 - val_accuracy: 0.8240 Epoch 143/200 500/500 [==============================] - 0s 83us/step - loss: 0.3969 - accuracy: 0.8320 - val_loss: 0.4251 - val_accuracy: 0.8240 Epoch 144/200 500/500 [==============================] - 0s 86us/step - loss: 0.4041 - accuracy: 0.8140 - val_loss: 0.4172 - val_accuracy: 0.8180 Epoch 145/200 500/500 [==============================] - 0s 89us/step - loss: 0.4077 - accuracy: 0.8180 - val_loss: 0.4383 - val_accuracy: 0.8180 Epoch 146/200 500/500 [==============================] - 0s 88us/step - loss: 0.3877 - accuracy: 0.8300 - val_loss: 0.4211 - val_accuracy: 0.8260 Epoch 147/200 500/500 [==============================] - 0s 80us/step - loss: 0.4027 - accuracy: 0.8240 - val_loss: 0.4282 - val_accuracy: 0.8180 Epoch 148/200 500/500 [==============================] - 0s 87us/step - loss: 0.3834 - accuracy: 0.8260 - val_loss: 0.4343 - val_accuracy: 0.8180 Epoch 149/200 500/500 [==============================] - 0s 92us/step - loss: 0.3846 - accuracy: 0.8340 - val_loss: 0.4345 - val_accuracy: 0.8120 Epoch 150/200 500/500 [==============================] - 0s 95us/step - loss: 0.3844 - accuracy: 0.8320 - val_loss: 0.4291 - val_accuracy: 0.8240 Epoch 151/200 500/500 [==============================] - 0s 83us/step - loss: 0.3916 - accuracy: 0.8240 - val_loss: 0.4363 - val_accuracy: 0.8220 Epoch 152/200 500/500 [==============================] - 0s 86us/step - loss: 0.4172 - accuracy: 0.8140 - val_loss: 0.4233 - val_accuracy: 0.8240 Epoch 153/200 500/500 [==============================] - 0s 83us/step - loss: 0.4009 - accuracy: 0.8060 - val_loss: 0.4300 - val_accuracy: 0.8140 Epoch 154/200 500/500 [==============================] - 0s 89us/step - loss: 0.3891 - accuracy: 0.8300 - val_loss: 0.4321 - val_accuracy: 0.8180 Epoch 155/200 500/500 [==============================] - 0s 91us/step - loss: 0.3825 - accuracy: 0.8240 - val_loss: 0.4193 - val_accuracy: 0.8160 Epoch 156/200 500/500 [==============================] - 0s 101us/step - loss: 0.3943 - accuracy: 0.8180 - val_loss: 0.4374 - val_accuracy: 0.8160 Epoch 157/200 500/500 [==============================] - 0s 110us/step - loss: 0.3919 - accuracy: 0.8380 - val_loss: 0.4249 - val_accuracy: 0.8220 Epoch 158/200 500/500 [==============================] - 0s 108us/step - loss: 0.3973 - accuracy: 0.8160 - val_loss: 0.4198 - val_accuracy: 0.8220 Epoch 159/200 500/500 [==============================] - 0s 97us/step - loss: 0.3897 - accuracy: 0.8240 - val_loss: 0.4400 - val_accuracy: 0.8180 Epoch 160/200 500/500 [==============================] - 0s 98us/step - loss: 0.3918 - accuracy: 0.8320 - val_loss: 0.4157 - val_accuracy: 0.8280 Epoch 161/200 500/500 [==============================] - 0s 100us/step - loss: 0.4016 - accuracy: 0.8160 - val_loss: 0.4284 - val_accuracy: 0.8280 Epoch 162/200 500/500 [==============================] - 0s 92us/step - loss: 0.4005 - accuracy: 0.8220 - val_loss: 0.4305 - val_accuracy: 0.8240 Epoch 163/200 500/500 [==============================] - 0s 95us/step - loss: 0.3939 - accuracy: 0.8240 - val_loss: 0.4229 - val_accuracy: 0.8200 Epoch 164/200 500/500 [==============================] - 0s 96us/step - loss: 0.3901 - accuracy: 0.8240 - val_loss: 0.4179 - val_accuracy: 0.8260 Epoch 165/200 500/500 [==============================] - 0s 98us/step - loss: 0.3927 - accuracy: 0.8300 - val_loss: 0.4241 - val_accuracy: 0.8340 Epoch 166/200 500/500 [==============================] - 0s 99us/step - loss: 0.3949 - accuracy: 0.8200 - val_loss: 0.4204 - val_accuracy: 0.8220 Epoch 167/200 500/500 [==============================] - 0s 96us/step - loss: 0.3802 - accuracy: 0.8200 - val_loss: 0.4187 - val_accuracy: 0.8220 Epoch 168/200 500/500 [==============================] - 0s 82us/step - loss: 0.3875 - accuracy: 0.8260 - val_loss: 0.4310 - val_accuracy: 0.8200 Epoch 169/200 500/500 [==============================] - 0s 86us/step - loss: 0.3873 - accuracy: 0.8200 - val_loss: 0.4308 - val_accuracy: 0.8240 Epoch 170/200 500/500 [==============================] - 0s 89us/step - loss: 0.3925 - accuracy: 0.8320 - val_loss: 0.4392 - val_accuracy: 0.8260 Epoch 171/200 500/500 [==============================] - 0s 91us/step - loss: 0.3872 - accuracy: 0.8220 - val_loss: 0.4473 - val_accuracy: 0.8200 Epoch 172/200 500/500 [==============================] - 0s 87us/step - loss: 0.3957 - accuracy: 0.8340 - val_loss: 0.4533 - val_accuracy: 0.8140 Epoch 173/200 500/500 [==============================] - 0s 79us/step - loss: 0.3845 - accuracy: 0.8300 - val_loss: 0.4236 - val_accuracy: 0.8180 Epoch 174/200 500/500 [==============================] - 0s 87us/step - loss: 0.3847 - accuracy: 0.8300 - val_loss: 0.4272 - val_accuracy: 0.8160 Epoch 175/200 500/500 [==============================] - 0s 86us/step - loss: 0.3908 - accuracy: 0.8320 - val_loss: 0.4553 - val_accuracy: 0.8180 Epoch 176/200 500/500 [==============================] - 0s 87us/step - loss: 0.3985 - accuracy: 0.8140 - val_loss: 0.4302 - val_accuracy: 0.8200 Epoch 177/200 500/500 [==============================] - 0s 92us/step - loss: 0.3928 - accuracy: 0.8200 - val_loss: 0.4331 - val_accuracy: 0.8120 Epoch 178/200 500/500 [==============================] - 0s 84us/step - loss: 0.3855 - accuracy: 0.8380 - val_loss: 0.4277 - val_accuracy: 0.8200 Epoch 179/200 500/500 [==============================] - 0s 98us/step - loss: 0.3980 - accuracy: 0.8200 - val_loss: 0.4245 - val_accuracy: 0.8240 Epoch 180/200 500/500 [==============================] - 0s 96us/step - loss: 0.3871 - accuracy: 0.8220 - val_loss: 0.4286 - val_accuracy: 0.8220 Epoch 181/200 500/500 [==============================] - 0s 101us/step - loss: 0.3805 - accuracy: 0.8320 - val_loss: 0.4407 - val_accuracy: 0.8180 Epoch 182/200 500/500 [==============================] - 0s 91us/step - loss: 0.3823 - accuracy: 0.8280 - val_loss: 0.4633 - val_accuracy: 0.8060 Epoch 183/200 500/500 [==============================] - 0s 94us/step - loss: 0.3961 - accuracy: 0.8140 - val_loss: 0.4240 - val_accuracy: 0.8280 Epoch 184/200 500/500 [==============================] - 0s 93us/step - loss: 0.4045 - accuracy: 0.8240 - val_loss: 0.4287 - val_accuracy: 0.8240 Epoch 185/200 500/500 [==============================] - 0s 91us/step - loss: 0.4010 - accuracy: 0.8120 - val_loss: 0.4245 - val_accuracy: 0.8300 Epoch 186/200 500/500 [==============================] - 0s 84us/step - loss: 0.3876 - accuracy: 0.8380 - val_loss: 0.4646 - val_accuracy: 0.8120 Epoch 187/200 500/500 [==============================] - 0s 81us/step - loss: 0.3847 - accuracy: 0.8200 - val_loss: 0.4293 - val_accuracy: 0.8120 Epoch 188/200 500/500 [==============================] - 0s 78us/step - loss: 0.3870 - accuracy: 0.8300 - val_loss: 0.4263 - val_accuracy: 0.8180 Epoch 189/200 500/500 [==============================] - 0s 93us/step - loss: 0.3881 - accuracy: 0.8220 - val_loss: 0.4530 - val_accuracy: 0.8200 Epoch 190/200 500/500 [==============================] - 0s 113us/step - loss: 0.3940 - accuracy: 0.8220 - val_loss: 0.4341 - val_accuracy: 0.8140 Epoch 191/200 500/500 [==============================] - 0s 94us/step - loss: 0.3880 - accuracy: 0.8380 - val_loss: 0.4345 - val_accuracy: 0.8200 Epoch 192/200 500/500 [==============================] - 0s 102us/step - loss: 0.3934 - accuracy: 0.8300 - val_loss: 0.4286 - val_accuracy: 0.8300 Epoch 193/200 500/500 [==============================] - 0s 94us/step - loss: 0.3840 - accuracy: 0.8380 - val_loss: 0.4544 - val_accuracy: 0.8240 Epoch 194/200 500/500 [==============================] - 0s 103us/step - loss: 0.3841 - accuracy: 0.8380 - val_loss: 0.4295 - val_accuracy: 0.8180 Epoch 195/200 500/500 [==============================] - 0s 86us/step - loss: 0.3844 - accuracy: 0.8220 - val_loss: 0.4329 - val_accuracy: 0.8160 Epoch 196/200 500/500 [==============================] - 0s 85us/step - loss: 0.3848 - accuracy: 0.8340 - val_loss: 0.4387 - val_accuracy: 0.8200 Epoch 197/200 500/500 [==============================] - 0s 85us/step - loss: 0.3769 - accuracy: 0.8300 - val_loss: 0.4173 - val_accuracy: 0.8280 Epoch 198/200 500/500 [==============================] - 0s 80us/step - loss: 0.3835 - accuracy: 0.8240 - val_loss: 0.4278 - val_accuracy: 0.8160 Epoch 199/200 500/500 [==============================] - 0s 87us/step - loss: 0.3809 - accuracy: 0.8300 - val_loss: 0.4284 - val_accuracy: 0.8200 Epoch 200/200 500/500 [==============================] - 0s 89us/step - loss: 0.3907 - accuracy: 0.8180 - val_loss: 0.4234 - val_accuracy: 0.8240 500/500 [==============================] - 0s 27us/step 500/500 [==============================] - 0s 33us/step Train acc:0.8380 Test acc:0.8240 . fig=plt.figure(figsize=(8,2)) plt.subplot(121) plt.title(&quot;LOSS&quot;) plt.plot(h.history[&#39;loss&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test&#39;) plt.legend() plt.subplot(122) plt.title(&quot;ACCURACY&quot;) plt.plot(h.history[&#39;accuracy&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_accuracy&#39;], label=&#39;test&#39;) plt.legend() plt.show() . Kullback Leibler Divergence . Measure of how one probablity distribution differs form another KL Div = 0 suggest dist are identical autoenoder used for learning dense featue representation under a model that must reconstruct the original input . #collapse-hide from sklearn.datasets import make_blobs from keras.layers import Dense from keras.models import Sequential from keras.optimizers import SGD from keras.utils import to_categorical import matplotlib.pyplot as plt . . X,y = make_blobs(n_samples=1000,centers=3,n_features=2, cluster_std=2, random_state=2) . y[:5] . array([2, 2, 2, 0, 1]) . y = to_categorical(y) . y[:5] . array([[0., 0., 1.], [0., 0., 1.], [0., 0., 1.], [1., 0., 0.], [0., 1., 0.]], dtype=float32) . n_train=500 trainX,testX = X[:n_train,:],X[n_train:,:] trainy, testy = y[n_train:],y[:n_train] . #collapse-hide model= Sequential() model.add(Dense(50, input_dim=2, activation=&#39;relu&#39;, kernel_initializer=&#39;he_uniform&#39;)) model.add(Dense(3, activation=&#39;softmax&#39;)) opt=SGD(lr=0.01, momentum=0.9) model.compile(loss=&#39;kullback_leibler_divergence&#39;, optimizer=opt, metrics=[&#39;accuracy&#39;]) . . h = model.fit(trainX ,trainy, validation_data=(testX, testy), epochs =100, verbose=1) . Train on 500 samples, validate on 500 samples Epoch 1/100 500/500 [==============================] - 0s 861us/step - loss: 3.2222 - accuracy: 0.3300 - val_loss: 1.8527 - val_accuracy: 0.3240 Epoch 2/100 500/500 [==============================] - 0s 88us/step - loss: 2.6674 - accuracy: 0.3320 - val_loss: 2.3745 - val_accuracy: 0.3500 Epoch 3/100 500/500 [==============================] - 0s 100us/step - loss: 1.6799 - accuracy: 0.3460 - val_loss: 1.2340 - val_accuracy: 0.3360 Epoch 4/100 500/500 [==============================] - 0s 117us/step - loss: 1.3474 - accuracy: 0.3560 - val_loss: 1.2829 - val_accuracy: 0.3220 Epoch 5/100 500/500 [==============================] - 0s 108us/step - loss: 1.3284 - accuracy: 0.3320 - val_loss: 1.1483 - val_accuracy: 0.3400 Epoch 6/100 500/500 [==============================] - 0s 116us/step - loss: 1.2210 - accuracy: 0.3760 - val_loss: 1.1812 - val_accuracy: 0.3500 Epoch 7/100 500/500 [==============================] - 0s 102us/step - loss: 1.1702 - accuracy: 0.3520 - val_loss: 1.2355 - val_accuracy: 0.3360 Epoch 8/100 500/500 [==============================] - 0s 106us/step - loss: 1.1384 - accuracy: 0.3820 - val_loss: 1.2959 - val_accuracy: 0.3460 Epoch 9/100 500/500 [==============================] - 0s 112us/step - loss: 1.1838 - accuracy: 0.3440 - val_loss: 1.1849 - val_accuracy: 0.3500 Epoch 10/100 500/500 [==============================] - 0s 100us/step - loss: 1.1211 - accuracy: 0.3680 - val_loss: 1.2346 - val_accuracy: 0.3180 Epoch 11/100 500/500 [==============================] - 0s 97us/step - loss: 1.1470 - accuracy: 0.3660 - val_loss: 1.1245 - val_accuracy: 0.3420 Epoch 12/100 500/500 [==============================] - 0s 105us/step - loss: 1.1295 - accuracy: 0.3960 - val_loss: 1.1514 - val_accuracy: 0.3480 Epoch 13/100 500/500 [==============================] - 0s 109us/step - loss: 1.1227 - accuracy: 0.3520 - val_loss: 1.1897 - val_accuracy: 0.3320 Epoch 14/100 500/500 [==============================] - 0s 103us/step - loss: 1.0881 - accuracy: 0.4080 - val_loss: 1.1442 - val_accuracy: 0.3560 Epoch 15/100 500/500 [==============================] - 0s 114us/step - loss: 1.0992 - accuracy: 0.3720 - val_loss: 1.1352 - val_accuracy: 0.3420 Epoch 16/100 500/500 [==============================] - 0s 100us/step - loss: 1.1192 - accuracy: 0.3960 - val_loss: 1.1492 - val_accuracy: 0.3340 Epoch 17/100 500/500 [==============================] - 0s 118us/step - loss: 1.1133 - accuracy: 0.3800 - val_loss: 1.1378 - val_accuracy: 0.3300 Epoch 18/100 500/500 [==============================] - 0s 102us/step - loss: 1.0943 - accuracy: 0.3840 - val_loss: 1.1536 - val_accuracy: 0.3480 Epoch 19/100 500/500 [==============================] - 0s 109us/step - loss: 1.1221 - accuracy: 0.3760 - val_loss: 1.1696 - val_accuracy: 0.3340 Epoch 20/100 500/500 [==============================] - 0s 111us/step - loss: 1.1225 - accuracy: 0.3900 - val_loss: 1.1497 - val_accuracy: 0.3220 Epoch 21/100 500/500 [==============================] - 0s 108us/step - loss: 1.1019 - accuracy: 0.3680 - val_loss: 1.1143 - val_accuracy: 0.3500 Epoch 22/100 500/500 [==============================] - 0s 117us/step - loss: 1.0987 - accuracy: 0.3700 - val_loss: 1.1454 - val_accuracy: 0.3280 Epoch 23/100 500/500 [==============================] - 0s 118us/step - loss: 1.0859 - accuracy: 0.3980 - val_loss: 1.1275 - val_accuracy: 0.3300 Epoch 24/100 500/500 [==============================] - 0s 130us/step - loss: 1.0961 - accuracy: 0.4080 - val_loss: 1.1751 - val_accuracy: 0.3300 Epoch 25/100 500/500 [==============================] - 0s 131us/step - loss: 1.1071 - accuracy: 0.4120 - val_loss: 1.1246 - val_accuracy: 0.3300 Epoch 26/100 500/500 [==============================] - 0s 139us/step - loss: 1.1038 - accuracy: 0.3980 - val_loss: 1.1721 - val_accuracy: 0.3440 Epoch 27/100 500/500 [==============================] - 0s 136us/step - loss: 1.1078 - accuracy: 0.3500 - val_loss: 1.1264 - val_accuracy: 0.3580 Epoch 28/100 500/500 [==============================] - 0s 127us/step - loss: 1.0936 - accuracy: 0.3920 - val_loss: 1.1211 - val_accuracy: 0.3540 Epoch 29/100 500/500 [==============================] - 0s 138us/step - loss: 1.1104 - accuracy: 0.3580 - val_loss: 1.1711 - val_accuracy: 0.3580 Epoch 30/100 500/500 [==============================] - 0s 143us/step - loss: 1.1015 - accuracy: 0.3980 - val_loss: 1.1348 - val_accuracy: 0.3600 Epoch 31/100 500/500 [==============================] - 0s 131us/step - loss: 1.1067 - accuracy: 0.3680 - val_loss: 1.1434 - val_accuracy: 0.3340 Epoch 32/100 500/500 [==============================] - 0s 131us/step - loss: 1.1100 - accuracy: 0.3720 - val_loss: 1.1350 - val_accuracy: 0.3400 Epoch 33/100 500/500 [==============================] - 0s 133us/step - loss: 1.1067 - accuracy: 0.3980 - val_loss: 1.1212 - val_accuracy: 0.3580 Epoch 34/100 500/500 [==============================] - 0s 129us/step - loss: 1.0859 - accuracy: 0.3600 - val_loss: 1.1164 - val_accuracy: 0.3520 Epoch 35/100 500/500 [==============================] - 0s 119us/step - loss: 1.0951 - accuracy: 0.3820 - val_loss: 1.1342 - val_accuracy: 0.3480 Epoch 36/100 500/500 [==============================] - 0s 98us/step - loss: 1.1196 - accuracy: 0.3700 - val_loss: 1.1668 - val_accuracy: 0.3500 Epoch 37/100 500/500 [==============================] - 0s 94us/step - loss: 1.0993 - accuracy: 0.3760 - val_loss: 1.1479 - val_accuracy: 0.3120 Epoch 38/100 500/500 [==============================] - 0s 110us/step - loss: 1.0995 - accuracy: 0.3720 - val_loss: 1.1283 - val_accuracy: 0.3320 Epoch 39/100 500/500 [==============================] - 0s 102us/step - loss: 1.0895 - accuracy: 0.4000 - val_loss: 1.1426 - val_accuracy: 0.3480 Epoch 40/100 500/500 [==============================] - 0s 94us/step - loss: 1.0808 - accuracy: 0.4080 - val_loss: 1.1288 - val_accuracy: 0.3580 Epoch 41/100 500/500 [==============================] - 0s 90us/step - loss: 1.0863 - accuracy: 0.3980 - val_loss: 1.1187 - val_accuracy: 0.3440 Epoch 42/100 500/500 [==============================] - 0s 102us/step - loss: 1.0833 - accuracy: 0.3880 - val_loss: 1.1287 - val_accuracy: 0.3540 Epoch 43/100 500/500 [==============================] - 0s 97us/step - loss: 1.0891 - accuracy: 0.4240 - val_loss: 1.1204 - val_accuracy: 0.3580 Epoch 44/100 500/500 [==============================] - 0s 104us/step - loss: 1.0961 - accuracy: 0.4020 - val_loss: 1.1448 - val_accuracy: 0.3480 Epoch 45/100 500/500 [==============================] - 0s 103us/step - loss: 1.0927 - accuracy: 0.3940 - val_loss: 1.1288 - val_accuracy: 0.3540 Epoch 46/100 500/500 [==============================] - 0s 104us/step - loss: 1.0777 - accuracy: 0.4020 - val_loss: 1.1272 - val_accuracy: 0.3580 Epoch 47/100 500/500 [==============================] - 0s 100us/step - loss: 1.0854 - accuracy: 0.3720 - val_loss: 1.1317 - val_accuracy: 0.3420 Epoch 48/100 500/500 [==============================] - 0s 107us/step - loss: 1.0723 - accuracy: 0.4060 - val_loss: 1.1284 - val_accuracy: 0.3640 Epoch 49/100 500/500 [==============================] - 0s 118us/step - loss: 1.0926 - accuracy: 0.3800 - val_loss: 1.1306 - val_accuracy: 0.3460 Epoch 50/100 500/500 [==============================] - 0s 109us/step - loss: 1.0785 - accuracy: 0.4060 - val_loss: 1.1317 - val_accuracy: 0.3600 Epoch 51/100 500/500 [==============================] - 0s 103us/step - loss: 1.0839 - accuracy: 0.3740 - val_loss: 1.1269 - val_accuracy: 0.3640 Epoch 52/100 500/500 [==============================] - 0s 123us/step - loss: 1.0810 - accuracy: 0.3860 - val_loss: 1.1360 - val_accuracy: 0.3560 Epoch 53/100 500/500 [==============================] - 0s 89us/step - loss: 1.0839 - accuracy: 0.3840 - val_loss: 1.1242 - val_accuracy: 0.3640 Epoch 54/100 500/500 [==============================] - 0s 111us/step - loss: 1.0861 - accuracy: 0.3980 - val_loss: 1.1437 - val_accuracy: 0.3580 Epoch 55/100 500/500 [==============================] - 0s 106us/step - loss: 1.0731 - accuracy: 0.3880 - val_loss: 1.1140 - val_accuracy: 0.3660 Epoch 56/100 500/500 [==============================] - 0s 101us/step - loss: 1.0809 - accuracy: 0.4020 - val_loss: 1.1610 - val_accuracy: 0.3360 Epoch 57/100 500/500 [==============================] - 0s 105us/step - loss: 1.0781 - accuracy: 0.3980 - val_loss: 1.1489 - val_accuracy: 0.3680 Epoch 58/100 500/500 [==============================] - 0s 94us/step - loss: 1.0874 - accuracy: 0.4000 - val_loss: 1.1351 - val_accuracy: 0.3400 Epoch 59/100 500/500 [==============================] - 0s 91us/step - loss: 1.0826 - accuracy: 0.3980 - val_loss: 1.1200 - val_accuracy: 0.3680 Epoch 60/100 500/500 [==============================] - 0s 88us/step - loss: 1.0754 - accuracy: 0.3920 - val_loss: 1.1585 - val_accuracy: 0.3300 Epoch 61/100 500/500 [==============================] - 0s 97us/step - loss: 1.0890 - accuracy: 0.3940 - val_loss: 1.1718 - val_accuracy: 0.3580 Epoch 62/100 500/500 [==============================] - 0s 93us/step - loss: 1.0889 - accuracy: 0.3840 - val_loss: 1.1730 - val_accuracy: 0.3420 Epoch 63/100 500/500 [==============================] - 0s 94us/step - loss: 1.0821 - accuracy: 0.4040 - val_loss: 1.1326 - val_accuracy: 0.3580 Epoch 64/100 500/500 [==============================] - 0s 95us/step - loss: 1.0879 - accuracy: 0.3960 - val_loss: 1.1403 - val_accuracy: 0.3620 Epoch 65/100 500/500 [==============================] - 0s 100us/step - loss: 1.0923 - accuracy: 0.3900 - val_loss: 1.1938 - val_accuracy: 0.3600 Epoch 66/100 500/500 [==============================] - 0s 106us/step - loss: 1.1103 - accuracy: 0.3580 - val_loss: 1.1249 - val_accuracy: 0.3600 Epoch 67/100 500/500 [==============================] - 0s 95us/step - loss: 1.0821 - accuracy: 0.4000 - val_loss: 1.1405 - val_accuracy: 0.3480 Epoch 68/100 500/500 [==============================] - 0s 87us/step - loss: 1.0736 - accuracy: 0.4180 - val_loss: 1.1333 - val_accuracy: 0.3480 Epoch 69/100 500/500 [==============================] - 0s 84us/step - loss: 1.0772 - accuracy: 0.4100 - val_loss: 1.1324 - val_accuracy: 0.3440 Epoch 70/100 500/500 [==============================] - 0s 95us/step - loss: 1.0841 - accuracy: 0.3820 - val_loss: 1.1616 - val_accuracy: 0.3500 Epoch 71/100 500/500 [==============================] - 0s 94us/step - loss: 1.0819 - accuracy: 0.3880 - val_loss: 1.1491 - val_accuracy: 0.3520 Epoch 72/100 500/500 [==============================] - 0s 94us/step - loss: 1.0922 - accuracy: 0.3900 - val_loss: 1.1559 - val_accuracy: 0.3520 Epoch 73/100 500/500 [==============================] - 0s 92us/step - loss: 1.1082 - accuracy: 0.3820 - val_loss: 1.1378 - val_accuracy: 0.3440 Epoch 74/100 500/500 [==============================] - 0s 86us/step - loss: 1.0973 - accuracy: 0.4020 - val_loss: 1.1567 - val_accuracy: 0.3600 Epoch 75/100 500/500 [==============================] - 0s 91us/step - loss: 1.0982 - accuracy: 0.3920 - val_loss: 1.1398 - val_accuracy: 0.3380 Epoch 76/100 500/500 [==============================] - 0s 90us/step - loss: 1.0817 - accuracy: 0.4020 - val_loss: 1.1480 - val_accuracy: 0.3480 Epoch 77/100 500/500 [==============================] - 0s 100us/step - loss: 1.0861 - accuracy: 0.4140 - val_loss: 1.1387 - val_accuracy: 0.3480 Epoch 78/100 500/500 [==============================] - 0s 91us/step - loss: 1.0747 - accuracy: 0.3960 - val_loss: 1.1228 - val_accuracy: 0.3640 Epoch 79/100 500/500 [==============================] - 0s 94us/step - loss: 1.0756 - accuracy: 0.3960 - val_loss: 1.1544 - val_accuracy: 0.3340 Epoch 80/100 500/500 [==============================] - 0s 95us/step - loss: 1.1018 - accuracy: 0.3760 - val_loss: 1.1342 - val_accuracy: 0.3640 Epoch 81/100 500/500 [==============================] - 0s 95us/step - loss: 1.0778 - accuracy: 0.3960 - val_loss: 1.1506 - val_accuracy: 0.3500 Epoch 82/100 500/500 [==============================] - 0s 93us/step - loss: 1.0756 - accuracy: 0.4100 - val_loss: 1.1302 - val_accuracy: 0.3580 Epoch 83/100 500/500 [==============================] - 0s 93us/step - loss: 1.0705 - accuracy: 0.3920 - val_loss: 1.1197 - val_accuracy: 0.3720 Epoch 84/100 500/500 [==============================] - 0s 95us/step - loss: 1.0730 - accuracy: 0.3960 - val_loss: 1.1302 - val_accuracy: 0.3760 Epoch 85/100 500/500 [==============================] - 0s 95us/step - loss: 1.0943 - accuracy: 0.3720 - val_loss: 1.1299 - val_accuracy: 0.3660 Epoch 86/100 500/500 [==============================] - 0s 91us/step - loss: 1.0821 - accuracy: 0.4120 - val_loss: 1.2098 - val_accuracy: 0.3420 Epoch 87/100 500/500 [==============================] - 0s 92us/step - loss: 1.0927 - accuracy: 0.3880 - val_loss: 1.1247 - val_accuracy: 0.3680 Epoch 88/100 500/500 [==============================] - 0s 103us/step - loss: 1.0742 - accuracy: 0.3900 - val_loss: 1.1231 - val_accuracy: 0.3580 Epoch 89/100 500/500 [==============================] - 0s 93us/step - loss: 1.0728 - accuracy: 0.3920 - val_loss: 1.1298 - val_accuracy: 0.3520 Epoch 90/100 500/500 [==============================] - 0s 95us/step - loss: 1.0862 - accuracy: 0.3920 - val_loss: 1.1388 - val_accuracy: 0.3600 Epoch 91/100 500/500 [==============================] - 0s 98us/step - loss: 1.0752 - accuracy: 0.4060 - val_loss: 1.1332 - val_accuracy: 0.3620 Epoch 92/100 500/500 [==============================] - 0s 91us/step - loss: 1.0759 - accuracy: 0.3820 - val_loss: 1.1293 - val_accuracy: 0.3480 Epoch 93/100 500/500 [==============================] - 0s 93us/step - loss: 1.0681 - accuracy: 0.4120 - val_loss: 1.1527 - val_accuracy: 0.3440 Epoch 94/100 500/500 [==============================] - 0s 93us/step - loss: 1.0874 - accuracy: 0.3780 - val_loss: 1.1461 - val_accuracy: 0.3440 Epoch 95/100 500/500 [==============================] - 0s 94us/step - loss: 1.0766 - accuracy: 0.3880 - val_loss: 1.1234 - val_accuracy: 0.3700 Epoch 96/100 500/500 [==============================] - 0s 90us/step - loss: 1.0749 - accuracy: 0.3880 - val_loss: 1.1604 - val_accuracy: 0.3540 Epoch 97/100 500/500 [==============================] - 0s 97us/step - loss: 1.0813 - accuracy: 0.3580 - val_loss: 1.1169 - val_accuracy: 0.3520 Epoch 98/100 500/500 [==============================] - 0s 93us/step - loss: 1.0648 - accuracy: 0.4040 - val_loss: 1.1258 - val_accuracy: 0.3660 Epoch 99/100 500/500 [==============================] - 0s 85us/step - loss: 1.0715 - accuracy: 0.4040 - val_loss: 1.1351 - val_accuracy: 0.3620 Epoch 100/100 500/500 [==============================] - 0s 88us/step - loss: 1.0859 - accuracy: 0.3920 - val_loss: 1.1438 - val_accuracy: 0.3500 . model.evaluate(trainX,trainy,verbose=1) . 500/500 [==============================] - 0s 49us/step . [1.0587191171646118, 0.41600000858306885] . model.metrics_names . [&#39;loss&#39;, &#39;accuracy&#39;] . h.history.keys() . dict_keys([&#39;val_loss&#39;, &#39;val_accuracy&#39;, &#39;loss&#39;, &#39;accuracy&#39;]) . fig=plt.figure(figsize=(8,2)) plt.subplot(121) plt.title(&quot;LOSS&quot;) plt.plot(h.history[&#39;loss&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_loss&#39;], label=&#39;test&#39;) plt.legend() plt.subplot(122) plt.title(&quot;ACCURACY&quot;) plt.plot(h.history[&#39;accuracy&#39;], label=&#39;train&#39;) plt.plot(h.history[&#39;val_accuracy&#39;], label=&#39;test&#39;) plt.legend() plt.show() . FIN .",
            "url": "https://onpointai.github.io/onpointai/ai/ml/jupyter/2020/06/05/lossfunctions.html",
            "relUrl": "/ai/ml/jupyter/2020/06/05/lossfunctions.html",
            "date": " • Jun 5, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Sports Video Classification",
            "content": "Overview . The simplest way to classify the type of video is by examining individual frames of the video ie treat individual frames as images, classify the images and then do some sort of averaging or smoothing over a few frames to predict the current display. . Once we understand what goes on here we can explore the other methods which take up more setup and compute. . The main package here is OpenCV, a library aimed at real-time computer vision tasks. . The dataset used was a collection of images curated using Google image search. . ├── Sports-Type-Classifier │ ├── data │ │ ├── badminton [938 entries] │ │ ├── baseball [746 entries] │ │ ├── basketball [495 entries] │ │ ├── boxing [705 entries] │ │ ├── chess [481 entries] │ │ ├── cricket [715 entries] │ │ ├── fencing [635 entries] │ │ ├── football [799 entries] │ │ ├── formula1 [687 entries] │ │ ├── gymnastics [719 entries] │ │ ├── hockey [572 entries] │ │ ├── ice_hockey [715 entries] │ │ ├── kabaddi [454 entries] │ │ ├── motogp [679 entries] │ │ ├── shooting [536 entries] │ │ ├── swimming [689 entries] │ │ ├── table_tennis [713 entries] │ │ ├── tennis [718 entries] │ │ ├── volleyball [713 entries] │ │ ├── weight_lifting [577 entries] │ │ ├── wrestling [611 entries] │ │ ├── wwe [671 entries] . Setup . The repo contains the data, Colab Jupyter notebooks and trained weights for different training regimes. . Results . . . . . . . .",
            "url": "https://onpointai.github.io/onpointai/ai/ml/video%20classification/2020/05/21/videoclassification.html",
            "relUrl": "/ai/ml/video%20classification/2020/05/21/videoclassification.html",
            "date": " • May 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Multi-label Image Classification",
            "content": "Overview . This is a tutorial from Analytics Vidhya . The dataset of images contain more than two categories ie it is not a simple either/or . Each image in the dataset can contain only one category . Example: A dataset containing images such as dog, cat, rabbit, parrot Each image contains only dog, cat, parrot rabbit . . The above is know as multi-label image classification. . Question: Can we predict the genre of a movie by looking at the movie poster? And ofcourse a movie can belong to more than one genre. . The key is in the output layer - use a sigmoid activation instead of softmax. With Softmax as the probablity of one increases the probability of the other classses decrease (becuase the sum must equal 1). With Sigmoid however the probabilities are independent of each other. So with sigmoid the architecture will internally create N models where N is the number of classes. Cool huh?! . Setup . For details of the model and data see repo . Note: No attempt has been made to finetune the architecture and reduce the amount of overfitting and hence get a better training/validation loss. . Results . . . .",
            "url": "https://onpointai.github.io/onpointai/ai/ml/multi-label%20image%20classification/2020/05/19/multilabelimageclass.html",
            "relUrl": "/ai/ml/multi-label%20image%20classification/2020/05/19/multilabelimageclass.html",
            "date": " • May 19, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Style Transfer using Neural Networks",
            "content": "Overview . This method renders the contents of a Original image in the style of a Reference image. For example in an image of a cityscape the contents can be considered as the hard edges of the buildings. The Reference image can contain lots of swirly patters and colours which will be know as the style of the image. The loss function is defined in parameter space as the difference between the content and style of the images as laid out below: . Loss = distance((style(reference_image) - style(generated_image)) + (distance(content(original_image) - content(generated_image)) . As a workflow exercise I attempted to render the image of an F1 car in the style of Picasso! I used images of recent Racing Point and Renault F1 cars. . Setup . The notebook, models and data are contained here . I trained it on Google Colab using both Tensorflow and Pytorch (separately ofcourse!) The trained model is implemented using a webapp. The user is asked to select an image and the analysis is displayed. . . Results . . Loss = distance((style(reference_image) - style(generated_image)) + (distance(content(original_image) - content(generated_image)) original_image = a picture of an F1 car reference_image = a style image such as Picasso . . .",
            "url": "https://onpointai.github.io/onpointai/ai/ml/style%20transfer/2020/05/18/neuralstyletransfer.html",
            "relUrl": "/ai/ml/style%20transfer/2020/05/18/neuralstyletransfer.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Predict F1 Car Constructor from Image",
            "content": "Overview . This is an exercise based on Formula 1 cars and is aimed at predicting which team a car belongs to by analysing an image. The image can be from any angle. This is an end-to-end example ir from gathering the data, training a model and deploying the trained model using a webapp on a local server. . Setup . The training setup, data are in this repo . This is a good example of a complete workflow . collecting data using google web search (local) | cleaning the data (removing duplicate images and other rubbish) (local) | porting data to Google Colab - When i was doing this I did not have my Github a/c organised properly Otherwise I would have done git init and ported the local repo to github From Google Colab it is easy to clone the Github repo | Once the data is in repo start a new jupyter notebook and select a GPU for training. | Download the trained model to the local dir | Modify the webapp to point to the trained model and do the predictions | . Note: I only used about 75 images per class (10 classes) to cut down on the training time. . I used Fastai’s recommended Starlette web api and with a bit of playing around with the css and html file got something suitable. . This is only meant for demo purposes and to motivate me to carry on with the ret of the course. . Results . . . Suggested Improvements: . Add more training data | Clean training data | Overfit and then play around with hyperparameters | Give webapp better UI | . . .",
            "url": "https://onpointai.github.io/onpointai/ai/ml/image%20classification/2020/05/18/f1carspredictor.html",
            "relUrl": "/ai/ml/image%20classification/2020/05/18/f1carspredictor.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Stochastic Gradient Descent",
            "content": "Overview . ML is basically this - you make a prediction, see how far that prediction is from the truth, fine-tune your prediction and keep going until the difference between between the prediction and the actual reaches an acceptable level. If we imagine the loss function plotted as a U curve then we are trying to reach the bottom of the curve as quickly as possible ie minimise the loss. From our starting point, a guess, we then take a small step in the direction of lower loss. The small step is known as the learning rate and the direction of lower loss is worked out from the slope of the curve. . Minimising the loss . Below is a regression example. The pink dots are the initial set of data. To this we have to find a general approximation that will satisfy any new points. Our initial guess is the black line. . We then go through the fllowing sequence: Loss = New Value - Actual Value Find slope of the loss function Move down the loss curve by a small amount (the Learning Rate) Find the new loss . . Pytorch implementation . y is the actual y_hat is the prediction (based on a set of weights a) loss is the mean squared error between y_hat and y def mse(y_hat,y): return((y_hat-y)**2).mean() def update(): y_hat = x@a loss=mse(y_hat,y) loss.backward() with torch.no_grad(): a.sub_(lr * a.grad) a.grad.zero_() . References . Fast.ai | Machine Learning Mastery | D :bowtie: — .",
            "url": "https://onpointai.github.io/onpointai/ai/ml%20gradient%20descent/2020/05/17/sgd.html",
            "relUrl": "/ai/ml%20gradient%20descent/2020/05/17/sgd.html",
            "date": " • May 17, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Overview of AI/ML",
            "content": "The contents of this page should be treated as a set of flashcards with each giving some insight into the definition, structure and scope of AI tools in everyday use. . Note: Reinforcement Learning (think Apha Go) has no practical applications at the moment for me and will therefore not be discussed. . . . . . . . . . . . It has been shown that the winner is not necessarily the smartest or the one with the best computer. Instead it is the person who can develop their ideas quickly. . . .",
            "url": "https://onpointai.github.io/onpointai/ai/ml/visuals/2020/05/15/overview.html",
            "relUrl": "/ai/ml/visuals/2020/05/15/overview.html",
            "date": " • May 15, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Reference Material",
            "content": "This is a list of links to articles, blogposts, videos, tutorials that I have found very useful on my ML journey. It serves as a useful reference point and is ever-growing. . Setup . Tensorflow or Pytorch? . Google Colab . I love articles, tutorials, videos by the following: . Adrian Rosebrock Pyimagesearch. Andrej Karpathy blog. Chris Olah blog. Andrew Ng Coursera. Francois Chollet Book. Jeremey Howard Fast.ai. Rachel Thomas Fast.ai. Chris Albon Great flashcards - Buy them!. Aakash Nain Jovian. Hannah Fry [Makes number fun!]http://www.hannahfry.co.uk(). Jason Brownlee Tutorials. . Powerful Quotes . F Chollet: “You don’t need to know everything. You don’t really need a formal background in this or that – though it helps, you don’t even need a PhD. You do, however, need to be constantly learning, be curious, read books. Don’t be “too busy” to learn, or otherwise proud of your ignorance.” “Honestly, the question is not, and has never been, “ can ML replace radiologists/etc” (which won’t happen in the foreseeable future). The question is, how can radiology/etc utilise ML to improve outcomes, decrease the cost of car, and broaden accessibility.” . | Geoff Hinton: “Read enough sp you start developing intuitions and then trust your intuitions and go for it!.” . | Andrew Ng: “Deep Learning is a superpower. With it you can make a computer see, synthesize novel art, translate languages, render a medical diagnosis, or build pieces of a car that can drive itself. If that isn’t a superpower, I don’t know what is.” . | . . . Ignore stuff below. . . You can include alert boxes …and… . . You can include info boxes Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Tables . | Tensorflow | Pytorch | |-|-| | Keras | Fastai | — .",
            "url": "https://onpointai.github.io/onpointai/markdown/2020/05/14/referencematerial.html",
            "relUrl": "/markdown/2020/05/14/referencematerial.html",
            "date": " • May 14, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy JH Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://onpointai.github.io/onpointai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Dexter D’Silva . I am an Aeronautical Engineer having worked at: Airbus Wing Shape Team (High Speed Aerodynamics). EADS Innovation Works. Racing Point Formula 1 team (Aero Design processes). . I was always interested in writing macros, developing software on a one-off basis and saw myself writing advanced macros for CATIA automation initially in the field of wing shaping. . In 2017 I came across this video by Andrew Ng and since then I have been hooked on AI/Machine Learning and want to learn as much as I can about it with a view to applying my own spin on implementing flavours of it in the work that I do. . I am pretty good at connecting the dots of technology in the field of aero design where I work with CAD and CFD. I am always working on tutorials to build intuition about AI and explore it’s feasibility in my daily work, where my domain knowledge will help me to enhance my value to my customer/employer. . The other area of interest is exploring the use of AI to analyse the huge amount of data generated by CFD, wind tunnel testing and on-track or flight testing and building tools to gain easy access to knowledge, to decipher, disseminate and democratise within the organisation. . Here is my CV . Online courses with certificates . Coursera/Stanford | Deep Learning - AI for Everyone | Zero to Deep Learning | Deep Learning in Python | Supervised Learning - Scikit Learn | NLP - Python | Statistical Thinking in Python | Unsupervised Learning with Python | Intermediate Python for Data Science | Introduction Python for Data Science | Pandas Foundation | . Other Online Courses . Fast.ai | . Inspired by Fast.ai . . :cowboy_hat_face: . . .",
          "url": "https://onpointai.github.io/onpointai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://onpointai.github.io/onpointai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}