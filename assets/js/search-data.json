{
  
    
        "post0": {
            "title": "Multi-label Image Classification--",
            "content": "This is a tutorial from Analytics Vidhya . For Setup see here . Note: No attempt has been made to finetune the architecture and reduce the amount of overfitting and hence get a better training/validation loss. . Example Result at the bottom of this page. . The dataset of images contain more than two categories ie it is not a simple either/or . Each image in the dataset can contain only one category . Example: A dataset containing images such as dog, cat, rabbit, parrot Each image contains only dog, cat, parrot rabbit . . The above is know as multi-label image classification. . Question: Can we predict the genre of a movie by looking at the movie poster? And ofcourse a movie can belong to more than one genre. . The key is in the output layer - use a sigmoid activation instead of softmax. With Softmax as the probablity of one increases the probability of the other classses decrease (becuase the sum must equal 1). With Sigmoid however the probabilities are independent of each other. So with sigmoid the architecture will internally create N models where N is the number of classes. Cool huh?! . Results: . — . .",
            "url": "https://onpointai.github.io/onpointai/markdown/2020/05/19/multilabelimageclass.html",
            "relUrl": "/markdown/2020/05/19/multilabelimageclass.html",
            "date": " • May 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Style Transfer using Neural Networks",
            "content": "As a workflow exercise I attempted to render the image of an F1 car in the style of Picasso! I used images of recent Racing Point and Renault F1 cars. . I trained it on Google Colab using both Tensorflow and Pytorch (separately ofcourse!) . The resulting images were very similar. . Look here for Setup and Results . Loss = distance((style(reference_image) - style(generated_image)) + (distance(content(original_image) - content(generated_image)) original_image = a picture of an F1 car reference_image = a style image such as Picasso . Note to self: Put results on this page too. . . .",
            "url": "https://onpointai.github.io/onpointai/markdown/2020/05/18/neuralstyletransfer.html",
            "relUrl": "/markdown/2020/05/18/neuralstyletransfer.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "F1carspredictor",
            "content": "F1 cars predictor . Precict which team a car belongs to by analysing an image. The image can be from any angle. This is an end-to-end example. . Look here for Setup and Results . This is a good example of a complete workflow . collecting data using google web search (local) | cleaning the data (removing duplicate images and other rubbish) (local) | porting data to Google Colab - When i was doing this I did not have my Github a/c organised properly Otherwise I would have done git init and ported the local repo to github From Google Colab it is easy to clone the Github repo | Once the data is in repo start a new jupyter notebook and select a GPU for training. | Download the trained model to the local dir | Modify the webapp to point to the trained model and do the predictions | . Note: I only used about 75 images per class (10 classes) to cut down on the training time. . I used Fastai’s recommended Starlette web api and with a bit of playing around with the css and html file got something suitable. . This is only meant for demo purposes and to motivate me to carry on with the ret of the course. . Suggested Improvements: . Add more training data | Clean training data | Overfit and then play around with hyperparameters | Give webapp better UI | . Note to self: Put results on this page too. . .",
            "url": "https://onpointai.github.io/onpointai/2020/05/18/f1carspredictor.html",
            "relUrl": "/2020/05/18/f1carspredictor.html",
            "date": " • May 18, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Sgd",
            "content": "Gradient Descent - The Essence of Machine Learning . The Loss Function . ML is basically this - you make a prediction, see how far that prediction is from the truth, fine-tune your prediction and keep going until the difference between between the prediction and the actual reaches an acceptable level. If we imagine the loss function plotted as a U curve then we are trying to reach the bottom of the curve as quickly as possible ie minimise the loss. From our starting point, a guess, we then take a small step in the direction of lower loss. The small step is known as the learning rate and the direction of lower loss is worked out from the slope of the curve. . Below is a regressing example. The pick dots are the intial set of data. To this we have to find a general approximation that will satisfy any new points. Our initial guess is the black line. . We then go through the fllowing sequence: Loss = New Value - Actual Value Find slope of the loss function Move down the loss curve by a small amount (the Learning Rate) Find the new loss . . Pytorch implementation . y is the actual y_hat is the prediction (based on a set of weights a) loss is the mean squared error between y_hat and y def mse(y_hat,y): return((y_hat-y)**2).mean() def update(): y_hat = x@a loss=mse(y_hat,y) loss.backward() with torch.no_grad(): a.sub_(lr * a.grad) a.grad.zero_() . References: . Fast.ai | Machine Learning Mastery | D :bowtie: — .",
            "url": "https://onpointai.github.io/onpointai/2020/05/17/sgd.html",
            "relUrl": "/2020/05/17/sgd.html",
            "date": " • May 17, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Awelcome",
            "content": "Useful Reference material . : . Setup . Tensorflow or Pytorch? . Google Colab . I love articles, tutorials, videos by the following: . Adrian Rosebrock Pyimagesearch. Andrej Karpathy blog. Chris Olah blog. Andrew Ng Coursera. Francois Chollet Book. Jeremey Howard Fast.ai. Rachel Thomas Fast.ai. Chris Albon Great flashcards - Buy them!. Aakash Nain Jovian. Hannah Fry [Makes number fun!]http://www.hannahfry.co.uk(). Jason Brownlee Tutorials. . Powerful Quotes . F Chollet: “You don’t need to know everything. You don’t really need a formal background in this or that – though it helps, you don’t even need a PhD. You do, however, need to be constantly learning, be curious, read books. Don’t be “too busy” to learn, or otherwise proud of your ignorance.” “Honestly, the question is not, and has never been, “ can ML replace radiologists/etc” (which won’t happen in the foreseeable future). The question is, how can radiology/etc utilise ML to improve outcomes, decrease the cost of car, and broaden accessibility.” . | Geoff Hinton: “Read enough to develop your intuitions, then trust your intuitions.” . | Andrew Ng: “Deep Learning is a superpower. With it you can make a computer see, synthesize novel art, translate languages, render a medical diagnosis, or build pieces of a car that can drive itself. If that isn’t a superpower, I don’t know what is.” . | . . . {:no_toc} Ignore stuff below. . . {:no_toc} Stuff . . You can include alert boxes …and… . . You can include info boxes Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Tables . Tensorflow Pytorch . Keras | Fastai | . .",
            "url": "https://onpointai.github.io/onpointai/2020/05/17/awelcome.html",
            "relUrl": "/2020/05/17/awelcome.html",
            "date": " • May 17, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://onpointai.github.io/onpointai/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://onpointai.github.io/onpointai/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Dexter D’Silva . I am an Aeronautical Engineer having worked at: Airbus Wing Shape Team (High Speed Aerodynamics). EADS Innovation Works. Racing Point Formula 1 team (Aero Design processes). . I was always interested in writing macros, developing software on a one-off basis and saw myself writing advanced macros for CATIA automation initially in the field of wing shaping. . In 2017 I came across this video by Andrew Ng and since then I have been hooked on AI/Machine Learning and want to learn as much as I can about it with a view to applying my own spin on implementing flavours of it in the work that I do. . I am pretty good at connecting the dots of technology in the field of aero design where I work with CAD and CFD. I am always working on tutorials to build intuition about AI and explore it’s feasibility in my daily work, where my domain knowledge will help me to enhance my value to my customer/employer. . The other area of interest is exploring the use of AI to analyse the huge amount of data generated by CFD, wind tunnel testing and on-track or flight testing and building tools to gain easy access to knowledge, to decipher, disseminate and democratise within the organisation. . Here is my CV . Online courses with certificates . Coursera/Stanford | Deep Learning - AI for Everyone | Zero to Deep Learning | Deep Learning in Python | Supervised Learning - Scikit Learn | NLP - Python | Statistical Thinking in Python | Unsupervised Learning with Python | Intermediate Python for Data Science | Introduction Python for Data Science | Pandas Foundation | . Other Online Courses . Fast.ai | . Inspired by Fast.ai . . — .",
          "url": "https://onpointai.github.io/onpointai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://onpointai.github.io/onpointai/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}